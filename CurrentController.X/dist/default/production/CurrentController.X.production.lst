

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 27 17:42:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	intentry,global,class=CODE,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 1.41
    71                           ; Generated 25/01/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F18325 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000E                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  008C                     	;# 
   138  008E                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0097                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  010C                     	;# 
   152  010E                     	;# 
   153  0111                     	;# 
   154  0112                     	;# 
   155  0113                     	;# 
   156  0114                     	;# 
   157  0115                     	;# 
   158  0116                     	;# 
   159  0117                     	;# 
   160  0118                     	;# 
   161  0119                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0197                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  020C                     	;# 
   191  020E                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0216                     	;# 
   205  0216                     	;# 
   206  0217                     	;# 
   207  0217                     	;# 
   208  0219                     	;# 
   209  021A                     	;# 
   210  021B                     	;# 
   211  021C                     	;# 
   212  021D                     	;# 
   213  021D                     	;# 
   214  021E                     	;# 
   215  021F                     	;# 
   216  028C                     	;# 
   217  028E                     	;# 
   218  0291                     	;# 
   219  0291                     	;# 
   220  0292                     	;# 
   221  0293                     	;# 
   222  0294                     	;# 
   223  0295                     	;# 
   224  0295                     	;# 
   225  0296                     	;# 
   226  0297                     	;# 
   227  0298                     	;# 
   228  029F                     	;# 
   229  030C                     	;# 
   230  030E                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0314                     	;# 
   236  0315                     	;# 
   237  0315                     	;# 
   238  0316                     	;# 
   239  0317                     	;# 
   240  0318                     	;# 
   241  038C                     	;# 
   242  038E                     	;# 
   243  0391                     	;# 
   244  0392                     	;# 
   245  0393                     	;# 
   246  0397                     	;# 
   247  0398                     	;# 
   248  0399                     	;# 
   249  039A                     	;# 
   250  039C                     	;# 
   251  039D                     	;# 
   252  039E                     	;# 
   253  039F                     	;# 
   254  0411                     	;# 
   255  0411                     	;# 
   256  0412                     	;# 
   257  0413                     	;# 
   258  0414                     	;# 
   259  0415                     	;# 
   260  0416                     	;# 
   261  0417                     	;# 
   262  0418                     	;# 
   263  0418                     	;# 
   264  0419                     	;# 
   265  041A                     	;# 
   266  041B                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  041F                     	;# 
   271  0498                     	;# 
   272  0498                     	;# 
   273  0499                     	;# 
   274  049A                     	;# 
   275  049B                     	;# 
   276  049B                     	;# 
   277  049C                     	;# 
   278  049D                     	;# 
   279  049E                     	;# 
   280  049F                     	;# 
   281  0617                     	;# 
   282  0618                     	;# 
   283  0619                     	;# 
   284  0619                     	;# 
   285  061A                     	;# 
   286  061B                     	;# 
   287  061C                     	;# 
   288  061C                     	;# 
   289  061F                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  0711                     	;# 
   300  0712                     	;# 
   301  0713                     	;# 
   302  0714                     	;# 
   303  0715                     	;# 
   304  0716                     	;# 
   305  0717                     	;# 
   306  0718                     	;# 
   307  0719                     	;# 
   308  0891                     	;# 
   309  0891                     	;# 
   310  0891                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0892                     	;# 
   315  0892                     	;# 
   316  0892                     	;# 
   317  0893                     	;# 
   318  0893                     	;# 
   319  0893                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0894                     	;# 
   324  0894                     	;# 
   325  0894                     	;# 
   326  0895                     	;# 
   327  0895                     	;# 
   328  0895                     	;# 
   329  0896                     	;# 
   330  0896                     	;# 
   331  0896                     	;# 
   332  089B                     	;# 
   333  0911                     	;# 
   334  0912                     	;# 
   335  0913                     	;# 
   336  0914                     	;# 
   337  0915                     	;# 
   338  0916                     	;# 
   339  0918                     	;# 
   340  0919                     	;# 
   341  091A                     	;# 
   342  091B                     	;# 
   343  091C                     	;# 
   344  091D                     	;# 
   345  091E                     	;# 
   346  091F                     	;# 
   347  0E0F                     	;# 
   348  0E10                     	;# 
   349  0E11                     	;# 
   350  0E12                     	;# 
   351  0E13                     	;# 
   352  0E14                     	;# 
   353  0E15                     	;# 
   354  0E16                     	;# 
   355  0E17                     	;# 
   356  0E18                     	;# 
   357  0E19                     	;# 
   358  0E1A                     	;# 
   359  0E1B                     	;# 
   360  0E1C                     	;# 
   361  0E1D                     	;# 
   362  0E1E                     	;# 
   363  0E1F                     	;# 
   364  0E20                     	;# 
   365  0E21                     	;# 
   366  0E22                     	;# 
   367  0E24                     	;# 
   368  0E25                     	;# 
   369  0E28                     	;# 
   370  0E29                     	;# 
   371  0E2A                     	;# 
   372  0E2B                     	;# 
   373  0E2C                     	;# 
   374  0E2D                     	;# 
   375  0E2E                     	;# 
   376  0E2F                     	;# 
   377  0E90                     	;# 
   378  0E91                     	;# 
   379  0E92                     	;# 
   380  0E94                     	;# 
   381  0E95                     	;# 
   382  0EA0                     	;# 
   383  0EA1                     	;# 
   384  0EA2                     	;# 
   385  0EA3                     	;# 
   386  0EA4                     	;# 
   387  0EA5                     	;# 
   388  0F0F                     	;# 
   389  0F10                     	;# 
   390  0F11                     	;# 
   391  0F12                     	;# 
   392  0F13                     	;# 
   393  0F14                     	;# 
   394  0F15                     	;# 
   395  0F16                     	;# 
   396  0F17                     	;# 
   397  0F18                     	;# 
   398  0F19                     	;# 
   399  0F1A                     	;# 
   400  0F1B                     	;# 
   401  0F1C                     	;# 
   402  0F1D                     	;# 
   403  0F1E                     	;# 
   404  0F1F                     	;# 
   405  0F20                     	;# 
   406  0F21                     	;# 
   407  0F22                     	;# 
   408  0F23                     	;# 
   409  0F24                     	;# 
   410  0F25                     	;# 
   411  0F26                     	;# 
   412  0F27                     	;# 
   413  0F28                     	;# 
   414  0F29                     	;# 
   415  0F2A                     	;# 
   416  0F2B                     	;# 
   417  0F2C                     	;# 
   418  0F2D                     	;# 
   419  0F2E                     	;# 
   420  0F2F                     	;# 
   421  0F30                     	;# 
   422  0F31                     	;# 
   423  0F32                     	;# 
   424  0F33                     	;# 
   425  0F34                     	;# 
   426  0F35                     	;# 
   427  0F36                     	;# 
   428  0F37                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0010                     	;# 
   455  0011                     	;# 
   456  0012                     	;# 
   457  0013                     	;# 
   458  0014                     	;# 
   459  0015                     	;# 
   460  0015                     	;# 
   461  0016                     	;# 
   462  0016                     	;# 
   463  0017                     	;# 
   464  0018                     	;# 
   465  0019                     	;# 
   466  0019                     	;# 
   467  001A                     	;# 
   468  001B                     	;# 
   469  001C                     	;# 
   470  001D                     	;# 
   471  001E                     	;# 
   472  001F                     	;# 
   473  008C                     	;# 
   474  008E                     	;# 
   475  0090                     	;# 
   476  0091                     	;# 
   477  0092                     	;# 
   478  0093                     	;# 
   479  0094                     	;# 
   480  0097                     	;# 
   481  009B                     	;# 
   482  009B                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009E                     	;# 
   486  009F                     	;# 
   487  010C                     	;# 
   488  010E                     	;# 
   489  0111                     	;# 
   490  0112                     	;# 
   491  0113                     	;# 
   492  0114                     	;# 
   493  0115                     	;# 
   494  0116                     	;# 
   495  0117                     	;# 
   496  0118                     	;# 
   497  0119                     	;# 
   498  018C                     	;# 
   499  018E                     	;# 
   500  0197                     	;# 
   501  0199                     	;# 
   502  0199                     	;# 
   503  0199                     	;# 
   504  019A                     	;# 
   505  019A                     	;# 
   506  019A                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019C                     	;# 
   513  019C                     	;# 
   514  019C                     	;# 
   515  019D                     	;# 
   516  019D                     	;# 
   517  019D                     	;# 
   518  019E                     	;# 
   519  019E                     	;# 
   520  019E                     	;# 
   521  019F                     	;# 
   522  019F                     	;# 
   523  019F                     	;# 
   524  019F                     	;# 
   525  019F                     	;# 
   526  020C                     	;# 
   527  020E                     	;# 
   528  0211                     	;# 
   529  0211                     	;# 
   530  0212                     	;# 
   531  0212                     	;# 
   532  0213                     	;# 
   533  0213                     	;# 
   534  0214                     	;# 
   535  0214                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0216                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0217                     	;# 
   544  0219                     	;# 
   545  021A                     	;# 
   546  021B                     	;# 
   547  021C                     	;# 
   548  021D                     	;# 
   549  021D                     	;# 
   550  021E                     	;# 
   551  021F                     	;# 
   552  028C                     	;# 
   553  028E                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0294                     	;# 
   559  0295                     	;# 
   560  0295                     	;# 
   561  0296                     	;# 
   562  0297                     	;# 
   563  0298                     	;# 
   564  029F                     	;# 
   565  030C                     	;# 
   566  030E                     	;# 
   567  0311                     	;# 
   568  0311                     	;# 
   569  0312                     	;# 
   570  0313                     	;# 
   571  0314                     	;# 
   572  0315                     	;# 
   573  0315                     	;# 
   574  0316                     	;# 
   575  0317                     	;# 
   576  0318                     	;# 
   577  038C                     	;# 
   578  038E                     	;# 
   579  0391                     	;# 
   580  0392                     	;# 
   581  0393                     	;# 
   582  0397                     	;# 
   583  0398                     	;# 
   584  0399                     	;# 
   585  039A                     	;# 
   586  039C                     	;# 
   587  039D                     	;# 
   588  039E                     	;# 
   589  039F                     	;# 
   590  0411                     	;# 
   591  0411                     	;# 
   592  0412                     	;# 
   593  0413                     	;# 
   594  0414                     	;# 
   595  0415                     	;# 
   596  0416                     	;# 
   597  0417                     	;# 
   598  0418                     	;# 
   599  0418                     	;# 
   600  0419                     	;# 
   601  041A                     	;# 
   602  041B                     	;# 
   603  041C                     	;# 
   604  041D                     	;# 
   605  041E                     	;# 
   606  041F                     	;# 
   607  0498                     	;# 
   608  0498                     	;# 
   609  0499                     	;# 
   610  049A                     	;# 
   611  049B                     	;# 
   612  049B                     	;# 
   613  049C                     	;# 
   614  049D                     	;# 
   615  049E                     	;# 
   616  049F                     	;# 
   617  0617                     	;# 
   618  0618                     	;# 
   619  0619                     	;# 
   620  0619                     	;# 
   621  061A                     	;# 
   622  061B                     	;# 
   623  061C                     	;# 
   624  061C                     	;# 
   625  061F                     	;# 
   626  0691                     	;# 
   627  0692                     	;# 
   628  0693                     	;# 
   629  0694                     	;# 
   630  0695                     	;# 
   631  0696                     	;# 
   632  0697                     	;# 
   633  0698                     	;# 
   634  0699                     	;# 
   635  0711                     	;# 
   636  0712                     	;# 
   637  0713                     	;# 
   638  0714                     	;# 
   639  0715                     	;# 
   640  0716                     	;# 
   641  0717                     	;# 
   642  0718                     	;# 
   643  0719                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0892                     	;# 
   651  0892                     	;# 
   652  0892                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0894                     	;# 
   660  0894                     	;# 
   661  0894                     	;# 
   662  0895                     	;# 
   663  0895                     	;# 
   664  0895                     	;# 
   665  0896                     	;# 
   666  0896                     	;# 
   667  0896                     	;# 
   668  089B                     	;# 
   669  0911                     	;# 
   670  0912                     	;# 
   671  0913                     	;# 
   672  0914                     	;# 
   673  0915                     	;# 
   674  0916                     	;# 
   675  0918                     	;# 
   676  0919                     	;# 
   677  091A                     	;# 
   678  091B                     	;# 
   679  091C                     	;# 
   680  091D                     	;# 
   681  091E                     	;# 
   682  091F                     	;# 
   683  0E0F                     	;# 
   684  0E10                     	;# 
   685  0E11                     	;# 
   686  0E12                     	;# 
   687  0E13                     	;# 
   688  0E14                     	;# 
   689  0E15                     	;# 
   690  0E16                     	;# 
   691  0E17                     	;# 
   692  0E18                     	;# 
   693  0E19                     	;# 
   694  0E1A                     	;# 
   695  0E1B                     	;# 
   696  0E1C                     	;# 
   697  0E1D                     	;# 
   698  0E1E                     	;# 
   699  0E1F                     	;# 
   700  0E20                     	;# 
   701  0E21                     	;# 
   702  0E22                     	;# 
   703  0E24                     	;# 
   704  0E25                     	;# 
   705  0E28                     	;# 
   706  0E29                     	;# 
   707  0E2A                     	;# 
   708  0E2B                     	;# 
   709  0E2C                     	;# 
   710  0E2D                     	;# 
   711  0E2E                     	;# 
   712  0E2F                     	;# 
   713  0E90                     	;# 
   714  0E91                     	;# 
   715  0E92                     	;# 
   716  0E94                     	;# 
   717  0E95                     	;# 
   718  0EA0                     	;# 
   719  0EA1                     	;# 
   720  0EA2                     	;# 
   721  0EA3                     	;# 
   722  0EA4                     	;# 
   723  0EA5                     	;# 
   724  0F0F                     	;# 
   725  0F10                     	;# 
   726  0F11                     	;# 
   727  0F12                     	;# 
   728  0F13                     	;# 
   729  0F14                     	;# 
   730  0F15                     	;# 
   731  0F16                     	;# 
   732  0F17                     	;# 
   733  0F18                     	;# 
   734  0F19                     	;# 
   735  0F1A                     	;# 
   736  0F1B                     	;# 
   737  0F1C                     	;# 
   738  0F1D                     	;# 
   739  0F1E                     	;# 
   740  0F1F                     	;# 
   741  0F20                     	;# 
   742  0F21                     	;# 
   743  0F22                     	;# 
   744  0F23                     	;# 
   745  0F24                     	;# 
   746  0F25                     	;# 
   747  0F26                     	;# 
   748  0F27                     	;# 
   749  0F28                     	;# 
   750  0F29                     	;# 
   751  0F2A                     	;# 
   752  0F2B                     	;# 
   753  0F2C                     	;# 
   754  0F2D                     	;# 
   755  0F2E                     	;# 
   756  0F2F                     	;# 
   757  0F30                     	;# 
   758  0F31                     	;# 
   759  0F32                     	;# 
   760  0F33                     	;# 
   761  0F34                     	;# 
   762  0F35                     	;# 
   763  0F36                     	;# 
   764  0F37                     	;# 
   765  0FE4                     	;# 
   766  0FE5                     	;# 
   767  0FE6                     	;# 
   768  0FE7                     	;# 
   769  0FE8                     	;# 
   770  0FE9                     	;# 
   771  0FEA                     	;# 
   772  0FEB                     	;# 
   773  0FED                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000E                     	;# 
   790  0010                     	;# 
   791  0011                     	;# 
   792  0012                     	;# 
   793  0013                     	;# 
   794  0014                     	;# 
   795  0015                     	;# 
   796  0015                     	;# 
   797  0016                     	;# 
   798  0016                     	;# 
   799  0017                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  0019                     	;# 
   803  001A                     	;# 
   804  001B                     	;# 
   805  001C                     	;# 
   806  001D                     	;# 
   807  001E                     	;# 
   808  001F                     	;# 
   809  008C                     	;# 
   810  008E                     	;# 
   811  0090                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0094                     	;# 
   816  0097                     	;# 
   817  009B                     	;# 
   818  009B                     	;# 
   819  009C                     	;# 
   820  009D                     	;# 
   821  009E                     	;# 
   822  009F                     	;# 
   823  010C                     	;# 
   824  010E                     	;# 
   825  0111                     	;# 
   826  0112                     	;# 
   827  0113                     	;# 
   828  0114                     	;# 
   829  0115                     	;# 
   830  0116                     	;# 
   831  0117                     	;# 
   832  0118                     	;# 
   833  0119                     	;# 
   834  018C                     	;# 
   835  018E                     	;# 
   836  0197                     	;# 
   837  0199                     	;# 
   838  0199                     	;# 
   839  0199                     	;# 
   840  019A                     	;# 
   841  019A                     	;# 
   842  019A                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019C                     	;# 
   849  019C                     	;# 
   850  019C                     	;# 
   851  019D                     	;# 
   852  019D                     	;# 
   853  019D                     	;# 
   854  019E                     	;# 
   855  019E                     	;# 
   856  019E                     	;# 
   857  019F                     	;# 
   858  019F                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  020C                     	;# 
   863  020E                     	;# 
   864  0211                     	;# 
   865  0211                     	;# 
   866  0212                     	;# 
   867  0212                     	;# 
   868  0213                     	;# 
   869  0213                     	;# 
   870  0214                     	;# 
   871  0214                     	;# 
   872  0215                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0216                     	;# 
   877  0216                     	;# 
   878  0217                     	;# 
   879  0217                     	;# 
   880  0219                     	;# 
   881  021A                     	;# 
   882  021B                     	;# 
   883  021C                     	;# 
   884  021D                     	;# 
   885  021D                     	;# 
   886  021E                     	;# 
   887  021F                     	;# 
   888  028C                     	;# 
   889  028E                     	;# 
   890  0291                     	;# 
   891  0291                     	;# 
   892  0292                     	;# 
   893  0293                     	;# 
   894  0294                     	;# 
   895  0295                     	;# 
   896  0295                     	;# 
   897  0296                     	;# 
   898  0297                     	;# 
   899  0298                     	;# 
   900  029F                     	;# 
   901  030C                     	;# 
   902  030E                     	;# 
   903  0311                     	;# 
   904  0311                     	;# 
   905  0312                     	;# 
   906  0313                     	;# 
   907  0314                     	;# 
   908  0315                     	;# 
   909  0315                     	;# 
   910  0316                     	;# 
   911  0317                     	;# 
   912  0318                     	;# 
   913  038C                     	;# 
   914  038E                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  0397                     	;# 
   919  0398                     	;# 
   920  0399                     	;# 
   921  039A                     	;# 
   922  039C                     	;# 
   923  039D                     	;# 
   924  039E                     	;# 
   925  039F                     	;# 
   926  0411                     	;# 
   927  0411                     	;# 
   928  0412                     	;# 
   929  0413                     	;# 
   930  0414                     	;# 
   931  0415                     	;# 
   932  0416                     	;# 
   933  0417                     	;# 
   934  0418                     	;# 
   935  0418                     	;# 
   936  0419                     	;# 
   937  041A                     	;# 
   938  041B                     	;# 
   939  041C                     	;# 
   940  041D                     	;# 
   941  041E                     	;# 
   942  041F                     	;# 
   943  0498                     	;# 
   944  0498                     	;# 
   945  0499                     	;# 
   946  049A                     	;# 
   947  049B                     	;# 
   948  049B                     	;# 
   949  049C                     	;# 
   950  049D                     	;# 
   951  049E                     	;# 
   952  049F                     	;# 
   953  0617                     	;# 
   954  0618                     	;# 
   955  0619                     	;# 
   956  0619                     	;# 
   957  061A                     	;# 
   958  061B                     	;# 
   959  061C                     	;# 
   960  061C                     	;# 
   961  061F                     	;# 
   962  0691                     	;# 
   963  0692                     	;# 
   964  0693                     	;# 
   965  0694                     	;# 
   966  0695                     	;# 
   967  0696                     	;# 
   968  0697                     	;# 
   969  0698                     	;# 
   970  0699                     	;# 
   971  0711                     	;# 
   972  0712                     	;# 
   973  0713                     	;# 
   974  0714                     	;# 
   975  0715                     	;# 
   976  0716                     	;# 
   977  0717                     	;# 
   978  0718                     	;# 
   979  0719                     	;# 
   980  0891                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0892                     	;# 
   987  0892                     	;# 
   988  0892                     	;# 
   989  0893                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0894                     	;# 
   996  0894                     	;# 
   997  0894                     	;# 
   998  0895                     	;# 
   999  0895                     	;# 
  1000  0895                     	;# 
  1001  0896                     	;# 
  1002  0896                     	;# 
  1003  0896                     	;# 
  1004  089B                     	;# 
  1005  0911                     	;# 
  1006  0912                     	;# 
  1007  0913                     	;# 
  1008  0914                     	;# 
  1009  0915                     	;# 
  1010  0916                     	;# 
  1011  0918                     	;# 
  1012  0919                     	;# 
  1013  091A                     	;# 
  1014  091B                     	;# 
  1015  091C                     	;# 
  1016  091D                     	;# 
  1017  091E                     	;# 
  1018  091F                     	;# 
  1019  0E0F                     	;# 
  1020  0E10                     	;# 
  1021  0E11                     	;# 
  1022  0E12                     	;# 
  1023  0E13                     	;# 
  1024  0E14                     	;# 
  1025  0E15                     	;# 
  1026  0E16                     	;# 
  1027  0E17                     	;# 
  1028  0E18                     	;# 
  1029  0E19                     	;# 
  1030  0E1A                     	;# 
  1031  0E1B                     	;# 
  1032  0E1C                     	;# 
  1033  0E1D                     	;# 
  1034  0E1E                     	;# 
  1035  0E1F                     	;# 
  1036  0E20                     	;# 
  1037  0E21                     	;# 
  1038  0E22                     	;# 
  1039  0E24                     	;# 
  1040  0E25                     	;# 
  1041  0E28                     	;# 
  1042  0E29                     	;# 
  1043  0E2A                     	;# 
  1044  0E2B                     	;# 
  1045  0E2C                     	;# 
  1046  0E2D                     	;# 
  1047  0E2E                     	;# 
  1048  0E2F                     	;# 
  1049  0E90                     	;# 
  1050  0E91                     	;# 
  1051  0E92                     	;# 
  1052  0E94                     	;# 
  1053  0E95                     	;# 
  1054  0EA0                     	;# 
  1055  0EA1                     	;# 
  1056  0EA2                     	;# 
  1057  0EA3                     	;# 
  1058  0EA4                     	;# 
  1059  0EA5                     	;# 
  1060  0F0F                     	;# 
  1061  0F10                     	;# 
  1062  0F11                     	;# 
  1063  0F12                     	;# 
  1064  0F13                     	;# 
  1065  0F14                     	;# 
  1066  0F15                     	;# 
  1067  0F16                     	;# 
  1068  0F17                     	;# 
  1069  0F18                     	;# 
  1070  0F19                     	;# 
  1071  0F1A                     	;# 
  1072  0F1B                     	;# 
  1073  0F1C                     	;# 
  1074  0F1D                     	;# 
  1075  0F1E                     	;# 
  1076  0F1F                     	;# 
  1077  0F20                     	;# 
  1078  0F21                     	;# 
  1079  0F22                     	;# 
  1080  0F23                     	;# 
  1081  0F24                     	;# 
  1082  0F25                     	;# 
  1083  0F26                     	;# 
  1084  0F27                     	;# 
  1085  0F28                     	;# 
  1086  0F29                     	;# 
  1087  0F2A                     	;# 
  1088  0F2B                     	;# 
  1089  0F2C                     	;# 
  1090  0F2D                     	;# 
  1091  0F2E                     	;# 
  1092  0F2F                     	;# 
  1093  0F30                     	;# 
  1094  0F31                     	;# 
  1095  0F32                     	;# 
  1096  0F33                     	;# 
  1097  0F34                     	;# 
  1098  0F35                     	;# 
  1099  0F36                     	;# 
  1100  0F37                     	;# 
  1101  0FE4                     	;# 
  1102  0FE5                     	;# 
  1103  0FE6                     	;# 
  1104  0FE7                     	;# 
  1105  0FE8                     	;# 
  1106  0FE9                     	;# 
  1107  0FEA                     	;# 
  1108  0FEB                     	;# 
  1109  0FED                     	;# 
  1110  0FEE                     	;# 
  1111  0FEF                     	;# 
  1112  0000                     	;# 
  1113  0001                     	;# 
  1114  0002                     	;# 
  1115  0003                     	;# 
  1116  0004                     	;# 
  1117  0005                     	;# 
  1118  0006                     	;# 
  1119  0007                     	;# 
  1120  0008                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000E                     	;# 
  1126  0010                     	;# 
  1127  0011                     	;# 
  1128  0012                     	;# 
  1129  0013                     	;# 
  1130  0014                     	;# 
  1131  0015                     	;# 
  1132  0015                     	;# 
  1133  0016                     	;# 
  1134  0016                     	;# 
  1135  0017                     	;# 
  1136  0018                     	;# 
  1137  0019                     	;# 
  1138  0019                     	;# 
  1139  001A                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  001D                     	;# 
  1143  001E                     	;# 
  1144  001F                     	;# 
  1145  008C                     	;# 
  1146  008E                     	;# 
  1147  0090                     	;# 
  1148  0091                     	;# 
  1149  0092                     	;# 
  1150  0093                     	;# 
  1151  0094                     	;# 
  1152  0097                     	;# 
  1153  009B                     	;# 
  1154  009B                     	;# 
  1155  009C                     	;# 
  1156  009D                     	;# 
  1157  009E                     	;# 
  1158  009F                     	;# 
  1159  010C                     	;# 
  1160  010E                     	;# 
  1161  0111                     	;# 
  1162  0112                     	;# 
  1163  0113                     	;# 
  1164  0114                     	;# 
  1165  0115                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  0118                     	;# 
  1169  0119                     	;# 
  1170  018C                     	;# 
  1171  018E                     	;# 
  1172  0197                     	;# 
  1173  0199                     	;# 
  1174  0199                     	;# 
  1175  0199                     	;# 
  1176  019A                     	;# 
  1177  019A                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019D                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019E                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020E                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0216                     	;# 
  1213  0216                     	;# 
  1214  0217                     	;# 
  1215  0217                     	;# 
  1216  0219                     	;# 
  1217  021A                     	;# 
  1218  021B                     	;# 
  1219  021C                     	;# 
  1220  021D                     	;# 
  1221  021D                     	;# 
  1222  021E                     	;# 
  1223  021F                     	;# 
  1224  028C                     	;# 
  1225  028E                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0294                     	;# 
  1231  0295                     	;# 
  1232  0295                     	;# 
  1233  0296                     	;# 
  1234  0297                     	;# 
  1235  0298                     	;# 
  1236  029F                     	;# 
  1237  030C                     	;# 
  1238  030E                     	;# 
  1239  0311                     	;# 
  1240  0311                     	;# 
  1241  0312                     	;# 
  1242  0313                     	;# 
  1243  0314                     	;# 
  1244  0315                     	;# 
  1245  0315                     	;# 
  1246  0316                     	;# 
  1247  0317                     	;# 
  1248  0318                     	;# 
  1249  038C                     	;# 
  1250  038E                     	;# 
  1251  0391                     	;# 
  1252  0392                     	;# 
  1253  0393                     	;# 
  1254  0397                     	;# 
  1255  0398                     	;# 
  1256  0399                     	;# 
  1257  039A                     	;# 
  1258  039C                     	;# 
  1259  039D                     	;# 
  1260  039E                     	;# 
  1261  039F                     	;# 
  1262  0411                     	;# 
  1263  0411                     	;# 
  1264  0412                     	;# 
  1265  0413                     	;# 
  1266  0414                     	;# 
  1267  0415                     	;# 
  1268  0416                     	;# 
  1269  0417                     	;# 
  1270  0418                     	;# 
  1271  0418                     	;# 
  1272  0419                     	;# 
  1273  041A                     	;# 
  1274  041B                     	;# 
  1275  041C                     	;# 
  1276  041D                     	;# 
  1277  041E                     	;# 
  1278  041F                     	;# 
  1279  0498                     	;# 
  1280  0498                     	;# 
  1281  0499                     	;# 
  1282  049A                     	;# 
  1283  049B                     	;# 
  1284  049B                     	;# 
  1285  049C                     	;# 
  1286  049D                     	;# 
  1287  049E                     	;# 
  1288  049F                     	;# 
  1289  0617                     	;# 
  1290  0618                     	;# 
  1291  0619                     	;# 
  1292  0619                     	;# 
  1293  061A                     	;# 
  1294  061B                     	;# 
  1295  061C                     	;# 
  1296  061C                     	;# 
  1297  061F                     	;# 
  1298  0691                     	;# 
  1299  0692                     	;# 
  1300  0693                     	;# 
  1301  0694                     	;# 
  1302  0695                     	;# 
  1303  0696                     	;# 
  1304  0697                     	;# 
  1305  0698                     	;# 
  1306  0699                     	;# 
  1307  0711                     	;# 
  1308  0712                     	;# 
  1309  0713                     	;# 
  1310  0714                     	;# 
  1311  0715                     	;# 
  1312  0716                     	;# 
  1313  0717                     	;# 
  1314  0718                     	;# 
  1315  0719                     	;# 
  1316  0891                     	;# 
  1317  0891                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0892                     	;# 
  1323  0892                     	;# 
  1324  0892                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0894                     	;# 
  1332  0894                     	;# 
  1333  0894                     	;# 
  1334  0895                     	;# 
  1335  0895                     	;# 
  1336  0895                     	;# 
  1337  0896                     	;# 
  1338  0896                     	;# 
  1339  0896                     	;# 
  1340  089B                     	;# 
  1341  0911                     	;# 
  1342  0912                     	;# 
  1343  0913                     	;# 
  1344  0914                     	;# 
  1345  0915                     	;# 
  1346  0916                     	;# 
  1347  0918                     	;# 
  1348  0919                     	;# 
  1349  091A                     	;# 
  1350  091B                     	;# 
  1351  091C                     	;# 
  1352  091D                     	;# 
  1353  091E                     	;# 
  1354  091F                     	;# 
  1355  0E0F                     	;# 
  1356  0E10                     	;# 
  1357  0E11                     	;# 
  1358  0E12                     	;# 
  1359  0E13                     	;# 
  1360  0E14                     	;# 
  1361  0E15                     	;# 
  1362  0E16                     	;# 
  1363  0E17                     	;# 
  1364  0E18                     	;# 
  1365  0E19                     	;# 
  1366  0E1A                     	;# 
  1367  0E1B                     	;# 
  1368  0E1C                     	;# 
  1369  0E1D                     	;# 
  1370  0E1E                     	;# 
  1371  0E1F                     	;# 
  1372  0E20                     	;# 
  1373  0E21                     	;# 
  1374  0E22                     	;# 
  1375  0E24                     	;# 
  1376  0E25                     	;# 
  1377  0E28                     	;# 
  1378  0E29                     	;# 
  1379  0E2A                     	;# 
  1380  0E2B                     	;# 
  1381  0E2C                     	;# 
  1382  0E2D                     	;# 
  1383  0E2E                     	;# 
  1384  0E2F                     	;# 
  1385  0E90                     	;# 
  1386  0E91                     	;# 
  1387  0E92                     	;# 
  1388  0E94                     	;# 
  1389  0E95                     	;# 
  1390  0EA0                     	;# 
  1391  0EA1                     	;# 
  1392  0EA2                     	;# 
  1393  0EA3                     	;# 
  1394  0EA4                     	;# 
  1395  0EA5                     	;# 
  1396  0F0F                     	;# 
  1397  0F10                     	;# 
  1398  0F11                     	;# 
  1399  0F12                     	;# 
  1400  0F13                     	;# 
  1401  0F14                     	;# 
  1402  0F15                     	;# 
  1403  0F16                     	;# 
  1404  0F17                     	;# 
  1405  0F18                     	;# 
  1406  0F19                     	;# 
  1407  0F1A                     	;# 
  1408  0F1B                     	;# 
  1409  0F1C                     	;# 
  1410  0F1D                     	;# 
  1411  0F1E                     	;# 
  1412  0F1F                     	;# 
  1413  0F20                     	;# 
  1414  0F21                     	;# 
  1415  0F22                     	;# 
  1416  0F23                     	;# 
  1417  0F24                     	;# 
  1418  0F25                     	;# 
  1419  0F26                     	;# 
  1420  0F27                     	;# 
  1421  0F28                     	;# 
  1422  0F29                     	;# 
  1423  0F2A                     	;# 
  1424  0F2B                     	;# 
  1425  0F2C                     	;# 
  1426  0F2D                     	;# 
  1427  0F2E                     	;# 
  1428  0F2F                     	;# 
  1429  0F30                     	;# 
  1430  0F31                     	;# 
  1431  0F32                     	;# 
  1432  0F33                     	;# 
  1433  0F34                     	;# 
  1434  0F35                     	;# 
  1435  0F36                     	;# 
  1436  0F37                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000E                     	;# 
  1462  0010                     	;# 
  1463  0011                     	;# 
  1464  0012                     	;# 
  1465  0013                     	;# 
  1466  0014                     	;# 
  1467  0015                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  001D                     	;# 
  1479  001E                     	;# 
  1480  001F                     	;# 
  1481  008C                     	;# 
  1482  008E                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0097                     	;# 
  1489  009B                     	;# 
  1490  009B                     	;# 
  1491  009C                     	;# 
  1492  009D                     	;# 
  1493  009E                     	;# 
  1494  009F                     	;# 
  1495  010C                     	;# 
  1496  010E                     	;# 
  1497  0111                     	;# 
  1498  0112                     	;# 
  1499  0113                     	;# 
  1500  0114                     	;# 
  1501  0115                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  0118                     	;# 
  1505  0119                     	;# 
  1506  018C                     	;# 
  1507  018E                     	;# 
  1508  0197                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  020C                     	;# 
  1535  020E                     	;# 
  1536  0211                     	;# 
  1537  0211                     	;# 
  1538  0212                     	;# 
  1539  0212                     	;# 
  1540  0213                     	;# 
  1541  0213                     	;# 
  1542  0214                     	;# 
  1543  0214                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0216                     	;# 
  1549  0216                     	;# 
  1550  0217                     	;# 
  1551  0217                     	;# 
  1552  0219                     	;# 
  1553  021A                     	;# 
  1554  021B                     	;# 
  1555  021C                     	;# 
  1556  021D                     	;# 
  1557  021D                     	;# 
  1558  021E                     	;# 
  1559  021F                     	;# 
  1560  028C                     	;# 
  1561  028E                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0294                     	;# 
  1567  0295                     	;# 
  1568  0295                     	;# 
  1569  0296                     	;# 
  1570  0297                     	;# 
  1571  0298                     	;# 
  1572  029F                     	;# 
  1573  030C                     	;# 
  1574  030E                     	;# 
  1575  0311                     	;# 
  1576  0311                     	;# 
  1577  0312                     	;# 
  1578  0313                     	;# 
  1579  0314                     	;# 
  1580  0315                     	;# 
  1581  0315                     	;# 
  1582  0316                     	;# 
  1583  0317                     	;# 
  1584  0318                     	;# 
  1585  038C                     	;# 
  1586  038E                     	;# 
  1587  0391                     	;# 
  1588  0392                     	;# 
  1589  0393                     	;# 
  1590  0397                     	;# 
  1591  0398                     	;# 
  1592  0399                     	;# 
  1593  039A                     	;# 
  1594  039C                     	;# 
  1595  039D                     	;# 
  1596  039E                     	;# 
  1597  039F                     	;# 
  1598  0411                     	;# 
  1599  0411                     	;# 
  1600  0412                     	;# 
  1601  0413                     	;# 
  1602  0414                     	;# 
  1603  0415                     	;# 
  1604  0416                     	;# 
  1605  0417                     	;# 
  1606  0418                     	;# 
  1607  0418                     	;# 
  1608  0419                     	;# 
  1609  041A                     	;# 
  1610  041B                     	;# 
  1611  041C                     	;# 
  1612  041D                     	;# 
  1613  041E                     	;# 
  1614  041F                     	;# 
  1615  0498                     	;# 
  1616  0498                     	;# 
  1617  0499                     	;# 
  1618  049A                     	;# 
  1619  049B                     	;# 
  1620  049B                     	;# 
  1621  049C                     	;# 
  1622  049D                     	;# 
  1623  049E                     	;# 
  1624  049F                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  061F                     	;# 
  1634  0691                     	;# 
  1635  0692                     	;# 
  1636  0693                     	;# 
  1637  0694                     	;# 
  1638  0695                     	;# 
  1639  0696                     	;# 
  1640  0697                     	;# 
  1641  0698                     	;# 
  1642  0699                     	;# 
  1643  0711                     	;# 
  1644  0712                     	;# 
  1645  0713                     	;# 
  1646  0714                     	;# 
  1647  0715                     	;# 
  1648  0716                     	;# 
  1649  0717                     	;# 
  1650  0718                     	;# 
  1651  0719                     	;# 
  1652  0891                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0892                     	;# 
  1659  0892                     	;# 
  1660  0892                     	;# 
  1661  0893                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0894                     	;# 
  1668  0894                     	;# 
  1669  0894                     	;# 
  1670  0895                     	;# 
  1671  0895                     	;# 
  1672  0895                     	;# 
  1673  0896                     	;# 
  1674  0896                     	;# 
  1675  0896                     	;# 
  1676  089B                     	;# 
  1677  0911                     	;# 
  1678  0912                     	;# 
  1679  0913                     	;# 
  1680  0914                     	;# 
  1681  0915                     	;# 
  1682  0916                     	;# 
  1683  0918                     	;# 
  1684  0919                     	;# 
  1685  091A                     	;# 
  1686  091B                     	;# 
  1687  091C                     	;# 
  1688  091D                     	;# 
  1689  091E                     	;# 
  1690  091F                     	;# 
  1691  0E0F                     	;# 
  1692  0E10                     	;# 
  1693  0E11                     	;# 
  1694  0E12                     	;# 
  1695  0E13                     	;# 
  1696  0E14                     	;# 
  1697  0E15                     	;# 
  1698  0E16                     	;# 
  1699  0E17                     	;# 
  1700  0E18                     	;# 
  1701  0E19                     	;# 
  1702  0E1A                     	;# 
  1703  0E1B                     	;# 
  1704  0E1C                     	;# 
  1705  0E1D                     	;# 
  1706  0E1E                     	;# 
  1707  0E1F                     	;# 
  1708  0E20                     	;# 
  1709  0E21                     	;# 
  1710  0E22                     	;# 
  1711  0E24                     	;# 
  1712  0E25                     	;# 
  1713  0E28                     	;# 
  1714  0E29                     	;# 
  1715  0E2A                     	;# 
  1716  0E2B                     	;# 
  1717  0E2C                     	;# 
  1718  0E2D                     	;# 
  1719  0E2E                     	;# 
  1720  0E2F                     	;# 
  1721  0E90                     	;# 
  1722  0E91                     	;# 
  1723  0E92                     	;# 
  1724  0E94                     	;# 
  1725  0E95                     	;# 
  1726  0EA0                     	;# 
  1727  0EA1                     	;# 
  1728  0EA2                     	;# 
  1729  0EA3                     	;# 
  1730  0EA4                     	;# 
  1731  0EA5                     	;# 
  1732  0F0F                     	;# 
  1733  0F10                     	;# 
  1734  0F11                     	;# 
  1735  0F12                     	;# 
  1736  0F13                     	;# 
  1737  0F14                     	;# 
  1738  0F15                     	;# 
  1739  0F16                     	;# 
  1740  0F17                     	;# 
  1741  0F18                     	;# 
  1742  0F19                     	;# 
  1743  0F1A                     	;# 
  1744  0F1B                     	;# 
  1745  0F1C                     	;# 
  1746  0F1D                     	;# 
  1747  0F1E                     	;# 
  1748  0F1F                     	;# 
  1749  0F20                     	;# 
  1750  0F21                     	;# 
  1751  0F22                     	;# 
  1752  0F23                     	;# 
  1753  0F24                     	;# 
  1754  0F25                     	;# 
  1755  0F26                     	;# 
  1756  0F27                     	;# 
  1757  0F28                     	;# 
  1758  0F29                     	;# 
  1759  0F2A                     	;# 
  1760  0F2B                     	;# 
  1761  0F2C                     	;# 
  1762  0F2D                     	;# 
  1763  0F2E                     	;# 
  1764  0F2F                     	;# 
  1765  0F30                     	;# 
  1766  0F31                     	;# 
  1767  0F32                     	;# 
  1768  0F33                     	;# 
  1769  0F34                     	;# 
  1770  0F35                     	;# 
  1771  0F36                     	;# 
  1772  0F37                     	;# 
  1773  0FE4                     	;# 
  1774  0FE5                     	;# 
  1775  0FE6                     	;# 
  1776  0FE7                     	;# 
  1777  0FE8                     	;# 
  1778  0FE9                     	;# 
  1779  0FEA                     	;# 
  1780  0FEB                     	;# 
  1781  0FED                     	;# 
  1782  0FEE                     	;# 
  1783  0FEF                     	;# 
  1784  0000                     	;# 
  1785  0001                     	;# 
  1786  0002                     	;# 
  1787  0003                     	;# 
  1788  0004                     	;# 
  1789  0005                     	;# 
  1790  0006                     	;# 
  1791  0007                     	;# 
  1792  0008                     	;# 
  1793  0009                     	;# 
  1794  000A                     	;# 
  1795  000B                     	;# 
  1796  000C                     	;# 
  1797  000E                     	;# 
  1798  0010                     	;# 
  1799  0011                     	;# 
  1800  0012                     	;# 
  1801  0013                     	;# 
  1802  0014                     	;# 
  1803  0015                     	;# 
  1804  0015                     	;# 
  1805  0016                     	;# 
  1806  0016                     	;# 
  1807  0017                     	;# 
  1808  0018                     	;# 
  1809  0019                     	;# 
  1810  0019                     	;# 
  1811  001A                     	;# 
  1812  001B                     	;# 
  1813  001C                     	;# 
  1814  001D                     	;# 
  1815  001E                     	;# 
  1816  001F                     	;# 
  1817  008C                     	;# 
  1818  008E                     	;# 
  1819  0090                     	;# 
  1820  0091                     	;# 
  1821  0092                     	;# 
  1822  0093                     	;# 
  1823  0094                     	;# 
  1824  0097                     	;# 
  1825  009B                     	;# 
  1826  009B                     	;# 
  1827  009C                     	;# 
  1828  009D                     	;# 
  1829  009E                     	;# 
  1830  009F                     	;# 
  1831  010C                     	;# 
  1832  010E                     	;# 
  1833  0111                     	;# 
  1834  0112                     	;# 
  1835  0113                     	;# 
  1836  0114                     	;# 
  1837  0115                     	;# 
  1838  0116                     	;# 
  1839  0117                     	;# 
  1840  0118                     	;# 
  1841  0119                     	;# 
  1842  018C                     	;# 
  1843  018E                     	;# 
  1844  0197                     	;# 
  1845  0199                     	;# 
  1846  0199                     	;# 
  1847  0199                     	;# 
  1848  019A                     	;# 
  1849  019A                     	;# 
  1850  019A                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019C                     	;# 
  1857  019C                     	;# 
  1858  019C                     	;# 
  1859  019D                     	;# 
  1860  019D                     	;# 
  1861  019D                     	;# 
  1862  019E                     	;# 
  1863  019E                     	;# 
  1864  019E                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  020C                     	;# 
  1871  020E                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0219                     	;# 
  1889  021A                     	;# 
  1890  021B                     	;# 
  1891  021C                     	;# 
  1892  021D                     	;# 
  1893  021D                     	;# 
  1894  021E                     	;# 
  1895  021F                     	;# 
  1896  028C                     	;# 
  1897  028E                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0294                     	;# 
  1903  0295                     	;# 
  1904  0295                     	;# 
  1905  0296                     	;# 
  1906  0297                     	;# 
  1907  0298                     	;# 
  1908  029F                     	;# 
  1909  030C                     	;# 
  1910  030E                     	;# 
  1911  0311                     	;# 
  1912  0311                     	;# 
  1913  0312                     	;# 
  1914  0313                     	;# 
  1915  0314                     	;# 
  1916  0315                     	;# 
  1917  0315                     	;# 
  1918  0316                     	;# 
  1919  0317                     	;# 
  1920  0318                     	;# 
  1921  038C                     	;# 
  1922  038E                     	;# 
  1923  0391                     	;# 
  1924  0392                     	;# 
  1925  0393                     	;# 
  1926  0397                     	;# 
  1927  0398                     	;# 
  1928  0399                     	;# 
  1929  039A                     	;# 
  1930  039C                     	;# 
  1931  039D                     	;# 
  1932  039E                     	;# 
  1933  039F                     	;# 
  1934  0411                     	;# 
  1935  0411                     	;# 
  1936  0412                     	;# 
  1937  0413                     	;# 
  1938  0414                     	;# 
  1939  0415                     	;# 
  1940  0416                     	;# 
  1941  0417                     	;# 
  1942  0418                     	;# 
  1943  0418                     	;# 
  1944  0419                     	;# 
  1945  041A                     	;# 
  1946  041B                     	;# 
  1947  041C                     	;# 
  1948  041D                     	;# 
  1949  041E                     	;# 
  1950  041F                     	;# 
  1951  0498                     	;# 
  1952  0498                     	;# 
  1953  0499                     	;# 
  1954  049A                     	;# 
  1955  049B                     	;# 
  1956  049B                     	;# 
  1957  049C                     	;# 
  1958  049D                     	;# 
  1959  049E                     	;# 
  1960  049F                     	;# 
  1961  0617                     	;# 
  1962  0618                     	;# 
  1963  0619                     	;# 
  1964  0619                     	;# 
  1965  061A                     	;# 
  1966  061B                     	;# 
  1967  061C                     	;# 
  1968  061C                     	;# 
  1969  061F                     	;# 
  1970  0691                     	;# 
  1971  0692                     	;# 
  1972  0693                     	;# 
  1973  0694                     	;# 
  1974  0695                     	;# 
  1975  0696                     	;# 
  1976  0697                     	;# 
  1977  0698                     	;# 
  1978  0699                     	;# 
  1979  0711                     	;# 
  1980  0712                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0715                     	;# 
  1984  0716                     	;# 
  1985  0717                     	;# 
  1986  0718                     	;# 
  1987  0719                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0892                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0894                     	;# 
  2004  0894                     	;# 
  2005  0894                     	;# 
  2006  0895                     	;# 
  2007  0895                     	;# 
  2008  0895                     	;# 
  2009  0896                     	;# 
  2010  0896                     	;# 
  2011  0896                     	;# 
  2012  089B                     	;# 
  2013  0911                     	;# 
  2014  0912                     	;# 
  2015  0913                     	;# 
  2016  0914                     	;# 
  2017  0915                     	;# 
  2018  0916                     	;# 
  2019  0918                     	;# 
  2020  0919                     	;# 
  2021  091A                     	;# 
  2022  091B                     	;# 
  2023  091C                     	;# 
  2024  091D                     	;# 
  2025  091E                     	;# 
  2026  091F                     	;# 
  2027  0E0F                     	;# 
  2028  0E10                     	;# 
  2029  0E11                     	;# 
  2030  0E12                     	;# 
  2031  0E13                     	;# 
  2032  0E14                     	;# 
  2033  0E15                     	;# 
  2034  0E16                     	;# 
  2035  0E17                     	;# 
  2036  0E18                     	;# 
  2037  0E19                     	;# 
  2038  0E1A                     	;# 
  2039  0E1B                     	;# 
  2040  0E1C                     	;# 
  2041  0E1D                     	;# 
  2042  0E1E                     	;# 
  2043  0E1F                     	;# 
  2044  0E20                     	;# 
  2045  0E21                     	;# 
  2046  0E22                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E94                     	;# 
  2061  0E95                     	;# 
  2062  0EA0                     	;# 
  2063  0EA1                     	;# 
  2064  0EA2                     	;# 
  2065  0EA3                     	;# 
  2066  0EA4                     	;# 
  2067  0EA5                     	;# 
  2068  0F0F                     	;# 
  2069  0F10                     	;# 
  2070  0F11                     	;# 
  2071  0F12                     	;# 
  2072  0F13                     	;# 
  2073  0F14                     	;# 
  2074  0F15                     	;# 
  2075  0F16                     	;# 
  2076  0F17                     	;# 
  2077  0F18                     	;# 
  2078  0F19                     	;# 
  2079  0F1A                     	;# 
  2080  0F1B                     	;# 
  2081  0F1C                     	;# 
  2082  0F1D                     	;# 
  2083  0F1E                     	;# 
  2084  0F1F                     	;# 
  2085  0F20                     	;# 
  2086  0F21                     	;# 
  2087  0F22                     	;# 
  2088  0F23                     	;# 
  2089  0F24                     	;# 
  2090  0F25                     	;# 
  2091  0F26                     	;# 
  2092  0F27                     	;# 
  2093  0F28                     	;# 
  2094  0F29                     	;# 
  2095  0F2A                     	;# 
  2096  0F2B                     	;# 
  2097  0F2C                     	;# 
  2098  0F2D                     	;# 
  2099  0F2E                     	;# 
  2100  0F2F                     	;# 
  2101  0F30                     	;# 
  2102  0F31                     	;# 
  2103  0F32                     	;# 
  2104  0F33                     	;# 
  2105  0F34                     	;# 
  2106  0F35                     	;# 
  2107  0F36                     	;# 
  2108  0F37                     	;# 
  2109  0FE4                     	;# 
  2110  0FE5                     	;# 
  2111  0FE6                     	;# 
  2112  0FE7                     	;# 
  2113  0FE8                     	;# 
  2114  0FE9                     	;# 
  2115  0FEA                     	;# 
  2116  0FEB                     	;# 
  2117  0FED                     	;# 
  2118  0FEE                     	;# 
  2119  0FEF                     	;# 
  2120  0000                     	;# 
  2121  0001                     	;# 
  2122  0002                     	;# 
  2123  0003                     	;# 
  2124  0004                     	;# 
  2125  0005                     	;# 
  2126  0006                     	;# 
  2127  0007                     	;# 
  2128  0008                     	;# 
  2129  0009                     	;# 
  2130  000A                     	;# 
  2131  000B                     	;# 
  2132  000C                     	;# 
  2133  000E                     	;# 
  2134  0010                     	;# 
  2135  0011                     	;# 
  2136  0012                     	;# 
  2137  0013                     	;# 
  2138  0014                     	;# 
  2139  0015                     	;# 
  2140  0015                     	;# 
  2141  0016                     	;# 
  2142  0016                     	;# 
  2143  0017                     	;# 
  2144  0018                     	;# 
  2145  0019                     	;# 
  2146  0019                     	;# 
  2147  001A                     	;# 
  2148  001B                     	;# 
  2149  001C                     	;# 
  2150  001D                     	;# 
  2151  001E                     	;# 
  2152  001F                     	;# 
  2153  008C                     	;# 
  2154  008E                     	;# 
  2155  0090                     	;# 
  2156  0091                     	;# 
  2157  0092                     	;# 
  2158  0093                     	;# 
  2159  0094                     	;# 
  2160  0097                     	;# 
  2161  009B                     	;# 
  2162  009B                     	;# 
  2163  009C                     	;# 
  2164  009D                     	;# 
  2165  009E                     	;# 
  2166  009F                     	;# 
  2167  010C                     	;# 
  2168  010E                     	;# 
  2169  0111                     	;# 
  2170  0112                     	;# 
  2171  0113                     	;# 
  2172  0114                     	;# 
  2173  0115                     	;# 
  2174  0116                     	;# 
  2175  0117                     	;# 
  2176  0118                     	;# 
  2177  0119                     	;# 
  2178  018C                     	;# 
  2179  018E                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  020C                     	;# 
  2207  020E                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0216                     	;# 
  2221  0216                     	;# 
  2222  0217                     	;# 
  2223  0217                     	;# 
  2224  0219                     	;# 
  2225  021A                     	;# 
  2226  021B                     	;# 
  2227  021C                     	;# 
  2228  021D                     	;# 
  2229  021D                     	;# 
  2230  021E                     	;# 
  2231  021F                     	;# 
  2232  028C                     	;# 
  2233  028E                     	;# 
  2234  0291                     	;# 
  2235  0291                     	;# 
  2236  0292                     	;# 
  2237  0293                     	;# 
  2238  0294                     	;# 
  2239  0295                     	;# 
  2240  0295                     	;# 
  2241  0296                     	;# 
  2242  0297                     	;# 
  2243  0298                     	;# 
  2244  029F                     	;# 
  2245  030C                     	;# 
  2246  030E                     	;# 
  2247  0311                     	;# 
  2248  0311                     	;# 
  2249  0312                     	;# 
  2250  0313                     	;# 
  2251  0314                     	;# 
  2252  0315                     	;# 
  2253  0315                     	;# 
  2254  0316                     	;# 
  2255  0317                     	;# 
  2256  0318                     	;# 
  2257  038C                     	;# 
  2258  038E                     	;# 
  2259  0391                     	;# 
  2260  0392                     	;# 
  2261  0393                     	;# 
  2262  0397                     	;# 
  2263  0398                     	;# 
  2264  0399                     	;# 
  2265  039A                     	;# 
  2266  039C                     	;# 
  2267  039D                     	;# 
  2268  039E                     	;# 
  2269  039F                     	;# 
  2270  0411                     	;# 
  2271  0411                     	;# 
  2272  0412                     	;# 
  2273  0413                     	;# 
  2274  0414                     	;# 
  2275  0415                     	;# 
  2276  0416                     	;# 
  2277  0417                     	;# 
  2278  0418                     	;# 
  2279  0418                     	;# 
  2280  0419                     	;# 
  2281  041A                     	;# 
  2282  041B                     	;# 
  2283  041C                     	;# 
  2284  041D                     	;# 
  2285  041E                     	;# 
  2286  041F                     	;# 
  2287  0498                     	;# 
  2288  0498                     	;# 
  2289  0499                     	;# 
  2290  049A                     	;# 
  2291  049B                     	;# 
  2292  049B                     	;# 
  2293  049C                     	;# 
  2294  049D                     	;# 
  2295  049E                     	;# 
  2296  049F                     	;# 
  2297  0617                     	;# 
  2298  0618                     	;# 
  2299  0619                     	;# 
  2300  0619                     	;# 
  2301  061A                     	;# 
  2302  061B                     	;# 
  2303  061C                     	;# 
  2304  061C                     	;# 
  2305  061F                     	;# 
  2306  0691                     	;# 
  2307  0692                     	;# 
  2308  0693                     	;# 
  2309  0694                     	;# 
  2310  0695                     	;# 
  2311  0696                     	;# 
  2312  0697                     	;# 
  2313  0698                     	;# 
  2314  0699                     	;# 
  2315  0711                     	;# 
  2316  0712                     	;# 
  2317  0713                     	;# 
  2318  0714                     	;# 
  2319  0715                     	;# 
  2320  0716                     	;# 
  2321  0717                     	;# 
  2322  0718                     	;# 
  2323  0719                     	;# 
  2324  0891                     	;# 
  2325  0891                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0892                     	;# 
  2331  0892                     	;# 
  2332  0892                     	;# 
  2333  0893                     	;# 
  2334  0893                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0894                     	;# 
  2340  0894                     	;# 
  2341  0894                     	;# 
  2342  0895                     	;# 
  2343  0895                     	;# 
  2344  0895                     	;# 
  2345  0896                     	;# 
  2346  0896                     	;# 
  2347  0896                     	;# 
  2348  089B                     	;# 
  2349  0911                     	;# 
  2350  0912                     	;# 
  2351  0913                     	;# 
  2352  0914                     	;# 
  2353  0915                     	;# 
  2354  0916                     	;# 
  2355  0918                     	;# 
  2356  0919                     	;# 
  2357  091A                     	;# 
  2358  091B                     	;# 
  2359  091C                     	;# 
  2360  091D                     	;# 
  2361  091E                     	;# 
  2362  091F                     	;# 
  2363  0E0F                     	;# 
  2364  0E10                     	;# 
  2365  0E11                     	;# 
  2366  0E12                     	;# 
  2367  0E13                     	;# 
  2368  0E14                     	;# 
  2369  0E15                     	;# 
  2370  0E16                     	;# 
  2371  0E17                     	;# 
  2372  0E18                     	;# 
  2373  0E19                     	;# 
  2374  0E1A                     	;# 
  2375  0E1B                     	;# 
  2376  0E1C                     	;# 
  2377  0E1D                     	;# 
  2378  0E1E                     	;# 
  2379  0E1F                     	;# 
  2380  0E20                     	;# 
  2381  0E21                     	;# 
  2382  0E22                     	;# 
  2383  0E24                     	;# 
  2384  0E25                     	;# 
  2385  0E28                     	;# 
  2386  0E29                     	;# 
  2387  0E2A                     	;# 
  2388  0E2B                     	;# 
  2389  0E2C                     	;# 
  2390  0E2D                     	;# 
  2391  0E2E                     	;# 
  2392  0E2F                     	;# 
  2393  0E90                     	;# 
  2394  0E91                     	;# 
  2395  0E92                     	;# 
  2396  0E94                     	;# 
  2397  0E95                     	;# 
  2398  0EA0                     	;# 
  2399  0EA1                     	;# 
  2400  0EA2                     	;# 
  2401  0EA3                     	;# 
  2402  0EA4                     	;# 
  2403  0EA5                     	;# 
  2404  0F0F                     	;# 
  2405  0F10                     	;# 
  2406  0F11                     	;# 
  2407  0F12                     	;# 
  2408  0F13                     	;# 
  2409  0F14                     	;# 
  2410  0F15                     	;# 
  2411  0F16                     	;# 
  2412  0F17                     	;# 
  2413  0F18                     	;# 
  2414  0F19                     	;# 
  2415  0F1A                     	;# 
  2416  0F1B                     	;# 
  2417  0F1C                     	;# 
  2418  0F1D                     	;# 
  2419  0F1E                     	;# 
  2420  0F1F                     	;# 
  2421  0F20                     	;# 
  2422  0F21                     	;# 
  2423  0F22                     	;# 
  2424  0F23                     	;# 
  2425  0F24                     	;# 
  2426  0F25                     	;# 
  2427  0F26                     	;# 
  2428  0F27                     	;# 
  2429  0F28                     	;# 
  2430  0F29                     	;# 
  2431  0F2A                     	;# 
  2432  0F2B                     	;# 
  2433  0F2C                     	;# 
  2434  0F2D                     	;# 
  2435  0F2E                     	;# 
  2436  0F2F                     	;# 
  2437  0F30                     	;# 
  2438  0F31                     	;# 
  2439  0F32                     	;# 
  2440  0F33                     	;# 
  2441  0F34                     	;# 
  2442  0F35                     	;# 
  2443  0F36                     	;# 
  2444  0F37                     	;# 
  2445  0FE4                     	;# 
  2446  0FE5                     	;# 
  2447  0FE6                     	;# 
  2448  0FE7                     	;# 
  2449  0FE8                     	;# 
  2450  0FE9                     	;# 
  2451  0FEA                     	;# 
  2452  0FEB                     	;# 
  2453  0FED                     	;# 
  2454  0FEE                     	;# 
  2455  0FEF                     	;# 
  2456  0000                     	;# 
  2457  0001                     	;# 
  2458  0002                     	;# 
  2459  0003                     	;# 
  2460  0004                     	;# 
  2461  0005                     	;# 
  2462  0006                     	;# 
  2463  0007                     	;# 
  2464  0008                     	;# 
  2465  0009                     	;# 
  2466  000A                     	;# 
  2467  000B                     	;# 
  2468  000C                     	;# 
  2469  000E                     	;# 
  2470  0010                     	;# 
  2471  0011                     	;# 
  2472  0012                     	;# 
  2473  0013                     	;# 
  2474  0014                     	;# 
  2475  0015                     	;# 
  2476  0015                     	;# 
  2477  0016                     	;# 
  2478  0016                     	;# 
  2479  0017                     	;# 
  2480  0018                     	;# 
  2481  0019                     	;# 
  2482  0019                     	;# 
  2483  001A                     	;# 
  2484  001B                     	;# 
  2485  001C                     	;# 
  2486  001D                     	;# 
  2487  001E                     	;# 
  2488  001F                     	;# 
  2489  008C                     	;# 
  2490  008E                     	;# 
  2491  0090                     	;# 
  2492  0091                     	;# 
  2493  0092                     	;# 
  2494  0093                     	;# 
  2495  0094                     	;# 
  2496  0097                     	;# 
  2497  009B                     	;# 
  2498  009B                     	;# 
  2499  009C                     	;# 
  2500  009D                     	;# 
  2501  009E                     	;# 
  2502  009F                     	;# 
  2503  010C                     	;# 
  2504  010E                     	;# 
  2505  0111                     	;# 
  2506  0112                     	;# 
  2507  0113                     	;# 
  2508  0114                     	;# 
  2509  0115                     	;# 
  2510  0116                     	;# 
  2511  0117                     	;# 
  2512  0118                     	;# 
  2513  0119                     	;# 
  2514  018C                     	;# 
  2515  018E                     	;# 
  2516  0197                     	;# 
  2517  0199                     	;# 
  2518  0199                     	;# 
  2519  0199                     	;# 
  2520  019A                     	;# 
  2521  019A                     	;# 
  2522  019A                     	;# 
  2523  019B                     	;# 
  2524  019B                     	;# 
  2525  019B                     	;# 
  2526  019B                     	;# 
  2527  019B                     	;# 
  2528  019C                     	;# 
  2529  019C                     	;# 
  2530  019C                     	;# 
  2531  019D                     	;# 
  2532  019D                     	;# 
  2533  019D                     	;# 
  2534  019E                     	;# 
  2535  019E                     	;# 
  2536  019E                     	;# 
  2537  019F                     	;# 
  2538  019F                     	;# 
  2539  019F                     	;# 
  2540  019F                     	;# 
  2541  019F                     	;# 
  2542  020C                     	;# 
  2543  020E                     	;# 
  2544  0211                     	;# 
  2545  0211                     	;# 
  2546  0212                     	;# 
  2547  0212                     	;# 
  2548  0213                     	;# 
  2549  0213                     	;# 
  2550  0214                     	;# 
  2551  0214                     	;# 
  2552  0215                     	;# 
  2553  0215                     	;# 
  2554  0215                     	;# 
  2555  0215                     	;# 
  2556  0216                     	;# 
  2557  0216                     	;# 
  2558  0217                     	;# 
  2559  0217                     	;# 
  2560  0219                     	;# 
  2561  021A                     	;# 
  2562  021B                     	;# 
  2563  021C                     	;# 
  2564  021D                     	;# 
  2565  021D                     	;# 
  2566  021E                     	;# 
  2567  021F                     	;# 
  2568  028C                     	;# 
  2569  028E                     	;# 
  2570  0291                     	;# 
  2571  0291                     	;# 
  2572  0292                     	;# 
  2573  0293                     	;# 
  2574  0294                     	;# 
  2575  0295                     	;# 
  2576  0295                     	;# 
  2577  0296                     	;# 
  2578  0297                     	;# 
  2579  0298                     	;# 
  2580  029F                     	;# 
  2581  030C                     	;# 
  2582  030E                     	;# 
  2583  0311                     	;# 
  2584  0311                     	;# 
  2585  0312                     	;# 
  2586  0313                     	;# 
  2587  0314                     	;# 
  2588  0315                     	;# 
  2589  0315                     	;# 
  2590  0316                     	;# 
  2591  0317                     	;# 
  2592  0318                     	;# 
  2593  038C                     	;# 
  2594  038E                     	;# 
  2595  0391                     	;# 
  2596  0392                     	;# 
  2597  0393                     	;# 
  2598  0397                     	;# 
  2599  0398                     	;# 
  2600  0399                     	;# 
  2601  039A                     	;# 
  2602  039C                     	;# 
  2603  039D                     	;# 
  2604  039E                     	;# 
  2605  039F                     	;# 
  2606  0411                     	;# 
  2607  0411                     	;# 
  2608  0412                     	;# 
  2609  0413                     	;# 
  2610  0414                     	;# 
  2611  0415                     	;# 
  2612  0416                     	;# 
  2613  0417                     	;# 
  2614  0418                     	;# 
  2615  0418                     	;# 
  2616  0419                     	;# 
  2617  041A                     	;# 
  2618  041B                     	;# 
  2619  041C                     	;# 
  2620  041D                     	;# 
  2621  041E                     	;# 
  2622  041F                     	;# 
  2623  0498                     	;# 
  2624  0498                     	;# 
  2625  0499                     	;# 
  2626  049A                     	;# 
  2627  049B                     	;# 
  2628  049B                     	;# 
  2629  049C                     	;# 
  2630  049D                     	;# 
  2631  049E                     	;# 
  2632  049F                     	;# 
  2633  0617                     	;# 
  2634  0618                     	;# 
  2635  0619                     	;# 
  2636  0619                     	;# 
  2637  061A                     	;# 
  2638  061B                     	;# 
  2639  061C                     	;# 
  2640  061C                     	;# 
  2641  061F                     	;# 
  2642  0691                     	;# 
  2643  0692                     	;# 
  2644  0693                     	;# 
  2645  0694                     	;# 
  2646  0695                     	;# 
  2647  0696                     	;# 
  2648  0697                     	;# 
  2649  0698                     	;# 
  2650  0699                     	;# 
  2651  0711                     	;# 
  2652  0712                     	;# 
  2653  0713                     	;# 
  2654  0714                     	;# 
  2655  0715                     	;# 
  2656  0716                     	;# 
  2657  0717                     	;# 
  2658  0718                     	;# 
  2659  0719                     	;# 
  2660  0891                     	;# 
  2661  0891                     	;# 
  2662  0891                     	;# 
  2663  0891                     	;# 
  2664  0891                     	;# 
  2665  0891                     	;# 
  2666  0892                     	;# 
  2667  0892                     	;# 
  2668  0892                     	;# 
  2669  0893                     	;# 
  2670  0893                     	;# 
  2671  0893                     	;# 
  2672  0893                     	;# 
  2673  0893                     	;# 
  2674  0893                     	;# 
  2675  0894                     	;# 
  2676  0894                     	;# 
  2677  0894                     	;# 
  2678  0895                     	;# 
  2679  0895                     	;# 
  2680  0895                     	;# 
  2681  0896                     	;# 
  2682  0896                     	;# 
  2683  0896                     	;# 
  2684  089B                     	;# 
  2685  0911                     	;# 
  2686  0912                     	;# 
  2687  0913                     	;# 
  2688  0914                     	;# 
  2689  0915                     	;# 
  2690  0916                     	;# 
  2691  0918                     	;# 
  2692  0919                     	;# 
  2693  091A                     	;# 
  2694  091B                     	;# 
  2695  091C                     	;# 
  2696  091D                     	;# 
  2697  091E                     	;# 
  2698  091F                     	;# 
  2699  0E0F                     	;# 
  2700  0E10                     	;# 
  2701  0E11                     	;# 
  2702  0E12                     	;# 
  2703  0E13                     	;# 
  2704  0E14                     	;# 
  2705  0E15                     	;# 
  2706  0E16                     	;# 
  2707  0E17                     	;# 
  2708  0E18                     	;# 
  2709  0E19                     	;# 
  2710  0E1A                     	;# 
  2711  0E1B                     	;# 
  2712  0E1C                     	;# 
  2713  0E1D                     	;# 
  2714  0E1E                     	;# 
  2715  0E1F                     	;# 
  2716  0E20                     	;# 
  2717  0E21                     	;# 
  2718  0E22                     	;# 
  2719  0E24                     	;# 
  2720  0E25                     	;# 
  2721  0E28                     	;# 
  2722  0E29                     	;# 
  2723  0E2A                     	;# 
  2724  0E2B                     	;# 
  2725  0E2C                     	;# 
  2726  0E2D                     	;# 
  2727  0E2E                     	;# 
  2728  0E2F                     	;# 
  2729  0E90                     	;# 
  2730  0E91                     	;# 
  2731  0E92                     	;# 
  2732  0E94                     	;# 
  2733  0E95                     	;# 
  2734  0EA0                     	;# 
  2735  0EA1                     	;# 
  2736  0EA2                     	;# 
  2737  0EA3                     	;# 
  2738  0EA4                     	;# 
  2739  0EA5                     	;# 
  2740  0F0F                     	;# 
  2741  0F10                     	;# 
  2742  0F11                     	;# 
  2743  0F12                     	;# 
  2744  0F13                     	;# 
  2745  0F14                     	;# 
  2746  0F15                     	;# 
  2747  0F16                     	;# 
  2748  0F17                     	;# 
  2749  0F18                     	;# 
  2750  0F19                     	;# 
  2751  0F1A                     	;# 
  2752  0F1B                     	;# 
  2753  0F1C                     	;# 
  2754  0F1D                     	;# 
  2755  0F1E                     	;# 
  2756  0F1F                     	;# 
  2757  0F20                     	;# 
  2758  0F21                     	;# 
  2759  0F22                     	;# 
  2760  0F23                     	;# 
  2761  0F24                     	;# 
  2762  0F25                     	;# 
  2763  0F26                     	;# 
  2764  0F27                     	;# 
  2765  0F28                     	;# 
  2766  0F29                     	;# 
  2767  0F2A                     	;# 
  2768  0F2B                     	;# 
  2769  0F2C                     	;# 
  2770  0F2D                     	;# 
  2771  0F2E                     	;# 
  2772  0F2F                     	;# 
  2773  0F30                     	;# 
  2774  0F31                     	;# 
  2775  0F32                     	;# 
  2776  0F33                     	;# 
  2777  0F34                     	;# 
  2778  0F35                     	;# 
  2779  0F36                     	;# 
  2780  0F37                     	;# 
  2781  0FE4                     	;# 
  2782  0FE5                     	;# 
  2783  0FE6                     	;# 
  2784  0FE7                     	;# 
  2785  0FE8                     	;# 
  2786  0FE9                     	;# 
  2787  0FEA                     	;# 
  2788  0FEB                     	;# 
  2789  0FED                     	;# 
  2790  0FEE                     	;# 
  2791  0FEF                     	;# 
  2792  0000                     	;# 
  2793  0001                     	;# 
  2794  0002                     	;# 
  2795  0003                     	;# 
  2796  0004                     	;# 
  2797  0005                     	;# 
  2798  0006                     	;# 
  2799  0007                     	;# 
  2800  0008                     	;# 
  2801  0009                     	;# 
  2802  000A                     	;# 
  2803  000B                     	;# 
  2804  000C                     	;# 
  2805  000E                     	;# 
  2806  0010                     	;# 
  2807  0011                     	;# 
  2808  0012                     	;# 
  2809  0013                     	;# 
  2810  0014                     	;# 
  2811  0015                     	;# 
  2812  0015                     	;# 
  2813  0016                     	;# 
  2814  0016                     	;# 
  2815  0017                     	;# 
  2816  0018                     	;# 
  2817  0019                     	;# 
  2818  0019                     	;# 
  2819  001A                     	;# 
  2820  001B                     	;# 
  2821  001C                     	;# 
  2822  001D                     	;# 
  2823  001E                     	;# 
  2824  001F                     	;# 
  2825  008C                     	;# 
  2826  008E                     	;# 
  2827  0090                     	;# 
  2828  0091                     	;# 
  2829  0092                     	;# 
  2830  0093                     	;# 
  2831  0094                     	;# 
  2832  0097                     	;# 
  2833  009B                     	;# 
  2834  009B                     	;# 
  2835  009C                     	;# 
  2836  009D                     	;# 
  2837  009E                     	;# 
  2838  009F                     	;# 
  2839  010C                     	;# 
  2840  010E                     	;# 
  2841  0111                     	;# 
  2842  0112                     	;# 
  2843  0113                     	;# 
  2844  0114                     	;# 
  2845  0115                     	;# 
  2846  0116                     	;# 
  2847  0117                     	;# 
  2848  0118                     	;# 
  2849  0119                     	;# 
  2850  018C                     	;# 
  2851  018E                     	;# 
  2852  0197                     	;# 
  2853  0199                     	;# 
  2854  0199                     	;# 
  2855  0199                     	;# 
  2856  019A                     	;# 
  2857  019A                     	;# 
  2858  019A                     	;# 
  2859  019B                     	;# 
  2860  019B                     	;# 
  2861  019B                     	;# 
  2862  019B                     	;# 
  2863  019B                     	;# 
  2864  019C                     	;# 
  2865  019C                     	;# 
  2866  019C                     	;# 
  2867  019D                     	;# 
  2868  019D                     	;# 
  2869  019D                     	;# 
  2870  019E                     	;# 
  2871  019E                     	;# 
  2872  019E                     	;# 
  2873  019F                     	;# 
  2874  019F                     	;# 
  2875  019F                     	;# 
  2876  019F                     	;# 
  2877  019F                     	;# 
  2878  020C                     	;# 
  2879  020E                     	;# 
  2880  0211                     	;# 
  2881  0211                     	;# 
  2882  0212                     	;# 
  2883  0212                     	;# 
  2884  0213                     	;# 
  2885  0213                     	;# 
  2886  0214                     	;# 
  2887  0214                     	;# 
  2888  0215                     	;# 
  2889  0215                     	;# 
  2890  0215                     	;# 
  2891  0215                     	;# 
  2892  0216                     	;# 
  2893  0216                     	;# 
  2894  0217                     	;# 
  2895  0217                     	;# 
  2896  0219                     	;# 
  2897  021A                     	;# 
  2898  021B                     	;# 
  2899  021C                     	;# 
  2900  021D                     	;# 
  2901  021D                     	;# 
  2902  021E                     	;# 
  2903  021F                     	;# 
  2904  028C                     	;# 
  2905  028E                     	;# 
  2906  0291                     	;# 
  2907  0291                     	;# 
  2908  0292                     	;# 
  2909  0293                     	;# 
  2910  0294                     	;# 
  2911  0295                     	;# 
  2912  0295                     	;# 
  2913  0296                     	;# 
  2914  0297                     	;# 
  2915  0298                     	;# 
  2916  029F                     	;# 
  2917  030C                     	;# 
  2918  030E                     	;# 
  2919  0311                     	;# 
  2920  0311                     	;# 
  2921  0312                     	;# 
  2922  0313                     	;# 
  2923  0314                     	;# 
  2924  0315                     	;# 
  2925  0315                     	;# 
  2926  0316                     	;# 
  2927  0317                     	;# 
  2928  0318                     	;# 
  2929  038C                     	;# 
  2930  038E                     	;# 
  2931  0391                     	;# 
  2932  0392                     	;# 
  2933  0393                     	;# 
  2934  0397                     	;# 
  2935  0398                     	;# 
  2936  0399                     	;# 
  2937  039A                     	;# 
  2938  039C                     	;# 
  2939  039D                     	;# 
  2940  039E                     	;# 
  2941  039F                     	;# 
  2942  0411                     	;# 
  2943  0411                     	;# 
  2944  0412                     	;# 
  2945  0413                     	;# 
  2946  0414                     	;# 
  2947  0415                     	;# 
  2948  0416                     	;# 
  2949  0417                     	;# 
  2950  0418                     	;# 
  2951  0418                     	;# 
  2952  0419                     	;# 
  2953  041A                     	;# 
  2954  041B                     	;# 
  2955  041C                     	;# 
  2956  041D                     	;# 
  2957  041E                     	;# 
  2958  041F                     	;# 
  2959  0498                     	;# 
  2960  0498                     	;# 
  2961  0499                     	;# 
  2962  049A                     	;# 
  2963  049B                     	;# 
  2964  049B                     	;# 
  2965  049C                     	;# 
  2966  049D                     	;# 
  2967  049E                     	;# 
  2968  049F                     	;# 
  2969  0617                     	;# 
  2970  0618                     	;# 
  2971  0619                     	;# 
  2972  0619                     	;# 
  2973  061A                     	;# 
  2974  061B                     	;# 
  2975  061C                     	;# 
  2976  061C                     	;# 
  2977  061F                     	;# 
  2978  0691                     	;# 
  2979  0692                     	;# 
  2980  0693                     	;# 
  2981  0694                     	;# 
  2982  0695                     	;# 
  2983  0696                     	;# 
  2984  0697                     	;# 
  2985  0698                     	;# 
  2986  0699                     	;# 
  2987  0711                     	;# 
  2988  0712                     	;# 
  2989  0713                     	;# 
  2990  0714                     	;# 
  2991  0715                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  0891                     	;# 
  2997  0891                     	;# 
  2998  0891                     	;# 
  2999  0891                     	;# 
  3000  0891                     	;# 
  3001  0891                     	;# 
  3002  0892                     	;# 
  3003  0892                     	;# 
  3004  0892                     	;# 
  3005  0893                     	;# 
  3006  0893                     	;# 
  3007  0893                     	;# 
  3008  0893                     	;# 
  3009  0893                     	;# 
  3010  0893                     	;# 
  3011  0894                     	;# 
  3012  0894                     	;# 
  3013  0894                     	;# 
  3014  0895                     	;# 
  3015  0895                     	;# 
  3016  0895                     	;# 
  3017  0896                     	;# 
  3018  0896                     	;# 
  3019  0896                     	;# 
  3020  089B                     	;# 
  3021  0911                     	;# 
  3022  0912                     	;# 
  3023  0913                     	;# 
  3024  0914                     	;# 
  3025  0915                     	;# 
  3026  0916                     	;# 
  3027  0918                     	;# 
  3028  0919                     	;# 
  3029  091A                     	;# 
  3030  091B                     	;# 
  3031  091C                     	;# 
  3032  091D                     	;# 
  3033  091E                     	;# 
  3034  091F                     	;# 
  3035  0E0F                     	;# 
  3036  0E10                     	;# 
  3037  0E11                     	;# 
  3038  0E12                     	;# 
  3039  0E13                     	;# 
  3040  0E14                     	;# 
  3041  0E15                     	;# 
  3042  0E16                     	;# 
  3043  0E17                     	;# 
  3044  0E18                     	;# 
  3045  0E19                     	;# 
  3046  0E1A                     	;# 
  3047  0E1B                     	;# 
  3048  0E1C                     	;# 
  3049  0E1D                     	;# 
  3050  0E1E                     	;# 
  3051  0E1F                     	;# 
  3052  0E20                     	;# 
  3053  0E21                     	;# 
  3054  0E22                     	;# 
  3055  0E24                     	;# 
  3056  0E25                     	;# 
  3057  0E28                     	;# 
  3058  0E29                     	;# 
  3059  0E2A                     	;# 
  3060  0E2B                     	;# 
  3061  0E2C                     	;# 
  3062  0E2D                     	;# 
  3063  0E2E                     	;# 
  3064  0E2F                     	;# 
  3065  0E90                     	;# 
  3066  0E91                     	;# 
  3067  0E92                     	;# 
  3068  0E94                     	;# 
  3069  0E95                     	;# 
  3070  0EA0                     	;# 
  3071  0EA1                     	;# 
  3072  0EA2                     	;# 
  3073  0EA3                     	;# 
  3074  0EA4                     	;# 
  3075  0EA5                     	;# 
  3076  0F0F                     	;# 
  3077  0F10                     	;# 
  3078  0F11                     	;# 
  3079  0F12                     	;# 
  3080  0F13                     	;# 
  3081  0F14                     	;# 
  3082  0F15                     	;# 
  3083  0F16                     	;# 
  3084  0F17                     	;# 
  3085  0F18                     	;# 
  3086  0F19                     	;# 
  3087  0F1A                     	;# 
  3088  0F1B                     	;# 
  3089  0F1C                     	;# 
  3090  0F1D                     	;# 
  3091  0F1E                     	;# 
  3092  0F1F                     	;# 
  3093  0F20                     	;# 
  3094  0F21                     	;# 
  3095  0F22                     	;# 
  3096  0F23                     	;# 
  3097  0F24                     	;# 
  3098  0F25                     	;# 
  3099  0F26                     	;# 
  3100  0F27                     	;# 
  3101  0F28                     	;# 
  3102  0F29                     	;# 
  3103  0F2A                     	;# 
  3104  0F2B                     	;# 
  3105  0F2C                     	;# 
  3106  0F2D                     	;# 
  3107  0F2E                     	;# 
  3108  0F2F                     	;# 
  3109  0F30                     	;# 
  3110  0F31                     	;# 
  3111  0F32                     	;# 
  3112  0F33                     	;# 
  3113  0F34                     	;# 
  3114  0F35                     	;# 
  3115  0F36                     	;# 
  3116  0F37                     	;# 
  3117  0FE4                     	;# 
  3118  0FE5                     	;# 
  3119  0FE6                     	;# 
  3120  0FE7                     	;# 
  3121  0FE8                     	;# 
  3122  0FE9                     	;# 
  3123  0FEA                     	;# 
  3124  0FEB                     	;# 
  3125  0FED                     	;# 
  3126  0FEE                     	;# 
  3127  0FEF                     	;# 
  3128  0000                     	;# 
  3129  0001                     	;# 
  3130  0002                     	;# 
  3131  0003                     	;# 
  3132  0004                     	;# 
  3133  0005                     	;# 
  3134  0006                     	;# 
  3135  0007                     	;# 
  3136  0008                     	;# 
  3137  0009                     	;# 
  3138  000A                     	;# 
  3139  000B                     	;# 
  3140  000C                     	;# 
  3141  000E                     	;# 
  3142  0010                     	;# 
  3143  0011                     	;# 
  3144  0012                     	;# 
  3145  0013                     	;# 
  3146  0014                     	;# 
  3147  0015                     	;# 
  3148  0015                     	;# 
  3149  0016                     	;# 
  3150  0016                     	;# 
  3151  0017                     	;# 
  3152  0018                     	;# 
  3153  0019                     	;# 
  3154  0019                     	;# 
  3155  001A                     	;# 
  3156  001B                     	;# 
  3157  001C                     	;# 
  3158  001D                     	;# 
  3159  001E                     	;# 
  3160  001F                     	;# 
  3161  008C                     	;# 
  3162  008E                     	;# 
  3163  0090                     	;# 
  3164  0091                     	;# 
  3165  0092                     	;# 
  3166  0093                     	;# 
  3167  0094                     	;# 
  3168  0097                     	;# 
  3169  009B                     	;# 
  3170  009B                     	;# 
  3171  009C                     	;# 
  3172  009D                     	;# 
  3173  009E                     	;# 
  3174  009F                     	;# 
  3175  010C                     	;# 
  3176  010E                     	;# 
  3177  0111                     	;# 
  3178  0112                     	;# 
  3179  0113                     	;# 
  3180  0114                     	;# 
  3181  0115                     	;# 
  3182  0116                     	;# 
  3183  0117                     	;# 
  3184  0118                     	;# 
  3185  0119                     	;# 
  3186  018C                     	;# 
  3187  018E                     	;# 
  3188  0197                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  0199                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019A                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019C                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019D                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  019F                     	;# 
  3214  020C                     	;# 
  3215  020E                     	;# 
  3216  0211                     	;# 
  3217  0211                     	;# 
  3218  0212                     	;# 
  3219  0212                     	;# 
  3220  0213                     	;# 
  3221  0213                     	;# 
  3222  0214                     	;# 
  3223  0214                     	;# 
  3224  0215                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0216                     	;# 
  3229  0216                     	;# 
  3230  0217                     	;# 
  3231  0217                     	;# 
  3232  0219                     	;# 
  3233  021A                     	;# 
  3234  021B                     	;# 
  3235  021C                     	;# 
  3236  021D                     	;# 
  3237  021D                     	;# 
  3238  021E                     	;# 
  3239  021F                     	;# 
  3240  028C                     	;# 
  3241  028E                     	;# 
  3242  0291                     	;# 
  3243  0291                     	;# 
  3244  0292                     	;# 
  3245  0293                     	;# 
  3246  0294                     	;# 
  3247  0295                     	;# 
  3248  0295                     	;# 
  3249  0296                     	;# 
  3250  0297                     	;# 
  3251  0298                     	;# 
  3252  029F                     	;# 
  3253  030C                     	;# 
  3254  030E                     	;# 
  3255  0311                     	;# 
  3256  0311                     	;# 
  3257  0312                     	;# 
  3258  0313                     	;# 
  3259  0314                     	;# 
  3260  0315                     	;# 
  3261  0315                     	;# 
  3262  0316                     	;# 
  3263  0317                     	;# 
  3264  0318                     	;# 
  3265  038C                     	;# 
  3266  038E                     	;# 
  3267  0391                     	;# 
  3268  0392                     	;# 
  3269  0393                     	;# 
  3270  0397                     	;# 
  3271  0398                     	;# 
  3272  0399                     	;# 
  3273  039A                     	;# 
  3274  039C                     	;# 
  3275  039D                     	;# 
  3276  039E                     	;# 
  3277  039F                     	;# 
  3278  0411                     	;# 
  3279  0411                     	;# 
  3280  0412                     	;# 
  3281  0413                     	;# 
  3282  0414                     	;# 
  3283  0415                     	;# 
  3284  0416                     	;# 
  3285  0417                     	;# 
  3286  0418                     	;# 
  3287  0418                     	;# 
  3288  0419                     	;# 
  3289  041A                     	;# 
  3290  041B                     	;# 
  3291  041C                     	;# 
  3292  041D                     	;# 
  3293  041E                     	;# 
  3294  041F                     	;# 
  3295  0498                     	;# 
  3296  0498                     	;# 
  3297  0499                     	;# 
  3298  049A                     	;# 
  3299  049B                     	;# 
  3300  049B                     	;# 
  3301  049C                     	;# 
  3302  049D                     	;# 
  3303  049E                     	;# 
  3304  049F                     	;# 
  3305  0617                     	;# 
  3306  0618                     	;# 
  3307  0619                     	;# 
  3308  0619                     	;# 
  3309  061A                     	;# 
  3310  061B                     	;# 
  3311  061C                     	;# 
  3312  061C                     	;# 
  3313  061F                     	;# 
  3314  0691                     	;# 
  3315  0692                     	;# 
  3316  0693                     	;# 
  3317  0694                     	;# 
  3318  0695                     	;# 
  3319  0696                     	;# 
  3320  0697                     	;# 
  3321  0698                     	;# 
  3322  0699                     	;# 
  3323  0711                     	;# 
  3324  0712                     	;# 
  3325  0713                     	;# 
  3326  0714                     	;# 
  3327  0715                     	;# 
  3328  0716                     	;# 
  3329  0717                     	;# 
  3330  0718                     	;# 
  3331  0719                     	;# 
  3332  0891                     	;# 
  3333  0891                     	;# 
  3334  0891                     	;# 
  3335  0891                     	;# 
  3336  0891                     	;# 
  3337  0891                     	;# 
  3338  0892                     	;# 
  3339  0892                     	;# 
  3340  0892                     	;# 
  3341  0893                     	;# 
  3342  0893                     	;# 
  3343  0893                     	;# 
  3344  0893                     	;# 
  3345  0893                     	;# 
  3346  0893                     	;# 
  3347  0894                     	;# 
  3348  0894                     	;# 
  3349  0894                     	;# 
  3350  0895                     	;# 
  3351  0895                     	;# 
  3352  0895                     	;# 
  3353  0896                     	;# 
  3354  0896                     	;# 
  3355  0896                     	;# 
  3356  089B                     	;# 
  3357  0911                     	;# 
  3358  0912                     	;# 
  3359  0913                     	;# 
  3360  0914                     	;# 
  3361  0915                     	;# 
  3362  0916                     	;# 
  3363  0918                     	;# 
  3364  0919                     	;# 
  3365  091A                     	;# 
  3366  091B                     	;# 
  3367  091C                     	;# 
  3368  091D                     	;# 
  3369  091E                     	;# 
  3370  091F                     	;# 
  3371  0E0F                     	;# 
  3372  0E10                     	;# 
  3373  0E11                     	;# 
  3374  0E12                     	;# 
  3375  0E13                     	;# 
  3376  0E14                     	;# 
  3377  0E15                     	;# 
  3378  0E16                     	;# 
  3379  0E17                     	;# 
  3380  0E18                     	;# 
  3381  0E19                     	;# 
  3382  0E1A                     	;# 
  3383  0E1B                     	;# 
  3384  0E1C                     	;# 
  3385  0E1D                     	;# 
  3386  0E1E                     	;# 
  3387  0E1F                     	;# 
  3388  0E20                     	;# 
  3389  0E21                     	;# 
  3390  0E22                     	;# 
  3391  0E24                     	;# 
  3392  0E25                     	;# 
  3393  0E28                     	;# 
  3394  0E29                     	;# 
  3395  0E2A                     	;# 
  3396  0E2B                     	;# 
  3397  0E2C                     	;# 
  3398  0E2D                     	;# 
  3399  0E2E                     	;# 
  3400  0E2F                     	;# 
  3401  0E90                     	;# 
  3402  0E91                     	;# 
  3403  0E92                     	;# 
  3404  0E94                     	;# 
  3405  0E95                     	;# 
  3406  0EA0                     	;# 
  3407  0EA1                     	;# 
  3408  0EA2                     	;# 
  3409  0EA3                     	;# 
  3410  0EA4                     	;# 
  3411  0EA5                     	;# 
  3412  0F0F                     	;# 
  3413  0F10                     	;# 
  3414  0F11                     	;# 
  3415  0F12                     	;# 
  3416  0F13                     	;# 
  3417  0F14                     	;# 
  3418  0F15                     	;# 
  3419  0F16                     	;# 
  3420  0F17                     	;# 
  3421  0F18                     	;# 
  3422  0F19                     	;# 
  3423  0F1A                     	;# 
  3424  0F1B                     	;# 
  3425  0F1C                     	;# 
  3426  0F1D                     	;# 
  3427  0F1E                     	;# 
  3428  0F1F                     	;# 
  3429  0F20                     	;# 
  3430  0F21                     	;# 
  3431  0F22                     	;# 
  3432  0F23                     	;# 
  3433  0F24                     	;# 
  3434  0F25                     	;# 
  3435  0F26                     	;# 
  3436  0F27                     	;# 
  3437  0F28                     	;# 
  3438  0F29                     	;# 
  3439  0F2A                     	;# 
  3440  0F2B                     	;# 
  3441  0F2C                     	;# 
  3442  0F2D                     	;# 
  3443  0F2E                     	;# 
  3444  0F2F                     	;# 
  3445  0F30                     	;# 
  3446  0F31                     	;# 
  3447  0F32                     	;# 
  3448  0F33                     	;# 
  3449  0F34                     	;# 
  3450  0F35                     	;# 
  3451  0F36                     	;# 
  3452  0F37                     	;# 
  3453  0FE4                     	;# 
  3454  0FE5                     	;# 
  3455  0FE6                     	;# 
  3456  0FE7                     	;# 
  3457  0FE8                     	;# 
  3458  0FE9                     	;# 
  3459  0FEA                     	;# 
  3460  0FEB                     	;# 
  3461  0FED                     	;# 
  3462  0FEE                     	;# 
  3463  0FEF                     	;# 
  3464                           
  3465                           	psect	stringtext
  3466  1000                     __pstringtext:	
  3467  1000                     _dpowers:	
  3468  1000  3401               	retlw	1
  3469  1001  3400               	retlw	0
  3470  1002  340A               	retlw	10
  3471  1003  3400               	retlw	0
  3472  1004  3464               	retlw	100
  3473  1005  3400               	retlw	0
  3474  1006  34E8               	retlw	232
  3475  1007  3403               	retlw	3
  3476  1008  3410               	retlw	16
  3477  1009  3427               	retlw	39
  3478  100A                     __end_of_dpowers:	
  3479  100A                     _hexpowers:	
  3480  100A  3401               	retlw	1
  3481  100B  3400               	retlw	0
  3482  100C  3410               	retlw	16
  3483  100D  3400               	retlw	0
  3484  100E  3400               	retlw	0
  3485  100F  3401               	retlw	1
  3486  1010  3400               	retlw	0
  3487  1011  3410               	retlw	16
  3488  1012                     __end_of_hexpowers:	
  3489  1012                     sin@coeff_a:	
  3490  1012  34F4               	retlw	244
  3491  1013  344A               	retlw	74
  3492  1014  3448               	retlw	72
  3493  1015  3495               	retlw	149
  3494  1016  3495               	retlw	149
  3495  1017  34C7               	retlw	199
  3496  1018  34C1               	retlw	193
  3497  1019  34DC               	retlw	220
  3498  101A  3445               	retlw	69
  3499  101B  34DC               	retlw	220
  3500  101C  346D               	retlw	109
  3501  101D  34C3               	retlw	195
  3502  101E  34B3               	retlw	179
  3503  101F  3433               	retlw	51
  3504  1020  3440               	retlw	64
  3505  1021                     __end_ofsin@coeff_a:	
  3506  1021                     sin@coeff_b:	
  3507  1021  3434               	retlw	52
  3508  1022  3401               	retlw	1
  3509  1023  3448               	retlw	72
  3510  1024  349D               	retlw	157
  3511  1025  34B0               	retlw	176
  3512  1026  3445               	retlw	69
  3513  1027  3400               	retlw	0
  3514  1028  34DA               	retlw	218
  3515  1029  3442               	retlw	66
  3516  102A  3400               	retlw	0
  3517  102B  3480               	retlw	128
  3518  102C  343F               	retlw	63
  3519  102D                     __end_ofsin@coeff_b:	
  3520  0011                     _PIR1bits	set	17
  3521  000B                     _INTCONbits	set	11
  3522  005F                     _GIE	set	95
  3523  0097                     _WDTCON	set	151
  3524  008E                     _TRISC	set	142
  3525  008C                     _TRISA	set	140
  3526  0091                     _PIE1bits	set	145
  3527  010E                     _LATC	set	270
  3528  010C                     _LATA	set	268
  3529  010E                     _LATCbits	set	270
  3530  018C                     _ANSELA	set	396
  3531  018E                     _ANSELC	set	398
  3532  0199                     _RC1REG	set	409
  3533  019D                     _RC1STAbits	set	413
  3534  019A                     _TX1REG	set	410
  3535  019C                     _SP1BRGH	set	412
  3536  019B                     _SP1BRGL	set	411
  3537  019E                     _TX1STA	set	414
  3538  019D                     _RC1STA	set	413
  3539  019F                     _BAUD1CON	set	415
  3540  0214                     _SSP1STATbits	set	532
  3541  0211                     _SSP1BUF	set	529
  3542  0215                     _SSP1CON1bits	set	533
  3543  0212                     _SSP1ADD	set	530
  3544  0215                     _SSP1CON1	set	533
  3545  0214                     _SSP1STAT	set	532
  3546  020E                     _WPUC	set	526
  3547  020C                     _WPUA	set	524
  3548  028E                     _ODCONC	set	654
  3549  028C                     _ODCONA	set	652
  3550  091E                     _OSCTUNE	set	2334
  3551  091F                     _OSCFRQ	set	2335
  3552  091D                     _OSCEN	set	2333
  3553  091B                     _OSCCON3	set	2331
  3554  0919                     _OSCCON1	set	2329
  3555  48E0                     _PLLR	set	18656
  3556  0E24                     _RXPPSbits	set	3620
  3557  0E21                     _SSP1DATPPSbits	set	3617
  3558  0E20                     _SSP1CLKPPSbits	set	3616
  3559  0E0F                     _PPSLOCKbits	set	3599
  3560  0E0F                     _PPSLOCK	set	3599
  3561  0EA0                     _RC0PPSbits	set	3744
  3562  0EA4                     _RC4PPSbits	set	3748
  3563  0EA1                     _RC1PPSbits	set	3745
  3564  102D                     STR_18:	
  3565  102D  344E               	retlw	78	;'N'
  3566  102E  346F               	retlw	111	;'o'
  3567  102F  3474               	retlw	116	;'t'
  3568  1030  3469               	retlw	105	;'i'
  3569  1031  3466               	retlw	102	;'f'
  3570  1032  3479               	retlw	121	;'y'
  3571  1033  343A               	retlw	58	;':'
  3572  1034  3452               	retlw	82	;'R'
  3573  1035  3465               	retlw	101	;'e'
  3574  1036  3467               	retlw	103	;'g'
  3575  1037  345B               	retlw	91	;'['
  3576  1038  3425               	retlw	37	;'%'
  3577  1039  3478               	retlw	120	;'x'
  3578  103A  3468               	retlw	104	;'h'
  3579  103B  345D               	retlw	93	;']'
  3580  103C  342C               	retlw	44	;','
  3581  103D  3443               	retlw	67	;'C'
  3582  103E  3475               	retlw	117	;'u'
  3583  103F  3472               	retlw	114	;'r'
  3584  1040  3472               	retlw	114	;'r'
  3585  1041  3465               	retlw	101	;'e'
  3586  1042  346E               	retlw	110	;'n'
  3587  1043  3474               	retlw	116	;'t'
  3588  1044  345B               	retlw	91	;'['
  3589  1045  3425               	retlw	37	;'%'
  3590  1046  3464               	retlw	100	;'d'
  3591  1047  345D               	retlw	93	;']'
  3592  1048  3400               	retlw	0
  3593  1049                     STR_21:	
  3594  1049  3430               	retlw	48	;'0'
  3595  104A  3431               	retlw	49	;'1'
  3596  104B  3432               	retlw	50	;'2'
  3597  104C  3433               	retlw	51	;'3'
  3598  104D  3434               	retlw	52	;'4'
  3599  104E  3435               	retlw	53	;'5'
  3600  104F  3436               	retlw	54	;'6'
  3601  1050  3437               	retlw	55	;'7'
  3602  1051  3438               	retlw	56	;'8'
  3603  1052  3439               	retlw	57	;'9'
  3604  1053  3461               	retlw	97	;'a'
  3605  1054  3462               	retlw	98	;'b'
  3606  1055  3463               	retlw	99	;'c'
  3607  1056  3464               	retlw	100	;'d'
  3608  1057  3465               	retlw	101	;'e'
  3609  1058  3466               	retlw	102	;'f'
  3610  1059  3400               	retlw	0
  3611  105A                     STR_20:	
  3612  105A  3428               	retlw	40	;'('
  3613  105B  346E               	retlw	110	;'n'
  3614  105C  3475               	retlw	117	;'u'
  3615  105D  346C               	retlw	108	;'l'
  3616  105E  346C               	retlw	108	;'l'
  3617  105F  3429               	retlw	41	;')'
  3618  1060  3400               	retlw	0
  3619  1061                     STR_13:	
  3620  1061  3425               	retlw	37	;'%'
  3621  1062  3464               	retlw	100	;'d'
  3622  1063  3425               	retlw	37	;'%'
  3623  1064  3473               	retlw	115	;'s'
  3624  1065  3400               	retlw	0
  3625  1066                     STR_2:	
  3626  1066  3425               	retlw	37	;'%'
  3627  1067  3473               	retlw	115	;'s'
  3628  1068  3425               	retlw	37	;'%'
  3629  1069  3473               	retlw	115	;'s'
  3630  106A  3400               	retlw	0
  3631  106B                     STR_10:	
  3632  106B  3441               	retlw	65	;'A'
  3633  106C  344F               	retlw	79	;'O'
  3634  106D  344B               	retlw	75	;'K'
  3635  106E  3400               	retlw	0
  3636  106F                     STR_3:	
  3637  106F  344E               	retlw	78	;'N'
  3638  1070  344F               	retlw	79	;'O'
  3639  1071  344B               	retlw	75	;'K'
  3640  1072  3400               	retlw	0
  3641  1073                     STR_12:	
  3642  1073  3447               	retlw	71	;'G'
  3643  1074  3445               	retlw	69	;'E'
  3644  1075  3454               	retlw	84	;'T'
  3645  1076  3400               	retlw	0
  3646  1077                     STR_5:	
  3647  1077  3453               	retlw	83	;'S'
  3648  1078  3445               	retlw	69	;'E'
  3649  1079  3454               	retlw	84	;'T'
  3650  107A  3400               	retlw	0
  3651  107B                     STR_4:	
  3652  107B  340D               	retlw	13
  3653  107C  340A               	retlw	10
  3654  107D  3400               	retlw	0
  3655  107E                     STR_1:	
  3656  107E  342C               	retlw	44	;','
  3657  107F  3400               	retlw	0
  3658  107B                     
  3659                           ; #config settings
  3660  0000                     
  3661                           	psect	cinit
  3662  0026                     start_initialization:	
  3663  0026                     __initialization:	
  3664                           
  3665                           ; Clear objects allocated to COMMON
  3666  0026  01FA               	clrf	__pbssCOMMON& (0+127)
  3667  0027  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3668                           
  3669                           ; Clear objects allocated to BANK1
  3670  0028  30C8               	movlw	low __pbssBANK1
  3671  0029  0084               	movwf	4
  3672  002A  3000               	movlw	high __pbssBANK1
  3673  002B  0085               	movwf	5
  3674  002C  3024               	movlw	36
  3675  002D  3196  26B6  3180   	fcall	clear_ram0
  3676                           
  3677                           ; Clear objects allocated to BANK2
  3678  0030  3020               	movlw	low __pbssBANK2
  3679  0031  0084               	movwf	4
  3680  0032  3001               	movlw	high __pbssBANK2
  3681  0033  0085               	movwf	5
  3682  0034  3030               	movlw	48
  3683  0035  3196  26B6         	fcall	clear_ram0
  3684  0037                     end_of_initialization:	
  3685                           ;End of C runtime variable initialization code
  3686                           
  3687  0037                     __end_of__initialization:	
  3688  0037  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3689  0038  0020               	movlb	0
  3690  0039  3197  2F6C         	ljmp	_main	;jump to C main() function
  3691                           
  3692                           	psect	bssCOMMON
  3693  007A                     __pbssCOMMON:	
  3694  007A                     _CMD_Ptr:	
  3695  007A                     	ds	1
  3696  007B                     _eusartRxCount:	
  3697  007B                     	ds	1
  3698                           
  3699                           	psect	bssBANK1
  3700  00C8                     __pbssBANK1:	
  3701  00C8                     _eusartTxBuffer:	
  3702  00C8                     	ds	16
  3703  00D8                     _CMD_Reg:	
  3704  00D8                     	ds	3
  3705  00DB                     _errno:	
  3706  00DB                     	ds	2
  3707  00DD                     _Angle:	
  3708  00DD                     	ds	2
  3709  00DF                     strtok@sp:	
  3710  00DF                     	ds	1
  3711  00E0                     _eusartRxTail:	
  3712  00E0                     	ds	1
  3713  00E1                     _eusartRxHead:	
  3714  00E1                     	ds	1
  3715  00E2                     _eusartTxBufferRemaining:	
  3716  00E2                     	ds	1
  3717  00E3                     _eusartTxTail:	
  3718  00E3                     	ds	1
  3719  00E4                     _eusartTxHead:	
  3720  00E4                     	ds	1
  3721  00E5                     _CC_Reg:	
  3722  00E5                     	ds	7
  3723                           
  3724                           	psect	bssBANK2
  3725  0120                     __pbssBANK2:	
  3726  0120                     _eusartRxBuffer:	
  3727  0120                     	ds	16
  3728  0130                     _CMD_Buf:	
  3729  0130                     	ds	32
  3730                           
  3731                           	psect	clrtext
  3732  16B6                     clear_ram0:	
  3733                           ;	Called with FSR0 containing the base address, and
  3734                           ;	WREG with the size to clear
  3735                           
  3736  16B6  0064               	clrwdt	;clear the watchdog before getting into this loop
  3737  16B7                     clrloop0:	
  3738  16B7  0180               	clrf	0	;clear RAM location pointed to by FSR
  3739  16B8  3101               	addfsr 0,1
  3740  16B9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3741  16BA  2EB7               	goto	clrloop0	;have we reached the end yet?
  3742  16BB  3400               	retlw	0	;all done for this memory range, return
  3743                           
  3744                           	psect	cstackBANK1
  3745  00A0                     __pcstackBANK1:	
  3746  00A0                     floor@i:	
  3747                           
  3748                           ; 3 bytes @ 0x0
  3749  00A0                     	ds	3
  3750  00A3                     floor@expon:	
  3751                           
  3752                           ; 2 bytes @ 0x3
  3753  00A3                     	ds	2
  3754  00A5                     ?___ftsub:	
  3755  00A5                     ___ftsub@f2:	
  3756                           ; 3 bytes @ 0x5
  3757                           
  3758                           
  3759                           ; 3 bytes @ 0x5
  3760  00A5                     	ds	3
  3761  00A8                     ___ftsub@f1:	
  3762                           
  3763                           ; 3 bytes @ 0x8
  3764  00A8                     	ds	3
  3765  00AB                     ?_sin:	
  3766  00AB                     sin@f:	
  3767                           ; 3 bytes @ 0xB
  3768                           
  3769                           
  3770                           ; 3 bytes @ 0xB
  3771  00AB                     	ds	3
  3772  00AE                     sin@y:	
  3773                           
  3774                           ; 3 bytes @ 0xE
  3775  00AE                     	ds	3
  3776  00B1                     _sin$1303:	
  3777                           
  3778                           ; 3 bytes @ 0x11
  3779  00B1                     	ds	3
  3780  00B4                     sin@x2:	
  3781                           
  3782                           ; 3 bytes @ 0x14
  3783  00B4                     	ds	3
  3784  00B7                     sin@sgn:	
  3785                           
  3786                           ; 1 bytes @ 0x17
  3787  00B7                     	ds	1
  3788  00B8                     ?_MCP4922_Write:	
  3789  00B8                     MCP4922_Write@val:	
  3790                           ; 1 bytes @ 0x18
  3791                           
  3792                           
  3793                           ; 2 bytes @ 0x18
  3794  00B8                     	ds	2
  3795  00BA                     ??_CC_CheckRegister:	
  3796                           
  3797                           ; 1 bytes @ 0x1A
  3798  00BA                     	ds	4
  3799  00BE                     _CC_CheckRegister$1301:	
  3800                           
  3801                           ; 3 bytes @ 0x1E
  3802  00BE                     	ds	3
  3803  00C1                     _CC_CheckRegister$1302:	
  3804                           
  3805                           ; 3 bytes @ 0x21
  3806  00C1                     	ds	3
  3807  00C4                     CC_CheckRegister@buf:	
  3808                           
  3809                           ; 1 bytes @ 0x24
  3810  00C4                     	ds	1
  3811  00C5                     main@angle:	
  3812                           
  3813                           ; 3 bytes @ 0x25
  3814  00C5                     	ds	3
  3815                           
  3816                           	psect	cstackCOMMON
  3817  0070                     __pcstackCOMMON:	
  3818  0070                     ?_isdigit:	
  3819  0070                     ?_isspace:	
  3820                           ; 1 bit 
  3821                           
  3822  0070                     ?_isalpha:	
  3823                           ; 1 bit 
  3824                           
  3825  0070                     ?_isupper:	
  3826                           ; 1 bit 
  3827                           
  3828  0070                     ?_toupper:	
  3829                           ; 1 bit 
  3830                           
  3831  0070                     ?_EUSART_Read:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834  0070                     ?_OSCILLATOR_Initialize:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837  0070                     ?_WDT_Initialize:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840  0070                     ?_SPI1_Initialize:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0070                     ?_CMD_Receive:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846  0070                     ?_CC_CheckRegister:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849  0070                     ?_EUSART_Initialize:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852  0070                     ?_EUSART_Write:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0070                     ?_putch:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0070                     ?_EUSART_Transmit_ISR:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0070                     ??_EUSART_Transmit_ISR:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0070                     ?_EUSART_Receive_ISR:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0070                     ??_EUSART_Receive_ISR:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870  0070                     ?_PIN_MANAGER_Initialize:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  0070                     ?_SYSTEM_Initialize:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  0070                     ?_INTERRUPT_InterruptManager:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  0070                     ?_SPI1_Exchange8bit:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  0070                     ?_main:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  0070                     ?_CMD_Execute:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888                           
  3889                           ; 2 bytes @ 0x0
  3890  0070                     	ds	1
  3891  0071                     ??_INTERRUPT_InterruptManager:	
  3892                           
  3893                           ; 1 bytes @ 0x1
  3894  0071                     	ds	1
  3895  0072                     ?___ftge:	
  3896  0072                     ??_toupper:	
  3897                           ; 1 bit 
  3898                           
  3899  0072                     ??_EUSART_Read:	
  3900                           ; 1 bytes @ 0x2
  3901                           
  3902  0072                     ??_OSCILLATOR_Initialize:	
  3903                           ; 1 bytes @ 0x2
  3904                           
  3905  0072                     ??_WDT_Initialize:	
  3906                           ; 1 bytes @ 0x2
  3907                           
  3908  0072                     ??_SPI1_Initialize:	
  3909                           ; 1 bytes @ 0x2
  3910                           
  3911  0072                     ??_isdigit:	
  3912                           ; 1 bytes @ 0x2
  3913                           
  3914  0072                     ??_isspace:	
  3915                           ; 1 bytes @ 0x2
  3916                           
  3917  0072                     ??_isupper:	
  3918                           ; 1 bytes @ 0x2
  3919                           
  3920  0072                     ??_EUSART_Initialize:	
  3921                           ; 1 bytes @ 0x2
  3922                           
  3923  0072                     ??_EUSART_Write:	
  3924                           ; 1 bytes @ 0x2
  3925                           
  3926  0072                     ??_PIN_MANAGER_Initialize:	
  3927                           ; 1 bytes @ 0x2
  3928                           
  3929  0072                     ??_SPI1_Exchange8bit:	
  3930                           ; 1 bytes @ 0x2
  3931                           
  3932  0072                     ?___bmul:	
  3933                           ; 1 bytes @ 0x2
  3934                           
  3935  0072                     ?_strcmp:	
  3936                           ; 1 bytes @ 0x2
  3937                           
  3938  0072                     ?_strchr:	
  3939                           ; 2 bytes @ 0x2
  3940                           
  3941  0072                     ?_CMD_SetData:	
  3942                           ; 2 bytes @ 0x2
  3943                           
  3944  0072                     ?_CMD_GetData:	
  3945                           ; 2 bytes @ 0x2
  3946                           
  3947  0072                     ?___wmul:	
  3948                           ; 2 bytes @ 0x2
  3949                           
  3950  0072                     ?___lwdiv:	
  3951                           ; 2 bytes @ 0x2
  3952                           
  3953  0072                     ?___ftpack:	
  3954                           ; 2 bytes @ 0x2
  3955                           
  3956  0072                     ?_frexp:	
  3957                           ; 3 bytes @ 0x2
  3958                           
  3959  0072                     ?___ftneg:	
  3960                           ; 3 bytes @ 0x2
  3961                           
  3962  0072                     ?___lmul:	
  3963                           ; 3 bytes @ 0x2
  3964                           
  3965  0072                     CMD_SetData@data:	
  3966                           ; 4 bytes @ 0x2
  3967                           
  3968  0072                     CMD_GetData@data:	
  3969                           ; 1 bytes @ 0x2
  3970                           
  3971  0072                     PIN_MANAGER_Initialize@state:	
  3972                           ; 1 bytes @ 0x2
  3973                           
  3974  0072                     SPI1_Exchange8bit@data:	
  3975                           ; 1 bytes @ 0x2
  3976                           
  3977  0072                     ___bmul@multiplicand:	
  3978                           ; 1 bytes @ 0x2
  3979                           
  3980  0072                     _isdigit$907:	
  3981                           ; 1 bytes @ 0x2
  3982                           
  3983  0072                     _isspace$1070:	
  3984                           ; 1 bytes @ 0x2
  3985                           
  3986  0072                     _isupper$1073:	
  3987                           ; 1 bytes @ 0x2
  3988                           
  3989  0072                     ___wmul@multiplier:	
  3990                           ; 1 bytes @ 0x2
  3991                           
  3992  0072                     ___lwdiv@divisor:	
  3993                           ; 2 bytes @ 0x2
  3994                           
  3995  0072                     strcmp@s2:	
  3996                           ; 2 bytes @ 0x2
  3997                           
  3998  0072                     strchr@ptr:	
  3999                           ; 2 bytes @ 0x2
  4000                           
  4001  0072                     ___ftpack@arg:	
  4002                           ; 2 bytes @ 0x2
  4003                           
  4004  0072                     ___ftge@ff1:	
  4005                           ; 3 bytes @ 0x2
  4006                           
  4007  0072                     ___ftneg@f1:	
  4008                           ; 3 bytes @ 0x2
  4009                           
  4010  0072                     frexp@value:	
  4011                           ; 3 bytes @ 0x2
  4012                           
  4013  0072                     ___lmul@multiplier:	
  4014                           ; 3 bytes @ 0x2
  4015                           
  4016                           
  4017                           ; 4 bytes @ 0x2
  4018  0072                     	ds	1
  4019  0073                     ??_CMD_SetData:	
  4020  0073                     ??_SYSTEM_Initialize:	
  4021                           ; 1 bytes @ 0x3
  4022                           
  4023  0073                     ??___bmul:	
  4024                           ; 1 bytes @ 0x3
  4025                           
  4026  0073                     EUSART_Read@readValue:	
  4027                           ; 1 bytes @ 0x3
  4028                           
  4029  0073                     EUSART_Write@txData:	
  4030                           ; 1 bytes @ 0x3
  4031                           
  4032  0073                     isdigit@c:	
  4033                           ; 1 bytes @ 0x3
  4034                           
  4035  0073                     toupper@c:	
  4036                           ; 1 bytes @ 0x3
  4037                           
  4038  0073                     isspace@c:	
  4039                           ; 1 bytes @ 0x3
  4040                           
  4041  0073                     isupper@c:	
  4042                           ; 1 bytes @ 0x3
  4043                           
  4044                           
  4045                           ; 1 bytes @ 0x3
  4046  0073                     	ds	1
  4047  0074                     ??_strcmp:	
  4048  0074                     ??_isalpha:	
  4049                           ; 1 bytes @ 0x4
  4050                           
  4051  0074                     ??_CMD_GetData:	
  4052                           ; 1 bytes @ 0x4
  4053                           
  4054  0074                     ??_putch:	
  4055                           ; 1 bytes @ 0x4
  4056                           
  4057  0074                     CMD_SetData@addr:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060  0074                     putch@txData:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0074                     ___bmul@product:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0074                     _isalpha$1067:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069  0074                     ___wmul@multiplicand:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0074                     ___lwdiv@dividend:	
  4073                           ; 2 bytes @ 0x4
  4074                           
  4075  0074                     strchr@chr:	
  4076                           ; 2 bytes @ 0x4
  4077                           
  4078                           
  4079                           ; 2 bytes @ 0x4
  4080  0074                     	ds	1
  4081  0075                     ??___ftneg:	
  4082  0075                     CMD_GetData@addr:	
  4083                           ; 1 bytes @ 0x5
  4084                           
  4085  0075                     ___bmul@multiplier:	
  4086                           ; 1 bytes @ 0x5
  4087                           
  4088  0075                     ___ftpack@exp:	
  4089                           ; 1 bytes @ 0x5
  4090                           
  4091  0075                     strcmp@r:	
  4092                           ; 1 bytes @ 0x5
  4093                           
  4094  0075                     frexp@eptr:	
  4095                           ; 1 bytes @ 0x5
  4096                           
  4097  0075                     isalpha@c:	
  4098                           ; 1 bytes @ 0x5
  4099                           
  4100  0075                     ___ftge@ff2:	
  4101                           ; 1 bytes @ 0x5
  4102                           
  4103                           
  4104                           ; 3 bytes @ 0x5
  4105  0075                     	ds	1
  4106  0076                     ??_frexp:	
  4107  0076                     ??_strchr:	
  4108                           ; 1 bytes @ 0x6
  4109                           
  4110  0076                     ??___wmul:	
  4111                           ; 1 bytes @ 0x6
  4112                           
  4113  0076                     ??___lwdiv:	
  4114                           ; 1 bytes @ 0x6
  4115                           
  4116  0076                     ___ftpack@sign:	
  4117                           ; 1 bytes @ 0x6
  4118                           
  4119  0076                     strcmp@s1:	
  4120                           ; 1 bytes @ 0x6
  4121                           
  4122  0076                     ___wmul@product:	
  4123                           ; 1 bytes @ 0x6
  4124                           
  4125  0076                     ___lmul@multiplicand:	
  4126                           ; 2 bytes @ 0x6
  4127                           
  4128                           
  4129                           ; 4 bytes @ 0x6
  4130  0076                     	ds	1
  4131  0077                     ??___ftpack:	
  4132  0077                     ___lwdiv@quotient:	
  4133                           ; 1 bytes @ 0x7
  4134                           
  4135                           
  4136                           ; 2 bytes @ 0x7
  4137  0077                     	ds	2
  4138  0079                     ___lwdiv@counter:	
  4139  0079                     strtok@s1:	
  4140                           ; 1 bytes @ 0x9
  4141                           
  4142                           
  4143                           ; 1 bytes @ 0x9
  4144  0079                     	ds	1
  4145  007A                     ??_MCP4922_Write:	
  4146  007A                     ??_eval_poly:	
  4147                           ; 1 bytes @ 0xA
  4148                           
  4149  007A                     ??_main:	
  4150                           ; 1 bytes @ 0xA
  4151                           
  4152  007A                     ??___lmul:	
  4153                           ; 1 bytes @ 0xA
  4154                           
  4155  007A                     ??___ftsub:	
  4156                           ; 1 bytes @ 0xA
  4157                           
  4158                           
  4159                           	psect	cstackBANK0
  4160  0020                     __pcstackBANK0:	
  4161                           ; 1 bytes @ 0xA
  4162                           
  4163  0020                     ??___ftge:	
  4164  0020                     ?_strspn:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0020                     ?_strcspn:	
  4168                           ; 2 bytes @ 0x0
  4169                           
  4170  0020                     ?___lwmod:	
  4171                           ; 2 bytes @ 0x0
  4172                           
  4173  0020                     ?___awtoft:	
  4174                           ; 2 bytes @ 0x0
  4175                           
  4176  0020                     ?___lwtoft:	
  4177                           ; 3 bytes @ 0x0
  4178                           
  4179  0020                     ___awtoft@c:	
  4180                           ; 3 bytes @ 0x0
  4181                           
  4182  0020                     ___lwmod@divisor:	
  4183                           ; 2 bytes @ 0x0
  4184                           
  4185  0020                     ___lwtoft@c:	
  4186                           ; 2 bytes @ 0x0
  4187                           
  4188  0020                     strcspn@s2:	
  4189                           ; 2 bytes @ 0x0
  4190                           
  4191  0020                     strspn@s2:	
  4192                           ; 2 bytes @ 0x0
  4193                           
  4194  0020                     ___lmul@product:	
  4195                           ; 2 bytes @ 0x0
  4196                           
  4197                           
  4198                           ; 4 bytes @ 0x0
  4199  0020                     	ds	2
  4200  0022                     ??_strspn:	
  4201  0022                     ??_strcspn:	
  4202                           ; 1 bytes @ 0x2
  4203                           
  4204  0022                     ___lwmod@dividend:	
  4205                           ; 1 bytes @ 0x2
  4206                           
  4207                           
  4208                           ; 2 bytes @ 0x2
  4209  0022                     	ds	1
  4210  0023                     ??___awtoft:	
  4211  0023                     ??___lwtoft:	
  4212                           ; 1 bytes @ 0x3
  4213                           
  4214                           
  4215                           ; 1 bytes @ 0x3
  4216  0023                     	ds	1
  4217  0024                     ??___lwmod:	
  4218  0024                     ?_strtol:	
  4219                           ; 1 bytes @ 0x4
  4220                           
  4221  0024                     strtol@endptr:	
  4222                           ; 4 bytes @ 0x4
  4223                           
  4224  0024                     strcspn@i:	
  4225                           ; 1 bytes @ 0x4
  4226                           
  4227  0024                     strspn@i:	
  4228                           ; 2 bytes @ 0x4
  4229                           
  4230                           
  4231                           ; 2 bytes @ 0x4
  4232  0024                     	ds	1
  4233  0025                     ___awtoft@sign:	
  4234  0025                     ___lwmod@counter:	
  4235                           ; 1 bytes @ 0x5
  4236                           
  4237  0025                     strtol@base:	
  4238                           ; 1 bytes @ 0x5
  4239                           
  4240                           
  4241                           ; 2 bytes @ 0x5
  4242  0025                     	ds	1
  4243  0026                     ?_printf:	
  4244  0026                     ?___ftdiv:	
  4245                           ; 2 bytes @ 0x6
  4246                           
  4247  0026                     strcspn@s1:	
  4248                           ; 3 bytes @ 0x6
  4249                           
  4250  0026                     strspn@s1:	
  4251                           ; 1 bytes @ 0x6
  4252                           
  4253  0026                     printf@f:	
  4254                           ; 1 bytes @ 0x6
  4255                           
  4256  0026                     ___ftdiv@f2:	
  4257                           ; 2 bytes @ 0x6
  4258                           
  4259                           
  4260                           ; 3 bytes @ 0x6
  4261  0026                     	ds	1
  4262  0027                     ?_strtok:	
  4263  0027                     strtok@s2:	
  4264                           ; 1 bytes @ 0x7
  4265                           
  4266                           
  4267                           ; 2 bytes @ 0x7
  4268  0027                     	ds	1
  4269  0028                     ??_strtol:	
  4270                           
  4271                           ; 1 bytes @ 0x8
  4272  0028                     	ds	1
  4273  0029                     ??_strtok:	
  4274  0029                     ___ftdiv@f1:	
  4275                           ; 1 bytes @ 0x9
  4276                           
  4277                           
  4278                           ; 3 bytes @ 0x9
  4279  0029                     	ds	3
  4280  002C                     ??___ftdiv:	
  4281  002C                     ?_Split:	
  4282                           ; 1 bytes @ 0xC
  4283                           
  4284  002C                     strtol@sign:	
  4285                           ; 2 bytes @ 0xC
  4286                           
  4287  002C                     Split@delimiter:	
  4288                           ; 1 bytes @ 0xC
  4289                           
  4290                           
  4291                           ; 2 bytes @ 0xC
  4292  002C                     	ds	1
  4293  002D                     strtol@a:	
  4294                           
  4295                           ; 4 bytes @ 0xD
  4296  002D                     	ds	1
  4297  002E                     ??_printf:	
  4298  002E                     Split@out:	
  4299                           ; 1 bytes @ 0xE
  4300                           
  4301                           
  4302                           ; 1 bytes @ 0xE
  4303  002E                     	ds	1
  4304  002F                     ??_Split:	
  4305                           
  4306                           ; 1 bytes @ 0xF
  4307  002F                     	ds	1
  4308  0030                     ___ftdiv@cntr:	
  4309                           
  4310                           ; 1 bytes @ 0x10
  4311  0030                     	ds	1
  4312  0031                     Split@str:	
  4313  0031                     strtol@s:	
  4314                           ; 1 bytes @ 0x11
  4315                           
  4316  0031                     ___ftdiv@f3:	
  4317                           ; 1 bytes @ 0x11
  4318                           
  4319                           
  4320                           ; 3 bytes @ 0x11
  4321  0031                     	ds	1
  4322  0032                     printf@idx:	
  4323  0032                     strtol@c:	
  4324                           ; 1 bytes @ 0x12
  4325                           
  4326  0032                     Split@cnt:	
  4327                           ; 1 bytes @ 0x12
  4328                           
  4329                           
  4330                           ; 2 bytes @ 0x12
  4331  0032                     	ds	1
  4332  0033                     ?_ParseLong:	
  4333  0033                     ParseLong@ret:	
  4334                           ; 2 bytes @ 0x13
  4335                           
  4336  0033                     printf@cp:	
  4337                           ; 1 bytes @ 0x13
  4338                           
  4339                           
  4340                           ; 2 bytes @ 0x13
  4341  0033                     	ds	1
  4342  0034                     Split@tok:	
  4343  0034                     ___ftdiv@exp:	
  4344                           ; 1 bytes @ 0x14
  4345                           
  4346  0034                     ParseLong@base:	
  4347                           ; 1 bytes @ 0x14
  4348                           
  4349                           
  4350                           ; 2 bytes @ 0x14
  4351  0034                     	ds	1
  4352  0035                     printf@ap:	
  4353  0035                     ___ftdiv@sign:	
  4354                           ; 1 bytes @ 0x15
  4355                           
  4356                           
  4357                           ; 1 bytes @ 0x15
  4358  0035                     	ds	1
  4359  0036                     ??_ParseLong:	
  4360  0036                     ?___ftmul:	
  4361                           ; 1 bytes @ 0x16
  4362                           
  4363  0036                     printf@len:	
  4364                           ; 3 bytes @ 0x16
  4365                           
  4366  0036                     ___ftmul@f1:	
  4367                           ; 2 bytes @ 0x16
  4368                           
  4369                           
  4370                           ; 3 bytes @ 0x16
  4371  0036                     	ds	1
  4372  0037                     ParseLong@str:	
  4373                           
  4374                           ; 1 bytes @ 0x17
  4375  0037                     	ds	1
  4376  0038                     ParseLong@end:	
  4377  0038                     printf@val:	
  4378                           ; 1 bytes @ 0x18
  4379                           
  4380                           
  4381                           ; 2 bytes @ 0x18
  4382  0038                     	ds	1
  4383  0039                     ?_ParseUByte:	
  4384  0039                     ParseUByte@ret:	
  4385                           ; 2 bytes @ 0x19
  4386                           
  4387  0039                     ___ftmul@f2:	
  4388                           ; 1 bytes @ 0x19
  4389                           
  4390                           
  4391                           ; 3 bytes @ 0x19
  4392  0039                     	ds	1
  4393  003A                     ParseUByte@base:	
  4394  003A                     printf@flag:	
  4395                           ; 2 bytes @ 0x1A
  4396                           
  4397                           
  4398                           ; 2 bytes @ 0x1A
  4399  003A                     	ds	2
  4400  003C                     ??_ParseUByte:	
  4401  003C                     ??___ftmul:	
  4402                           ; 1 bytes @ 0x1C
  4403                           
  4404  003C                     printf@width:	
  4405                           ; 1 bytes @ 0x1C
  4406                           
  4407                           
  4408                           ; 2 bytes @ 0x1C
  4409  003C                     	ds	1
  4410  003D                     ParseUByte@str:	
  4411                           
  4412                           ; 1 bytes @ 0x1D
  4413  003D                     	ds	1
  4414  003E                     printf@prec:	
  4415  003E                     ParseUByte@val:	
  4416                           ; 1 bytes @ 0x1E
  4417                           
  4418                           
  4419                           ; 2 bytes @ 0x1E
  4420  003E                     	ds	1
  4421  003F                     printf@c:	
  4422                           
  4423                           ; 1 bytes @ 0x1F
  4424  003F                     	ds	1
  4425  0040                     ??_CMD_Execute:	
  4426  0040                     ___ftmul@exp:	
  4427                           ; 1 bytes @ 0x20
  4428                           
  4429                           
  4430                           ; 1 bytes @ 0x20
  4431  0040                     	ds	1
  4432  0041                     ___ftmul@f3_as_product:	
  4433                           
  4434                           ; 3 bytes @ 0x21
  4435  0041                     	ds	1
  4436  0042                     CMD_Execute@cmd:	
  4437                           
  4438                           ; 1 bytes @ 0x22
  4439  0042                     	ds	1
  4440  0043                     CMD_Execute@buf:	
  4441                           
  4442                           ; 3 bytes @ 0x23
  4443  0043                     	ds	1
  4444  0044                     ___ftmul@cntr:	
  4445                           
  4446                           ; 1 bytes @ 0x24
  4447  0044                     	ds	1
  4448  0045                     ___ftmul@sign:	
  4449                           
  4450                           ; 1 bytes @ 0x25
  4451  0045                     	ds	1
  4452  0046                     ?___ftadd:	
  4453  0046                     CMD_Execute@val:	
  4454                           ; 3 bytes @ 0x26
  4455                           
  4456  0046                     ___ftadd@f1:	
  4457                           ; 1 bytes @ 0x26
  4458                           
  4459                           
  4460                           ; 3 bytes @ 0x26
  4461  0046                     	ds	1
  4462  0047                     CMD_Execute@cnt:	
  4463                           
  4464                           ; 1 bytes @ 0x27
  4465  0047                     	ds	1
  4466  0048                     CMD_Execute@addr:	
  4467                           
  4468                           ; 1 bytes @ 0x28
  4469  0048                     	ds	1
  4470  0049                     ??_CMD_Receive:	
  4471  0049                     ___ftadd@f2:	
  4472                           ; 1 bytes @ 0x29
  4473                           
  4474                           
  4475                           ; 3 bytes @ 0x29
  4476  0049                     	ds	3
  4477  004C                     ??___ftadd:	
  4478                           
  4479                           ; 1 bytes @ 0x2C
  4480  004C                     	ds	4
  4481  0050                     ___ftadd@sign:	
  4482                           
  4483                           ; 1 bytes @ 0x30
  4484  0050                     	ds	1
  4485  0051                     ___ftadd@exp2:	
  4486                           
  4487                           ; 1 bytes @ 0x31
  4488  0051                     	ds	1
  4489  0052                     ___ftadd@exp1:	
  4490                           
  4491                           ; 1 bytes @ 0x32
  4492  0052                     	ds	1
  4493  0053                     ?_eval_poly:	
  4494  0053                     ?___fttol:	
  4495                           ; 3 bytes @ 0x33
  4496                           
  4497  0053                     ___fttol@f1:	
  4498                           ; 4 bytes @ 0x33
  4499                           
  4500  0053                     eval_poly@x:	
  4501                           ; 3 bytes @ 0x33
  4502                           
  4503                           
  4504                           ; 3 bytes @ 0x33
  4505  0053                     	ds	3
  4506  0056                     eval_poly@d:	
  4507                           
  4508                           ; 2 bytes @ 0x36
  4509  0056                     	ds	1
  4510  0057                     ??___fttol:	
  4511                           
  4512                           ; 1 bytes @ 0x37
  4513  0057                     	ds	1
  4514  0058                     eval_poly@n:	
  4515                           
  4516                           ; 2 bytes @ 0x38
  4517  0058                     	ds	2
  4518  005A                     eval_poly@res:	
  4519                           
  4520                           ; 3 bytes @ 0x3A
  4521  005A                     	ds	1
  4522  005B                     ___fttol@sign1:	
  4523                           
  4524                           ; 1 bytes @ 0x3B
  4525  005B                     	ds	1
  4526  005C                     ___fttol@lval:	
  4527                           
  4528                           ; 4 bytes @ 0x3C
  4529  005C                     	ds	4
  4530  0060                     ___fttol@exp1:	
  4531                           
  4532                           ; 1 bytes @ 0x40
  4533  0060                     	ds	1
  4534  0061                     ?___altoft:	
  4535  0061                     ___altoft@c:	
  4536                           ; 3 bytes @ 0x41
  4537                           
  4538                           
  4539                           ; 4 bytes @ 0x41
  4540  0061                     	ds	4
  4541  0065                     ??___altoft:	
  4542                           
  4543                           ; 1 bytes @ 0x45
  4544  0065                     	ds	2
  4545  0067                     ___altoft@exp:	
  4546                           
  4547                           ; 1 bytes @ 0x47
  4548  0067                     	ds	1
  4549  0068                     ___altoft@sign:	
  4550                           
  4551                           ; 1 bytes @ 0x48
  4552  0068                     	ds	1
  4553  0069                     ?_floor:	
  4554  0069                     floor@x:	
  4555                           ; 3 bytes @ 0x49
  4556                           
  4557                           
  4558                           ; 3 bytes @ 0x49
  4559  0069                     	ds	3
  4560  006C                     ??_floor:	
  4561                           
  4562                           ; 1 bytes @ 0x4C
  4563  006C                     	ds	1
  4564  006D                     ??_sin:	
  4565                           
  4566                           ; 1 bytes @ 0x4D
  4567  006D                     	ds	1
  4568                           
  4569                           	psect	maintext
  4570  176C                     __pmaintext:	
  4571 ;;
  4572 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4573 ;;
  4574 ;; *************** function _main *****************
  4575 ;; Defined at:
  4576 ;;		line 58 in file "main.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  angle           3   37[BANK1 ] PTR const unsigned char 
  4581 ;;  buf             1    0        unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : B1F/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;Total ram usage:        3 bytes
  4596 ;; Hardware stack levels required when called:    9
  4597 ;; This function calls:
  4598 ;;		_CC_CheckRegister
  4599 ;;		_CMD_Receive
  4600 ;;		_SYSTEM_Initialize
  4601 ;; This function is called by:
  4602 ;;		Startup code after reset
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _main
  4608  176C                     _main:	
  4609                           
  4610                           ;main.c: 61: SYSTEM_Initialize();
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4614  176C  3197  2728  3197   	fcall	_SYSTEM_Initialize
  4615                           
  4616                           ;main.c: 66: (INTCONbits.GIE = 1);
  4617  176F  178B               	bsf	11,7	;volatile
  4618                           
  4619                           ;main.c: 69: (INTCONbits.PEIE = 1);
  4620  1770  170B               	bsf	11,6	;volatile
  4621                           
  4622                           ;main.c: 77: uint8_t buf;
  4623                           ;main.c: 78: double angle = 0;
  4624  1771  3000               	movlw	0
  4625  1772  0021               	movlb	1	; select bank1
  4626  1773  00C5               	movwf	main@angle^(0+128)
  4627  1774  3000               	movlw	0
  4628  1775  00C6               	movwf	(main@angle+1)^(0+128)
  4629  1776  3000               	movlw	0
  4630  1777  00C7               	movwf	(main@angle+2)^(0+128)
  4631  1778                     l4580:	
  4632                           ;main.c: 80: while (1)
  4633                           
  4634                           
  4635                           ;main.c: 81: {
  4636                           ;main.c: 83: CMD_Receive();
  4637  1778  318A  22F0  3197   	fcall	_CMD_Receive
  4638                           
  4639                           ;main.c: 84: CC_CheckRegister();
  4640  177B  3184  24CD  3197   	fcall	_CC_CheckRegister
  4641  177E  2F78               	goto	l4580
  4642  177F                     __end_of_main:	
  4643                           
  4644                           	psect	text1
  4645  1728                     __ptext1:	
  4646 ;; *************** function _SYSTEM_Initialize *****************
  4647 ;; Defined at:
  4648 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;Total ram usage:        0 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    3
  4669 ;; This function calls:
  4670 ;;		_EUSART_Initialize
  4671 ;;		_OSCILLATOR_Initialize
  4672 ;;		_PIN_MANAGER_Initialize
  4673 ;;		_SPI1_Initialize
  4674 ;;		_WDT_Initialize
  4675 ;; This function is called by:
  4676 ;;		_main
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           
  4681                           ;psect for function _SYSTEM_Initialize
  4682  1728                     _SYSTEM_Initialize:	
  4683                           
  4684                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4688  1728  318B  2331  3197   	fcall	_PIN_MANAGER_Initialize
  4689                           
  4690                           ;mcc.c: 80: OSCILLATOR_Initialize();
  4691  172B  3196  26D5  3197   	fcall	_OSCILLATOR_Initialize
  4692                           
  4693                           ;mcc.c: 81: WDT_Initialize();
  4694  172E  3187  27FC  3197   	fcall	_WDT_Initialize
  4695                           
  4696                           ;mcc.c: 82: SPI1_Initialize();
  4697  1731  3196  26C4  3197   	fcall	_SPI1_Initialize
  4698                           
  4699                           ;mcc.c: 83: EUSART_Initialize();
  4700  1734  3197  27B0         	fcall	_EUSART_Initialize
  4701  1736  0008               	return
  4702  1737                     __end_of_SYSTEM_Initialize:	
  4703                           
  4704                           	psect	text2
  4705  07FC                     __ptext2:	
  4706 ;; *************** function _WDT_Initialize *****************
  4707 ;; Defined at:
  4708 ;;		line 106 in file "mcc_generated_files/mcc.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;Total ram usage:        0 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    2
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_SYSTEM_Initialize
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _WDT_Initialize
  4738  07FC                     _WDT_Initialize:	
  4739                           
  4740                           ;mcc.c: 109: WDTCON = 0x16;
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _WDT_Initialize: [wreg]
  4744  07FC  3016               	movlw	22
  4745  07FD  0021               	movlb	1	; select bank1
  4746  07FE  0097               	movwf	23	;volatile
  4747  07FF  0008               	return
  4748  0800                     __end_of_WDT_Initialize:	
  4749                           
  4750                           	psect	text3
  4751  16C4                     __ptext3:	
  4752 ;; *************** function _SPI1_Initialize *****************
  4753 ;; Defined at:
  4754 ;;		line 63 in file "mcc_generated_files/spi1.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    2
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_SYSTEM_Initialize
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _SPI1_Initialize
  4784  16C4                     _SPI1_Initialize:	
  4785                           
  4786                           ;spi1.c: 68: SSP1STAT = 0xC0;
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _SPI1_Initialize: [wreg]
  4790  16C4  30C0               	movlw	192
  4791  16C5  0024               	movlb	4	; select bank4
  4792  16C6  0094               	movwf	20	;volatile
  4793                           
  4794                           ;spi1.c: 71: SSP1CON1 = 0x22;
  4795  16C7  3022               	movlw	34
  4796  16C8  0095               	movwf	21	;volatile
  4797                           
  4798                           ;spi1.c: 74: SSP1ADD = 0x32;
  4799  16C9  3032               	movlw	50
  4800  16CA  0092               	movwf	18	;volatile
  4801  16CB  0008               	return
  4802  16CC                     __end_of_SPI1_Initialize:	
  4803                           
  4804                           	psect	text4
  4805  0B31                     __ptext4:	
  4806 ;; *************** function _PIN_MANAGER_Initialize *****************
  4807 ;; Defined at:
  4808 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  state           1    2[COMMON] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        1 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    2
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_SYSTEM_Initialize
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _PIN_MANAGER_Initialize
  4838  0B31                     _PIN_MANAGER_Initialize:	
  4839                           
  4840                           ;pin_manager.c: 56: LATA = 0x00;
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4844  0B31  0022               	movlb	2	; select bank2
  4845  0B32  018C               	clrf	12	;volatile
  4846                           
  4847                           ;pin_manager.c: 57: LATC = 0x04;
  4848  0B33  3004               	movlw	4
  4849  0B34  008E               	movwf	14	;volatile
  4850                           
  4851                           ;pin_manager.c: 62: TRISA = 0x32;
  4852  0B35  3032               	movlw	50
  4853  0B36  0021               	movlb	1	; select bank1
  4854  0B37  008C               	movwf	12	;volatile
  4855                           
  4856                           ;pin_manager.c: 63: TRISC = 0x20;
  4857  0B38  3020               	movlw	32
  4858  0B39  008E               	movwf	14	;volatile
  4859                           
  4860                           ;pin_manager.c: 68: ANSELC = 0x00;
  4861  0B3A  0023               	movlb	3	; select bank3
  4862  0B3B  018E               	clrf	14	;volatile
  4863                           
  4864                           ;pin_manager.c: 69: ANSELA = 0x32;
  4865  0B3C  3032               	movlw	50
  4866  0B3D  008C               	movwf	12	;volatile
  4867                           
  4868                           ;pin_manager.c: 74: WPUA = 0x00;
  4869  0B3E  0024               	movlb	4	; select bank4
  4870  0B3F  018C               	clrf	12	;volatile
  4871                           
  4872                           ;pin_manager.c: 75: WPUC = 0x00;
  4873  0B40  018E               	clrf	14	;volatile
  4874                           
  4875                           ;pin_manager.c: 80: ODCONA = 0x00;
  4876  0B41  0025               	movlb	5	; select bank5
  4877  0B42  018C               	clrf	12	;volatile
  4878                           
  4879                           ;pin_manager.c: 81: ODCONC = 0x00;
  4880  0B43  018E               	clrf	14	;volatile
  4881                           
  4882                           ;pin_manager.c: 88: bool state = GIE;
  4883  0B44  3000               	movlw	0
  4884  0B45  1B8B               	btfsc	11,7	;volatile
  4885  0B46  3001               	movlw	1
  4886  0B47  00F2               	movwf	PIN_MANAGER_Initialize@state
  4887                           
  4888                           ;pin_manager.c: 89: GIE = 0;
  4889  0B48  138B               	bcf	11,7	;volatile
  4890                           
  4891                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  4892  0B49  3055               	movlw	85
  4893  0B4A  003C               	movlb	28	; select bank28
  4894  0B4B  008F               	movwf	15	;volatile
  4895                           
  4896                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  4897  0B4C  30AA               	movlw	170
  4898  0B4D  008F               	movwf	15	;volatile
  4899                           
  4900                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  4901  0B4E  100F               	bcf	15,0	;volatile
  4902                           
  4903                           ;pin_manager.c: 94: RC1PPSbits.RC1PPS = 0x19;
  4904  0B4F  003D               	movlb	29	; select bank29
  4905  0B50  0821               	movf	33,w	;volatile
  4906  0B51  39E0               	andlw	-32
  4907  0B52  3819               	iorlw	25
  4908  0B53  00A1               	movwf	33	;volatile
  4909                           
  4910                           ;pin_manager.c: 95: SSP1CLKPPSbits.SSP1CLKPPS = 0x10;
  4911  0B54  003C               	movlb	28	; select bank28
  4912  0B55  0820               	movf	32,w	;volatile
  4913  0B56  39E0               	andlw	-32
  4914  0B57  3810               	iorlw	16
  4915  0B58  00A0               	movwf	32	;volatile
  4916                           
  4917                           ;pin_manager.c: 96: SSP1DATPPSbits.SSP1DATPPS = 0x11;
  4918  0B59  0821               	movf	33,w	;volatile
  4919  0B5A  39E0               	andlw	-32
  4920  0B5B  3811               	iorlw	17
  4921  0B5C  00A1               	movwf	33	;volatile
  4922                           
  4923                           ;pin_manager.c: 97: RXPPSbits.RXPPS = 0x15;
  4924  0B5D  0824               	movf	36,w	;volatile
  4925  0B5E  39E0               	andlw	-32
  4926  0B5F  3815               	iorlw	21
  4927  0B60  00A4               	movwf	36	;volatile
  4928                           
  4929                           ;pin_manager.c: 98: RC4PPSbits.RC4PPS = 0x14;
  4930  0B61  003D               	movlb	29	; select bank29
  4931  0B62  0824               	movf	36,w	;volatile
  4932  0B63  39E0               	andlw	-32
  4933  0B64  3814               	iorlw	20
  4934  0B65  00A4               	movwf	36	;volatile
  4935                           
  4936                           ;pin_manager.c: 99: RC0PPSbits.RC0PPS = 0x18;
  4937  0B66  0820               	movf	32,w	;volatile
  4938  0B67  39E0               	andlw	-32
  4939  0B68  3818               	iorlw	24
  4940  0B69  00A0               	movwf	32	;volatile
  4941                           
  4942                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  4943  0B6A  3055               	movlw	85
  4944  0B6B  003C               	movlb	28	; select bank28
  4945  0B6C  008F               	movwf	15	;volatile
  4946                           
  4947                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  4948  0B6D  30AA               	movlw	170
  4949  0B6E  008F               	movwf	15	;volatile
  4950                           
  4951                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  4952  0B6F  140F               	bsf	15,0	;volatile
  4953                           
  4954                           ;pin_manager.c: 105: GIE = state;
  4955  0B70  1C72               	btfss	PIN_MANAGER_Initialize@state,0
  4956  0B71  2B74               	goto	u4520
  4957  0B72  178B               	bsf	11,7	;volatile
  4958  0B73  0008               	return
  4959  0B74                     u4520:	
  4960  0B74  138B               	bcf	11,7	;volatile
  4961  0B75  0008               	return
  4962  0B76                     __end_of_PIN_MANAGER_Initialize:	
  4963                           
  4964                           	psect	text5
  4965  16D5                     __ptext5:	
  4966 ;; *************** function _OSCILLATOR_Initialize *****************
  4967 ;; Defined at:
  4968 ;;		line 86 in file "mcc_generated_files/mcc.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    2
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_SYSTEM_Initialize
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _OSCILLATOR_Initialize
  4998  16D5                     _OSCILLATOR_Initialize:	
  4999                           
  5000                           ;mcc.c: 89: OSCCON1 = 0x02;
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5004  16D5  3002               	movlw	2
  5005  16D6  0032               	movlb	18	; select bank18
  5006  16D7  0099               	movwf	25	;volatile
  5007                           
  5008                           ;mcc.c: 91: OSCCON3 = 0x00;
  5009  16D8  019B               	clrf	27	;volatile
  5010                           
  5011                           ;mcc.c: 93: OSCEN = 0x00;
  5012  16D9  019D               	clrf	29	;volatile
  5013                           
  5014                           ;mcc.c: 95: OSCFRQ = 0x06;
  5015  16DA  3006               	movlw	6
  5016  16DB  009F               	movwf	31	;volatile
  5017                           
  5018                           ;mcc.c: 97: OSCTUNE = 0x00;
  5019  16DC  019E               	clrf	30	;volatile
  5020  16DD                     l261:	
  5021                           ;mcc.c: 102: {
  5022                           
  5023                           ;mcc.c: 101: while(PLLR == 0)
  5024                           
  5025  16DD  181C               	btfsc	28,0	;volatile
  5026  16DE  0008               	return
  5027  16DF  2EDD               	goto	l261
  5028  16E0                     __end_of_OSCILLATOR_Initialize:	
  5029                           
  5030                           	psect	text6
  5031  17B0                     __ptext6:	
  5032 ;; *************** function _EUSART_Initialize *****************
  5033 ;; Defined at:
  5034 ;;		line 75 in file "mcc_generated_files/eusart.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        1 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    2
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_SYSTEM_Initialize
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _EUSART_Initialize
  5064  17B0                     _EUSART_Initialize:	
  5065                           
  5066                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  5070  17B0  0021               	movlb	1	; select bank1
  5071  17B1  1291               	bcf	17,5	;volatile
  5072                           
  5073                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  5074  17B2  1211               	bcf	17,4	;volatile
  5075                           
  5076                           ;eusart.c: 84: BAUD1CON = 0x0A;
  5077  17B3  300A               	movlw	10
  5078  17B4  0023               	movlb	3	; select bank3
  5079  17B5  009F               	movwf	31	;volatile
  5080                           
  5081                           ;eusart.c: 87: RC1STA = 0x90;
  5082  17B6  3090               	movlw	144
  5083  17B7  009D               	movwf	29	;volatile
  5084                           
  5085                           ;eusart.c: 90: TX1STA = 0x24;
  5086  17B8  3024               	movlw	36
  5087  17B9  009E               	movwf	30	;volatile
  5088                           
  5089                           ;eusart.c: 93: SP1BRGL = 0xCF;
  5090  17BA  30CF               	movlw	207
  5091  17BB  009B               	movwf	27	;volatile
  5092                           
  5093                           ;eusart.c: 96: SP1BRGH = 0x00;
  5094  17BC  019C               	clrf	28	;volatile
  5095                           
  5096                           ;eusart.c: 100: eusartTxHead = 0;
  5097  17BD  0021               	movlb	1	; select bank1
  5098  17BE  01E4               	clrf	_eusartTxHead^(0+128)
  5099                           
  5100                           ;eusart.c: 101: eusartTxTail = 0;
  5101  17BF  01E3               	clrf	_eusartTxTail^(0+128)
  5102                           
  5103                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  5104  17C0  3010               	movlw	16
  5105  17C1  00F2               	movwf	??_EUSART_Initialize
  5106  17C2  0872               	movf	??_EUSART_Initialize,w
  5107  17C3  00E2               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5108                           
  5109                           ;eusart.c: 104: eusartRxHead = 0;
  5110  17C4  01E1               	clrf	_eusartRxHead^(0+128)
  5111                           
  5112                           ;eusart.c: 105: eusartRxTail = 0;
  5113  17C5  01E0               	clrf	_eusartRxTail^(0+128)
  5114                           
  5115                           ;eusart.c: 106: eusartRxCount = 0;
  5116  17C6  01FB               	clrf	_eusartRxCount	;volatile
  5117                           
  5118                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  5119  17C7  1691               	bsf	17,5	;volatile
  5120  17C8  0008               	return
  5121  17C9                     __end_of_EUSART_Initialize:	
  5122                           
  5123                           	psect	text7
  5124  0AF0                     __ptext7:	
  5125 ;; *************** function _CMD_Receive *****************
  5126 ;; Defined at:
  5127 ;;		line 46 in file "command.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;		None
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;		None
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  1    wreg      void 
  5134 ;; Registers used:
  5135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;Total ram usage:        1 bytes
  5146 ;; Hardware stack levels used:    1
  5147 ;; Hardware stack levels required when called:    8
  5148 ;; This function calls:
  5149 ;;		_CMD_Execute
  5150 ;;		_EUSART_Read
  5151 ;;		_toupper
  5152 ;; This function is called by:
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _CMD_Receive
  5159  0AF0                     _CMD_Receive:	
  5160                           
  5161                           ;command.c: 47: if((eusartRxCount)){
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _CMD_Receive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5165  0AF0  087B               	movf	_eusartRxCount,w	;volatile
  5166  0AF1  1903               	btfsc	3,2
  5167  0AF2  0008               	return
  5168                           
  5169                           ;command.c: 49: CMD_Buf[CMD_Ptr] = toupper(EUSART_Read());
  5170                           
  5171                           ;command.c: 48: do{
  5172  0AF3  3188  2032  318A   	fcall	_EUSART_Read
  5173  0AF6  3197  2719  318A   	fcall	_toupper
  5174  0AF9  0020               	movlb	0	; select bank0
  5175  0AFA  00C9               	movwf	??_CMD_Receive
  5176  0AFB  087A               	movf	_CMD_Ptr,w
  5177  0AFC  3E30               	addlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5178  0AFD  0086               	movwf	6
  5179  0AFE  3001               	movlw	1	; select bank2/3
  5180  0AFF  0087               	movwf	7
  5181  0B00  0849               	movf	??_CMD_Receive,w
  5182  0B01  0081               	movwf	1
  5183                           
  5184                           ;command.c: 50: CMD_Buf[CMD_Ptr+1] = '\0';
  5185  0B02  087A               	movf	_CMD_Ptr,w
  5186  0B03  3E01               	addlw	1
  5187  0B04  3E30               	addlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5188  0B05  0086               	movwf	6
  5189  0B06  3001               	movlw	1	; select bank2/3
  5190  0B07  0087               	movwf	7
  5191  0B08  0181               	clrf	1
  5192                           
  5193                           ;command.c: 51: if(CMD_Ptr > 0 && CMD_Buf[CMD_Ptr - 1] == '\r' && CMD_Buf[CMD_Ptr] == '\
      +                          n'){
  5194  0B09  087A               	movf	_CMD_Ptr,w
  5195  0B0A  1903               	btfsc	3,2
  5196  0B0B  2B2B               	goto	l4510
  5197  0B0C  087A               	movf	_CMD_Ptr,w
  5198  0B0D  3EFF               	addlw	255
  5199  0B0E  3E30               	addlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5200  0B0F  0086               	movwf	6
  5201  0B10  3001               	movlw	1	; select bank2/3
  5202  0B11  0087               	movwf	7
  5203  0B12  300D               	movlw	13
  5204  0B13  0601               	xorwf	1,w
  5205  0B14  1D03               	btfss	3,2
  5206  0B15  2B2B               	goto	l4510
  5207  0B16  087A               	movf	_CMD_Ptr,w
  5208  0B17  3E30               	addlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5209  0B18  0086               	movwf	6
  5210  0B19  3001               	movlw	1	; select bank2/3
  5211  0B1A  0087               	movwf	7
  5212  0B1B  300A               	movlw	10
  5213  0B1C  0601               	xorwf	1,w
  5214  0B1D  1D03               	btfss	3,2
  5215  0B1E  2B2B               	goto	l4510
  5216                           
  5217                           ;command.c: 52: CMD_Buf[CMD_Ptr - 1] = '\0';
  5218  0B1F  087A               	movf	_CMD_Ptr,w
  5219  0B20  3EFF               	addlw	255
  5220  0B21  3E30               	addlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5221  0B22  0086               	movwf	6
  5222  0B23  3001               	movlw	1	; select bank2/3
  5223  0B24  0087               	movwf	7
  5224  0B25  0181               	clrf	1
  5225                           
  5226                           ;command.c: 53: CMD_Execute(CMD_Buf);
  5227  0B26  3030               	movlw	(low (_CMD_Buf| (0+256)))& (0+255)
  5228  0B27  3187  271D         	fcall	_CMD_Execute
  5229                           
  5230                           ;command.c: 54: CMD_Ptr = 0;
  5231  0B29  01FA               	clrf	_CMD_Ptr
  5232                           
  5233                           ;command.c: 55: break;
  5234  0B2A  0008               	return
  5235  0B2B                     l4510:	
  5236                           
  5237                           ;command.c: 56: }
  5238                           ;command.c: 57: CMD_Ptr++;
  5239  0B2B  3001               	movlw	1
  5240  0B2C  0020               	movlb	0	; select bank0
  5241  0B2D  00C9               	movwf	??_CMD_Receive
  5242  0B2E  0849               	movf	??_CMD_Receive,w
  5243  0B2F  07FA               	addwf	_CMD_Ptr,f
  5244  0B30  2AF0               	goto	_CMD_Receive
  5245  0B31                     __end_of_CMD_Receive:	
  5246                           ;command.c: 58: }while((eusartRxCount));
  5247                           
  5248                           
  5249                           	psect	text8
  5250  0832                     __ptext8:	
  5251 ;; *************** function _EUSART_Read *****************
  5252 ;; Defined at:
  5253 ;;		line 112 in file "mcc_generated_files/eusart.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;		None
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  readValue       1    3[COMMON] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      unsigned char 
  5260 ;; Registers used:
  5261 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;Total ram usage:        2 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    2
  5274 ;; This function calls:
  5275 ;;		Nothing
  5276 ;; This function is called by:
  5277 ;;		_CMD_Receive
  5278 ;;		_getch
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _EUSART_Read
  5284  0832                     _EUSART_Read:	
  5285                           
  5286                           ;eusart.c: 114: uint8_t readValue = 0;
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5290  0832  01F3               	clrf	EUSART_Read@readValue
  5291  0833                     l3412:	
  5292                           ;eusart.c: 117: {
  5293                           
  5294                           ;eusart.c: 116: while(0 == eusartRxCount)
  5295                           
  5296  0833  087B               	movf	_eusartRxCount,w	;volatile
  5297  0834  1903               	btfsc	3,2
  5298  0835  2833               	goto	l3412
  5299                           
  5300                           ;eusart.c: 118: }
  5301                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  5302  0836  0021               	movlb	1	; select bank1
  5303  0837  0860               	movf	_eusartRxTail^(0+128),w
  5304  0838  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  5305  0839  0086               	movwf	6
  5306  083A  3001               	movlw	1	; select bank2/3
  5307  083B  0087               	movwf	7
  5308  083C  0801               	movf	1,w
  5309  083D  00F2               	movwf	??_EUSART_Read
  5310  083E  0872               	movf	??_EUSART_Read,w
  5311  083F  00F3               	movwf	EUSART_Read@readValue
  5312  0840  3001               	movlw	1
  5313  0841  00F2               	movwf	??_EUSART_Read
  5314  0842  0872               	movf	??_EUSART_Read,w
  5315  0843  07E0               	addwf	_eusartRxTail^(0+128),f
  5316                           
  5317                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5318  0844  3010               	movlw	16
  5319  0845  0260               	subwf	_eusartRxTail^(0+128),w
  5320  0846  1803               	btfsc	3,0
  5321                           
  5322                           ;eusart.c: 122: {
  5323                           ;eusart.c: 123: eusartRxTail = 0;
  5324  0847  01E0               	clrf	_eusartRxTail^(0+128)
  5325                           
  5326                           ;eusart.c: 124: }
  5327                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  5328  0848  1291               	bcf	17,5	;volatile
  5329                           
  5330                           ;eusart.c: 126: eusartRxCount--;
  5331  0849  3001               	movlw	1
  5332  084A  02FB               	subwf	_eusartRxCount,f	;volatile
  5333                           
  5334                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  5335  084B  1691               	bsf	17,5	;volatile
  5336                           
  5337                           ;eusart.c: 129: return readValue;
  5338  084C  0873               	movf	EUSART_Read@readValue,w
  5339  084D  0008               	return
  5340  084E                     __end_of_EUSART_Read:	
  5341                           
  5342                           	psect	text9
  5343  071D                     __ptext9:	
  5344 ;; *************** function _CMD_Execute *****************
  5345 ;; Defined at:
  5346 ;;		line 12 in file "command.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  cmd             1    wreg     PTR const unsigned char 
  5349 ;;		 -> CMD_Buf(32), 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  cmd             1   34[BANK0 ] PTR const unsigned char 
  5352 ;;		 -> CMD_Buf(32), 
  5353 ;;  buf             3   35[BANK0 ] PTR unsigned char [3]
  5354 ;;		 -> NULL(0), CMD_Buf(32), 
  5355 ;;  addr            1   40[BANK0 ] unsigned char 
  5356 ;;  cnt             1   39[BANK0 ] unsigned char 
  5357 ;;  val             1   38[BANK0 ] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  2   22[None  ] int 
  5360 ;; Registers used:
  5361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:        9 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    7
  5374 ;; This function calls:
  5375 ;;		_ParseUByte
  5376 ;;		_Split
  5377 ;;		_printf
  5378 ;;		_strcmp
  5379 ;; This function is called by:
  5380 ;;		_CMD_Receive
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _CMD_Execute
  5386  071D                     _CMD_Execute:	
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in _CMD_Execute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5390                           ;CMD_Execute@cmd stored from wreg
  5391  071D  0020               	movlb	0	; select bank0
  5392  071E  00C2               	movwf	CMD_Execute@cmd
  5393                           
  5394                           ;command.c: 13: uint8_t addr;
  5395                           ;command.c: 14: uint8_t val;
  5396                           ;command.c: 15: uint8_t cnt;
  5397                           ;command.c: 16: char *buf[3];
  5398                           ;command.c: 18: cnt = Split(cmd,",",buf);
  5399  071F  307E               	movlw	low (STR_1| (0+32768))
  5400  0720  00AC               	movwf	Split@delimiter
  5401  0721  3090               	movlw	high (STR_1| (0+32768))
  5402  0722  00AD               	movwf	Split@delimiter+1
  5403  0723  3043               	movlw	(low (CMD_Execute@buf| 0))& (0+255)
  5404  0724  00C0               	movwf	??_CMD_Execute
  5405  0725  0840               	movf	??_CMD_Execute,w
  5406  0726  00AE               	movwf	Split@out
  5407  0727  0842               	movf	CMD_Execute@cmd,w
  5408  0728  3188  20C1  3187   	fcall	_Split
  5409  072B  0020               	movlb	0	; select bank0
  5410  072C  082C               	movf	?_Split,w
  5411  072D  00C1               	movwf	??_CMD_Execute+1
  5412  072E  0841               	movf	??_CMD_Execute+1,w
  5413  072F  00C7               	movwf	CMD_Execute@cnt
  5414                           
  5415                           ;command.c: 20: if(cnt > 1){
  5416  0730  3002               	movlw	2
  5417  0731  0247               	subwf	CMD_Execute@cnt,w
  5418  0732  1C03               	skipc
  5419  0733  2F58               	goto	l4414
  5420                           
  5421                           ;command.c: 21: if(ParseUByte(buf[1],&addr,16) != 0 || addr >= 3){
  5422  0734  3048               	movlw	(low (CMD_Execute@addr| 0))& (0+255)
  5423  0735  00C0               	movwf	??_CMD_Execute
  5424  0736  0840               	movf	??_CMD_Execute,w
  5425  0737  00B9               	movwf	ParseUByte@ret
  5426  0738  3010               	movlw	16
  5427  0739  00BA               	movwf	ParseUByte@base
  5428  073A  3000               	movlw	0
  5429  073B  00BB               	movwf	ParseUByte@base+1
  5430  073C  0844               	movf	low ((CMD_Execute@buf| 0+1)),w
  5431  073D  3189  2148  3187   	fcall	_ParseUByte
  5432  0740  0020               	movlb	0	; select bank0
  5433  0741  0839               	movf	?_ParseUByte,w
  5434  0742  043A               	iorwf	?_ParseUByte+1,w
  5435  0743  1D03               	btfss	3,2
  5436  0744  2F49               	goto	l4410
  5437  0745  3003               	movlw	3
  5438  0746  0248               	subwf	CMD_Execute@addr,w
  5439  0747  1C03               	skipc
  5440  0748  2F58               	goto	l4414
  5441  0749                     l4410:	
  5442                           
  5443                           ;command.c: 22: printf("%s%s","NOK","\r\n");
  5444  0749  3066               	movlw	low (STR_2| (0+32768))
  5445  074A  00A6               	movwf	printf@f
  5446  074B  3090               	movlw	high (STR_2| (0+32768))
  5447  074C  00A7               	movwf	printf@f+1
  5448  074D  306F               	movlw	low (STR_3| (0+32768))
  5449  074E  00A8               	movwf	low ((?_printf| 0+2))
  5450  074F  3090               	movlw	high (STR_3| (0+32768))
  5451  0750  00A9               	movwf	(low ((?_printf| 0+2))+1)
  5452  0751  307B               	movlw	low (STR_4| (0+32768))
  5453  0752  00AA               	movwf	low ((?_printf| 0+4))
  5454  0753  3090               	movlw	high (STR_4| (0+32768))
  5455  0754  00AB               	movwf	(low ((?_printf| 0+4))+1)
  5456  0755  3180  203B         	fcall	_printf
  5457                           
  5458                           ;command.c: 23: return -1;
  5459                           ;	Return value of _CMD_Execute is never used
  5460  0757  0008               	return
  5461  0758                     l4414:	
  5462                           
  5463                           ;command.c: 24: }
  5464                           ;command.c: 25: }
  5465                           ;command.c: 27: if(cnt == 3 && strcmp(buf[0],"SET") == 0){
  5466  0758  3003               	movlw	3
  5467  0759  0020               	movlb	0	; select bank0
  5468  075A  0647               	xorwf	CMD_Execute@cnt,w
  5469  075B  1D03               	btfss	3,2
  5470  075C  2FA2               	goto	l4430
  5471  075D  3077               	movlw	low (STR_5| (0+32768))
  5472  075E  00F2               	movwf	strcmp@s2
  5473  075F  3090               	movlw	high (STR_5| (0+32768))
  5474  0760  00F3               	movwf	strcmp@s2+1
  5475  0761  0843               	movf	CMD_Execute@buf,w
  5476  0762  3188  2098  3187   	fcall	_strcmp
  5477  0765  0872               	movf	?_strcmp,w
  5478  0766  0473               	iorwf	?_strcmp+1,w
  5479  0767  1D03               	btfss	3,2
  5480  0768  2FA2               	goto	l4430
  5481                           
  5482                           ;command.c: 28: if(ParseUByte(buf[2],&val,16) != 0){
  5483  0769  3046               	movlw	(low (CMD_Execute@val| 0))& (0+255)
  5484  076A  0020               	movlb	0	; select bank0
  5485  076B  00C0               	movwf	??_CMD_Execute
  5486  076C  0840               	movf	??_CMD_Execute,w
  5487  076D  00B9               	movwf	ParseUByte@ret
  5488  076E  3010               	movlw	16
  5489  076F  00BA               	movwf	ParseUByte@base
  5490  0770  3000               	movlw	0
  5491  0771  00BB               	movwf	ParseUByte@base+1
  5492  0772  0845               	movf	low ((CMD_Execute@buf| 0+2)),w
  5493  0773  3189  2148  3187   	fcall	_ParseUByte
  5494  0776  0020               	movlb	0	; select bank0
  5495  0777  0839               	movf	?_ParseUByte,w
  5496  0778  043A               	iorwf	?_ParseUByte+1,w
  5497  0779  1903               	btfsc	3,2
  5498  077A  2F8A               	goto	l4424
  5499                           
  5500                           ;command.c: 29: printf("%s%s","NOK","\r\n");
  5501  077B  3066               	movlw	low (STR_2| (0+32768))
  5502  077C  00A6               	movwf	printf@f
  5503  077D  3090               	movlw	high (STR_2| (0+32768))
  5504  077E  00A7               	movwf	printf@f+1
  5505  077F  306F               	movlw	low (STR_3| (0+32768))
  5506  0780  00A8               	movwf	low ((?_printf| 0+2))
  5507  0781  3090               	movlw	high (STR_3| (0+32768))
  5508  0782  00A9               	movwf	(low ((?_printf| 0+2))+1)
  5509  0783  307B               	movlw	low (STR_4| (0+32768))
  5510  0784  00AA               	movwf	low ((?_printf| 0+4))
  5511  0785  3090               	movlw	high (STR_4| (0+32768))
  5512  0786  00AB               	movwf	(low ((?_printf| 0+4))+1)
  5513  0787  3180  203B         	fcall	_printf
  5514                           
  5515                           ;command.c: 30: return -1;
  5516                           ;	Return value of _CMD_Execute is never used
  5517  0789  0008               	return
  5518  078A                     l4424:	
  5519                           
  5520                           ;command.c: 31: }
  5521                           ;command.c: 32: CMD_Reg[addr] = val;
  5522  078A  0020               	movlb	0	; select bank0
  5523  078B  0846               	movf	CMD_Execute@val,w
  5524  078C  00C0               	movwf	??_CMD_Execute
  5525  078D  0848               	movf	CMD_Execute@addr,w
  5526  078E  3ED8               	addlw	(low (_CMD_Reg| 0))& (0+255)
  5527  078F  0086               	movwf	6
  5528  0790  0187               	clrf	7
  5529  0791  0840               	movf	??_CMD_Execute,w
  5530  0792  0081               	movwf	1
  5531                           
  5532                           ;command.c: 33: printf("%s%s","AOK","\r\n");
  5533  0793  3066               	movlw	low (STR_2| (0+32768))
  5534  0794  00A6               	movwf	printf@f
  5535  0795  3090               	movlw	high (STR_2| (0+32768))
  5536  0796  00A7               	movwf	printf@f+1
  5537  0797  306B               	movlw	low (STR_10| (0+32768))
  5538  0798  00A8               	movwf	low ((?_printf| 0+2))
  5539  0799  3090               	movlw	high (STR_10| (0+32768))
  5540  079A  00A9               	movwf	(low ((?_printf| 0+2))+1)
  5541  079B  307B               	movlw	low (STR_4| (0+32768))
  5542  079C  00AA               	movwf	low ((?_printf| 0+4))
  5543  079D  3090               	movlw	high (STR_4| (0+32768))
  5544  079E  00AB               	movwf	(low ((?_printf| 0+4))+1)
  5545  079F  3180  203B         	fcall	_printf
  5546                           
  5547                           ;command.c: 34: return 1;
  5548                           ;	Return value of _CMD_Execute is never used
  5549  07A1  0008               	return
  5550  07A2                     l4430:	
  5551                           
  5552                           ;command.c: 35: }
  5553                           ;command.c: 37: if(cnt == 2 && strcmp(buf[0],"GET") == 0){
  5554  07A2  3002               	movlw	2
  5555  07A3  0020               	movlb	0	; select bank0
  5556  07A4  0647               	xorwf	CMD_Execute@cnt,w
  5557  07A5  1D03               	btfss	3,2
  5558  07A6  2FCA               	goto	l4438
  5559  07A7  3073               	movlw	low (STR_12| (0+32768))
  5560  07A8  00F2               	movwf	strcmp@s2
  5561  07A9  3090               	movlw	high (STR_12| (0+32768))
  5562  07AA  00F3               	movwf	strcmp@s2+1
  5563  07AB  0843               	movf	CMD_Execute@buf,w
  5564  07AC  3188  2098  3187   	fcall	_strcmp
  5565  07AF  0872               	movf	?_strcmp,w
  5566  07B0  0473               	iorwf	?_strcmp+1,w
  5567  07B1  1D03               	btfss	3,2
  5568  07B2  2FCA               	goto	l4438
  5569                           
  5570                           ;command.c: 38: printf("%d%s",CMD_Reg[addr],"\r\n");
  5571  07B3  3061               	movlw	low (STR_13| (0+32768))
  5572  07B4  0020               	movlb	0	; select bank0
  5573  07B5  00A6               	movwf	printf@f
  5574  07B6  3090               	movlw	high (STR_13| (0+32768))
  5575  07B7  00A7               	movwf	printf@f+1
  5576  07B8  0848               	movf	CMD_Execute@addr,w
  5577  07B9  3ED8               	addlw	(low (_CMD_Reg| 0))& (0+255)
  5578  07BA  0086               	movwf	6
  5579  07BB  0187               	clrf	7
  5580  07BC  0801               	movf	1,w
  5581  07BD  00C0               	movwf	??_CMD_Execute
  5582  07BE  01C1               	clrf	??_CMD_Execute+1
  5583  07BF  0840               	movf	??_CMD_Execute,w
  5584  07C0  00A8               	movwf	?_printf+2
  5585  07C1  0841               	movf	??_CMD_Execute+1,w
  5586  07C2  00A9               	movwf	?_printf+3
  5587  07C3  307B               	movlw	low (STR_4| (0+32768))
  5588  07C4  00AA               	movwf	low ((?_printf| 0+4))
  5589  07C5  3090               	movlw	high (STR_4| (0+32768))
  5590  07C6  00AB               	movwf	(low ((?_printf| 0+4))+1)
  5591  07C7  3180  203B         	fcall	_printf
  5592                           
  5593                           ;command.c: 39: return 2;
  5594                           ;	Return value of _CMD_Execute is never used
  5595  07C9  0008               	return
  5596  07CA                     l4438:	
  5597                           
  5598                           ;command.c: 40: }
  5599                           ;command.c: 42: printf("%s%s","NOK","\r\n");
  5600  07CA  3066               	movlw	low (STR_2| (0+32768))
  5601  07CB  0020               	movlb	0	; select bank0
  5602  07CC  00A6               	movwf	printf@f
  5603  07CD  3090               	movlw	high (STR_2| (0+32768))
  5604  07CE  00A7               	movwf	printf@f+1
  5605  07CF  306F               	movlw	low (STR_3| (0+32768))
  5606  07D0  00A8               	movwf	low ((?_printf| 0+2))
  5607  07D1  3090               	movlw	high (STR_3| (0+32768))
  5608  07D2  00A9               	movwf	(low ((?_printf| 0+2))+1)
  5609  07D3  307B               	movlw	low (STR_4| (0+32768))
  5610  07D4  00AA               	movwf	low ((?_printf| 0+4))
  5611  07D5  3090               	movlw	high (STR_4| (0+32768))
  5612  07D6  00AB               	movwf	(low ((?_printf| 0+4))+1)
  5613  07D7  3180  203B         	fcall	_printf
  5614  07D9  0008               	return
  5615  07DA                     __end_of_CMD_Execute:	
  5616                           ;command.c: 43: return -1;
  5617                           ;	Return value of _CMD_Execute is never used
  5618                           
  5619                           
  5620                           	psect	text10
  5621  0898                     __ptext10:	
  5622 ;; *************** function _strcmp *****************
  5623 ;; Defined at:
  5624 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcmp.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  s1              1    wreg     PTR const unsigned char 
  5627 ;;		 -> NULL(0), CMD_Buf(32), 
  5628 ;;  s2              2    2[COMMON] PTR const unsigned char 
  5629 ;;		 -> STR_12(4), STR_5(4), 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  s1              1    6[COMMON] PTR const unsigned char 
  5632 ;;		 -> NULL(0), CMD_Buf(32), 
  5633 ;;  r               1    5[COMMON] char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  2    2[COMMON] int 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:        5 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    2
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_CMD_Execute
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _strcmp
  5659  0898                     _strcmp:	
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  5663                           ;strcmp@s1 stored from wreg
  5664  0898  00F6               	movwf	strcmp@s1
  5665  0899  28A2               	goto	l3258
  5666  089A                     l3256:	
  5667  089A  3001               	movlw	1
  5668  089B  00F4               	movwf	??_strcmp
  5669  089C  0874               	movf	??_strcmp,w
  5670  089D  07F6               	addwf	strcmp@s1,f
  5671  089E  3001               	movlw	1
  5672  089F  07F2               	addwf	strcmp@s2,f
  5673  08A0  3000               	movlw	0
  5674  08A1  3DF3               	addwfc	strcmp@s2+1,f
  5675  08A2                     l3258:	
  5676  08A2  0876               	movf	strcmp@s1,w
  5677  08A3  0086               	movwf	6
  5678  08A4  3001               	movlw	1	; select bank2/3
  5679  08A5  0087               	movwf	7
  5680  08A6  0872               	movf	strcmp@s2,w
  5681  08A7  0084               	movwf	4
  5682  08A8  0873               	movf	strcmp@s2+1,w
  5683  08A9  0085               	movwf	5
  5684  08AA  0800               	movf	0,w	;code access
  5685  08AB  3AFF               	xorlw	255
  5686  08AC  3E01               	addlw	1
  5687  08AD  0701               	addwf	1,w
  5688  08AE  00F4               	movwf	??_strcmp
  5689  08AF  0874               	movf	??_strcmp,w
  5690  08B0  00F5               	movwf	strcmp@r
  5691  08B1  0875               	movf	strcmp@r,w
  5692  08B2  1D03               	btfss	3,2
  5693  08B3  28BB               	goto	l3262
  5694  08B4  0876               	movf	strcmp@s1,w
  5695  08B5  0086               	movwf	6
  5696  08B6  3001               	movlw	1	; select bank2/3
  5697  08B7  0087               	movwf	7
  5698  08B8  0801               	movf	1,w
  5699  08B9  1D03               	btfss	3,2
  5700  08BA  289A               	goto	l3256
  5701  08BB                     l3262:	
  5702  08BB  0875               	movf	strcmp@r,w
  5703  08BC  00F2               	movwf	?_strcmp
  5704  08BD  01F3               	clrf	?_strcmp+1
  5705  08BE  1BF2               	btfsc	?_strcmp,7
  5706  08BF  03F3               	decf	?_strcmp+1,f
  5707  08C0  0008               	return
  5708  08C1                     __end_of_strcmp:	
  5709                           
  5710                           	psect	text11
  5711  08C1                     __ptext11:	
  5712 ;; *************** function _Split *****************
  5713 ;; Defined at:
  5714 ;;		line 7 in file "strlib.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  str             1    wreg     PTR const unsigned char 
  5717 ;;		 -> CMD_Buf(32), 
  5718 ;;  delimiter       2   12[BANK0 ] PTR const unsigned char 
  5719 ;;		 -> STR_1(2), 
  5720 ;;  out             1   14[BANK0 ] PTR PTR unsigned char 
  5721 ;;		 -> CMD_Execute@buf(3), 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  str             1   17[BANK0 ] PTR const unsigned char 
  5724 ;;		 -> CMD_Buf(32), 
  5725 ;;  cnt             2   18[BANK0 ] int 
  5726 ;;  tok             1   20[BANK0 ] PTR unsigned char 
  5727 ;;		 -> NULL(0), CMD_Buf(32), 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  2   12[BANK0 ] int 
  5730 ;; Registers used:
  5731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5737 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;Total ram usage:        9 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    5
  5744 ;; This function calls:
  5745 ;;		_strtok
  5746 ;; This function is called by:
  5747 ;;		_CMD_Execute
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function _Split
  5753  08C1                     _Split:	
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _Split: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5757                           ;Split@str stored from wreg
  5758  08C1  0020               	movlb	0	; select bank0
  5759  08C2  00B1               	movwf	Split@str
  5760                           
  5761                           ;strlib.c: 8: char *tok;
  5762                           ;strlib.c: 9: int cnt = 0;
  5763  08C3  01B2               	clrf	Split@cnt
  5764  08C4  01B3               	clrf	Split@cnt+1
  5765                           
  5766                           ;strlib.c: 11: tok = strtok( str, delimiter );
  5767  08C5  082D               	movf	Split@delimiter+1,w
  5768  08C6  00A8               	movwf	strtok@s2+1
  5769  08C7  082C               	movf	Split@delimiter,w
  5770  08C8  00A7               	movwf	strtok@s2
  5771  08C9  0831               	movf	Split@str,w
  5772  08CA                     L2:	
  5773  08CA  318B  2376  3188   	fcall	_strtok
  5774  08CD  0020               	movlb	0	; select bank0
  5775  08CE  00AF               	movwf	??_Split
  5776  08CF  082F               	movf	??_Split,w
  5777  08D0  00B4               	movwf	Split@tok
  5778  08D1  0834               	movf	Split@tok,w
  5779  08D2  1903               	btfsc	3,2
  5780  08D3  28E8               	goto	l4096
  5781                           
  5782                           ;strlib.c: 13: out[cnt++] = tok;
  5783                           
  5784                           ;strlib.c: 12: while( tok != (0)) {
  5785  08D4  0834               	movf	Split@tok,w
  5786  08D5  00AF               	movwf	??_Split
  5787  08D6  0832               	movf	Split@cnt,w
  5788  08D7  072E               	addwf	Split@out,w
  5789  08D8  00B0               	movwf	??_Split+1
  5790  08D9  0830               	movf	??_Split+1,w
  5791  08DA  0086               	movwf	6
  5792  08DB  0187               	clrf	7
  5793  08DC  082F               	movf	??_Split,w
  5794  08DD  0081               	movwf	1
  5795  08DE  3001               	movlw	1
  5796  08DF  07B2               	addwf	Split@cnt,f
  5797  08E0  3000               	movlw	0
  5798  08E1  3DB3               	addwfc	Split@cnt+1,f
  5799                           
  5800                           ;strlib.c: 14: tok = strtok( (0), delimiter );
  5801  08E2  082D               	movf	Split@delimiter+1,w
  5802  08E3  00A8               	movwf	strtok@s2+1
  5803  08E4  082C               	movf	Split@delimiter,w
  5804  08E5  00A7               	movwf	strtok@s2
  5805  08E6  3000               	movlw	0
  5806  08E7  28CA               	goto	L2
  5807  08E8                     l4096:	
  5808                           
  5809                           ;strlib.c: 15: }
  5810                           ;strlib.c: 16: return cnt;
  5811  08E8  0833               	movf	Split@cnt+1,w
  5812  08E9  00AD               	movwf	?_Split+1
  5813  08EA  0832               	movf	Split@cnt,w
  5814  08EB  00AC               	movwf	?_Split
  5815  08EC  0008               	return
  5816  08ED                     __end_of_Split:	
  5817                           
  5818                           	psect	text12
  5819  0B76                     __ptext12:	
  5820 ;; *************** function _strtok *****************
  5821 ;; Defined at:
  5822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strtok.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  s1              1    wreg     PTR unsigned char 
  5825 ;;		 -> NULL(0), CMD_Buf(32), 
  5826 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  5827 ;;		 -> STR_1(2), 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  s1              1    9[COMMON] PTR unsigned char 
  5830 ;;		 -> NULL(0), CMD_Buf(32), 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      PTR unsigned char 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        6 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    4
  5847 ;; This function calls:
  5848 ;;		_strcspn
  5849 ;;		_strspn
  5850 ;; This function is called by:
  5851 ;;		_Split
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _strtok
  5857  0B76                     _strtok:	
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5861                           ;strtok@s1 stored from wreg
  5862  0B76  00F9               	movwf	strtok@s1
  5863  0B77  0879               	movf	strtok@s1,w
  5864  0B78  1D03               	btfss	3,2
  5865  0B79  2B80               	goto	l3808
  5866  0B7A  0021               	movlb	1	; select bank1
  5867  0B7B  085F               	movf	strtok@sp^(0+128),w
  5868  0B7C  0020               	movlb	0	; select bank0
  5869  0B7D  00A9               	movwf	??_strtok
  5870  0B7E  0829               	movf	??_strtok,w
  5871  0B7F  00F9               	movwf	strtok@s1
  5872  0B80                     l3808:	
  5873  0B80  0879               	movf	strtok@s1,w
  5874  0B81  1D03               	btfss	3,2
  5875  0B82  2B85               	goto	l3814
  5876  0B83  3000               	movlw	0
  5877  0B84  0008               	return
  5878  0B85                     l3814:	
  5879  0B85  0020               	movlb	0	; select bank0
  5880  0B86  0828               	movf	strtok@s2+1,w
  5881  0B87  00A1               	movwf	strspn@s2+1
  5882  0B88  0827               	movf	strtok@s2,w
  5883  0B89  00A0               	movwf	strspn@s2
  5884  0B8A  0879               	movf	strtok@s1,w
  5885  0B8B  3189  21AA  318B   	fcall	_strspn
  5886  0B8E  0020               	movlb	0	; select bank0
  5887  0B8F  0820               	movf	?_strspn,w
  5888  0B90  00A9               	movwf	??_strtok
  5889  0B91  0829               	movf	??_strtok,w
  5890  0B92  07F9               	addwf	strtok@s1,f
  5891  0B93  0879               	movf	strtok@s1,w
  5892  0B94  0086               	movwf	6
  5893  0B95  3001               	movlw	1	; select bank2/3
  5894  0B96  0087               	movwf	7
  5895  0B97  0801               	movf	1,w
  5896  0B98  1D03               	btfss	3,2
  5897  0B99  2B9E               	goto	l3822
  5898  0B9A  0021               	movlb	1	; select bank1
  5899  0B9B  01DF               	clrf	strtok@sp^(0+128)
  5900  0B9C  3000               	movlw	0
  5901  0B9D  0008               	return
  5902  0B9E                     l3822:	
  5903  0B9E  0020               	movlb	0	; select bank0
  5904  0B9F  0828               	movf	strtok@s2+1,w
  5905  0BA0  00A1               	movwf	strcspn@s2+1
  5906  0BA1  0827               	movf	strtok@s2,w
  5907  0BA2  00A0               	movwf	strcspn@s2
  5908  0BA3  0879               	movf	strtok@s1,w
  5909  0BA4  3189  2179  318B   	fcall	_strcspn
  5910  0BA7  0020               	movlb	0	; select bank0
  5911  0BA8  0820               	movf	?_strcspn,w
  5912  0BA9  00A9               	movwf	??_strtok
  5913  0BAA  0821               	movf	?_strcspn+1,w
  5914  0BAB  00AA               	movwf	??_strtok+1
  5915  0BAC  0879               	movf	strtok@s1,w
  5916  0BAD  0729               	addwf	??_strtok,w
  5917  0BAE  00AB               	movwf	??_strtok+2
  5918  0BAF  082B               	movf	??_strtok+2,w
  5919  0BB0  0021               	movlb	1	; select bank1
  5920  0BB1  00DF               	movwf	strtok@sp^(0+128)
  5921  0BB2  085F               	movf	strtok@sp^(0+128),w
  5922  0BB3  0086               	movwf	6
  5923  0BB4  3001               	movlw	1	; select bank2/3
  5924  0BB5  0087               	movwf	7
  5925  0BB6  0801               	movf	1,w
  5926  0BB7  1903               	btfsc	3,2
  5927  0BB8  2BC5               	goto	l3830
  5928  0BB9  085F               	movf	strtok@sp^(0+128),w
  5929  0BBA  0086               	movwf	6
  5930  0BBB  3001               	movlw	1	; select bank2/3
  5931  0BBC  0087               	movwf	7
  5932  0BBD  0181               	clrf	1
  5933  0BBE  3001               	movlw	1
  5934  0BBF  0020               	movlb	0	; select bank0
  5935  0BC0  00A9               	movwf	??_strtok
  5936  0BC1  0829               	movf	??_strtok,w
  5937  0BC2  0021               	movlb	1	; select bank1
  5938  0BC3  07DF               	addwf	strtok@sp^(0+128),f
  5939  0BC4  2BC6               	goto	l3832
  5940  0BC5                     l3830:	
  5941  0BC5  01DF               	clrf	strtok@sp^(0+128)
  5942  0BC6                     l3832:	
  5943  0BC6  0879               	movf	strtok@s1,w
  5944  0BC7  0008               	return
  5945  0BC8                     __end_of_strtok:	
  5946                           
  5947                           	psect	text13
  5948  09AA                     __ptext13:	
  5949 ;; *************** function _strspn *****************
  5950 ;; Defined at:
  5951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strspn.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  s1              1    wreg     PTR const unsigned char 
  5954 ;;		 -> NULL(0), CMD_Buf(32), 
  5955 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  5956 ;;		 -> STR_1(2), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  s1              1    6[BANK0 ] PTR const unsigned char 
  5959 ;;		 -> NULL(0), CMD_Buf(32), 
  5960 ;;  i               2    4[BANK0 ] unsigned int 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  2    0[BANK0 ] unsigned int 
  5963 ;; Registers used:
  5964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5970 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;Total ram usage:        7 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    3
  5977 ;; This function calls:
  5978 ;;		_strchr
  5979 ;; This function is called by:
  5980 ;;		_strtok
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           
  5985                           ;psect for function _strspn
  5986  09AA                     _strspn:	
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5990                           ;strspn@s1 stored from wreg
  5991  09AA  0020               	movlb	0	; select bank0
  5992  09AB  00A6               	movwf	strspn@s1
  5993  09AC  01A4               	clrf	strspn@i
  5994  09AD  01A5               	clrf	strspn@i+1
  5995  09AE  29B8               	goto	l3784
  5996  09AF                     l3782:	
  5997  09AF  3001               	movlw	1
  5998  09B0  0020               	movlb	0	; select bank0
  5999  09B1  00A2               	movwf	??_strspn
  6000  09B2  0822               	movf	??_strspn,w
  6001  09B3  07A6               	addwf	strspn@s1,f
  6002  09B4  3001               	movlw	1
  6003  09B5  07A4               	addwf	strspn@i,f
  6004  09B6  3000               	movlw	0
  6005  09B7  3DA5               	addwfc	strspn@i+1,f
  6006  09B8                     l3784:	
  6007  09B8  0826               	movf	strspn@s1,w
  6008  09B9  0086               	movwf	6
  6009  09BA  3001               	movlw	1	; select bank2/3
  6010  09BB  0087               	movwf	7
  6011  09BC  0801               	movf	1,w
  6012  09BD  1903               	btfsc	3,2
  6013  09BE  29D5               	goto	l3788
  6014  09BF  0821               	movf	strspn@s2+1,w
  6015  09C0  00F3               	movwf	strchr@ptr+1
  6016  09C1  0820               	movf	strspn@s2,w
  6017  09C2  00F2               	movwf	strchr@ptr
  6018  09C3  0826               	movf	strspn@s1,w
  6019  09C4  0086               	movwf	6
  6020  09C5  3001               	movlw	1	; select bank2/3
  6021  09C6  0087               	movwf	7
  6022  09C7  0801               	movf	1,w
  6023  09C8  00A2               	movwf	??_strspn
  6024  09C9  01A3               	clrf	??_strspn+1
  6025  09CA  0822               	movf	??_strspn,w
  6026  09CB  00F4               	movwf	strchr@chr
  6027  09CC  0823               	movf	??_strspn+1,w
  6028  09CD  00F5               	movwf	strchr@chr+1
  6029  09CE  3197  2797  3189   	fcall	_strchr
  6030  09D1  0872               	movf	?_strchr,w
  6031  09D2  0473               	iorwf	?_strchr+1,w
  6032  09D3  1D03               	btfss	3,2
  6033  09D4  29AF               	goto	l3782
  6034  09D5                     l3788:	
  6035  09D5  0020               	movlb	0	; select bank0
  6036  09D6  0825               	movf	strspn@i+1,w
  6037  09D7  00A1               	movwf	?_strspn+1
  6038  09D8  0824               	movf	strspn@i,w
  6039  09D9  00A0               	movwf	?_strspn
  6040  09DA  0008               	return
  6041  09DB                     __end_of_strspn:	
  6042                           
  6043                           	psect	text14
  6044  0979                     __ptext14:	
  6045 ;; *************** function _strcspn *****************
  6046 ;; Defined at:
  6047 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcspn.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  s1              1    wreg     PTR const unsigned char 
  6050 ;;		 -> NULL(0), CMD_Buf(32), 
  6051 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  6052 ;;		 -> STR_1(2), 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;  s1              1    6[BANK0 ] PTR const unsigned char 
  6055 ;;		 -> NULL(0), CMD_Buf(32), 
  6056 ;;  i               2    4[BANK0 ] unsigned int 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  2    0[BANK0 ] unsigned int 
  6059 ;; Registers used:
  6060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;Total ram usage:        7 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    3
  6073 ;; This function calls:
  6074 ;;		_strchr
  6075 ;; This function is called by:
  6076 ;;		_strtok
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           
  6081                           ;psect for function _strcspn
  6082  0979                     _strcspn:	
  6083                           
  6084                           ;incstack = 0
  6085                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6086                           ;strcspn@s1 stored from wreg
  6087  0979  0020               	movlb	0	; select bank0
  6088  097A  00A6               	movwf	strcspn@s1
  6089  097B  01A4               	clrf	strcspn@i
  6090  097C  01A5               	clrf	strcspn@i+1
  6091  097D  2987               	goto	l3796
  6092  097E                     l3794:	
  6093  097E  3001               	movlw	1
  6094  097F  0020               	movlb	0	; select bank0
  6095  0980  00A2               	movwf	??_strcspn
  6096  0981  0822               	movf	??_strcspn,w
  6097  0982  07A6               	addwf	strcspn@s1,f
  6098  0983  3001               	movlw	1
  6099  0984  07A4               	addwf	strcspn@i,f
  6100  0985  3000               	movlw	0
  6101  0986  3DA5               	addwfc	strcspn@i+1,f
  6102  0987                     l3796:	
  6103  0987  0826               	movf	strcspn@s1,w
  6104  0988  0086               	movwf	6
  6105  0989  3001               	movlw	1	; select bank2/3
  6106  098A  0087               	movwf	7
  6107  098B  0801               	movf	1,w
  6108  098C  1903               	btfsc	3,2
  6109  098D  29A4               	goto	l3800
  6110  098E  0821               	movf	strcspn@s2+1,w
  6111  098F  00F3               	movwf	strchr@ptr+1
  6112  0990  0820               	movf	strcspn@s2,w
  6113  0991  00F2               	movwf	strchr@ptr
  6114  0992  0826               	movf	strcspn@s1,w
  6115  0993  0086               	movwf	6
  6116  0994  3001               	movlw	1	; select bank2/3
  6117  0995  0087               	movwf	7
  6118  0996  0801               	movf	1,w
  6119  0997  00A2               	movwf	??_strcspn
  6120  0998  01A3               	clrf	??_strcspn+1
  6121  0999  0822               	movf	??_strcspn,w
  6122  099A  00F4               	movwf	strchr@chr
  6123  099B  0823               	movf	??_strcspn+1,w
  6124  099C  00F5               	movwf	strchr@chr+1
  6125  099D  3197  2797  3189   	fcall	_strchr
  6126  09A0  0872               	movf	?_strchr,w
  6127  09A1  0473               	iorwf	?_strchr+1,w
  6128  09A2  1903               	btfsc	3,2
  6129  09A3  297E               	goto	l3794
  6130  09A4                     l3800:	
  6131  09A4  0020               	movlb	0	; select bank0
  6132  09A5  0825               	movf	strcspn@i+1,w
  6133  09A6  00A1               	movwf	?_strcspn+1
  6134  09A7  0824               	movf	strcspn@i,w
  6135  09A8  00A0               	movwf	?_strcspn
  6136  09A9  0008               	return
  6137  09AA                     __end_of_strcspn:	
  6138                           
  6139                           	psect	text15
  6140  1797                     __ptext15:	
  6141 ;; *************** function _strchr *****************
  6142 ;; Defined at:
  6143 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  ptr             2    2[COMMON] PTR const unsigned char 
  6146 ;;		 -> STR_1(2), 
  6147 ;;  chr             2    4[COMMON] int 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  2    2[COMMON] PTR unsigned char 
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        7 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    2
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_strcspn
  6170 ;;		_strspn
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function _strchr
  6176  1797                     _strchr:	
  6177  1797                     l1049:	
  6178                           ;incstack = 0
  6179                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  6180                           
  6181  1797  0872               	movf	strchr@ptr,w
  6182  1798  0084               	movwf	4
  6183  1799  0873               	movf	strchr@ptr+1,w
  6184  179A  0085               	movwf	5
  6185  179B  0800               	movf	0,w	;code access
  6186  179C  0674               	xorwf	strchr@chr,w
  6187  179D  1903               	btfsc	3,2
  6188  179E  0008               	return
  6189  179F  0873               	movf	strchr@ptr+1,w
  6190  17A0  00F7               	movwf	??_strchr+1
  6191  17A1  0872               	movf	strchr@ptr,w
  6192  17A2  00F6               	movwf	??_strchr
  6193  17A3  0AF2               	incf	strchr@ptr,f
  6194  17A4  1903               	skipnz
  6195  17A5  0AF3               	incf	strchr@ptr+1,f
  6196  17A6  0876               	movf	??_strchr,w
  6197  17A7  0084               	movwf	4
  6198  17A8  0877               	movf	??_strchr+1,w
  6199  17A9  0085               	movwf	5
  6200  17AA  0012               	moviw fsr0++
  6201  17AB  1D03               	btfss	3,2
  6202  17AC  2F97               	goto	l1049
  6203  17AD  01F2               	clrf	?_strchr
  6204  17AE  01F3               	clrf	?_strchr+1
  6205  17AF  0008               	return
  6206  17B0                     __end_of_strchr:	
  6207                           
  6208                           	psect	text16
  6209  0948                     __ptext16:	
  6210 ;; *************** function _ParseUByte *****************
  6211 ;; Defined at:
  6212 ;;		line 50 in file "strlib.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  str             1    wreg     PTR const unsigned char 
  6215 ;;		 -> NULL(0), CMD_Buf(32), 
  6216 ;;  ret             1   25[BANK0 ] PTR unsigned char 
  6217 ;;		 -> CMD_Execute@val(1), CMD_Execute@addr(1), 
  6218 ;;  base            2   26[BANK0 ] int 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  str             1   29[BANK0 ] PTR const unsigned char 
  6221 ;;		 -> NULL(0), CMD_Buf(32), 
  6222 ;;  val             2   30[BANK0 ] int 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  2   25[BANK0 ] int 
  6225 ;; Registers used:
  6226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6232 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;Total ram usage:        7 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    6
  6239 ;; This function calls:
  6240 ;;		_ParseLong
  6241 ;; This function is called by:
  6242 ;;		_CMD_Execute
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function _ParseUByte
  6248  0948                     _ParseUByte:	
  6249                           
  6250                           ;incstack = 0
  6251                           ; Regs used in _ParseUByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6252                           ;ParseUByte@str stored from wreg
  6253  0948  0020               	movlb	0	; select bank0
  6254  0949  00BD               	movwf	ParseUByte@str
  6255                           
  6256                           ;strlib.c: 51: int val;
  6257                           ;strlib.c: 52: if( ParseLong(str,&val,base) != 0 || val > (255) || val < 0){
  6258  094A  303E               	movlw	(low (ParseUByte@val| 0))& (0+255)
  6259  094B  00BC               	movwf	??_ParseUByte
  6260  094C  083C               	movf	??_ParseUByte,w
  6261  094D  00B3               	movwf	ParseLong@ret
  6262  094E  083B               	movf	ParseUByte@base+1,w
  6263  094F  00B5               	movwf	ParseLong@base+1
  6264  0950  083A               	movf	ParseUByte@base,w
  6265  0951  00B4               	movwf	ParseLong@base
  6266  0952  083D               	movf	ParseUByte@str,w
  6267  0953  3188  206F  3189   	fcall	_ParseLong
  6268  0956  0020               	movlb	0	; select bank0
  6269  0957  0833               	movf	?_ParseLong,w
  6270  0958  0434               	iorwf	?_ParseLong+1,w
  6271  0959  1D03               	btfss	3,2
  6272  095A  2969               	goto	l4106
  6273  095B  083F               	movf	ParseUByte@val+1,w
  6274  095C  3A80               	xorlw	128
  6275  095D  00BC               	movwf	??_ParseUByte
  6276  095E  3081               	movlw	129
  6277  095F  023C               	subwf	??_ParseUByte,w
  6278  0960  1D03               	skipz
  6279  0961  2964               	goto	u5665
  6280  0962  3000               	movlw	0
  6281  0963  023E               	subwf	ParseUByte@val,w
  6282  0964                     u5665:	
  6283  0964  1803               	skipnc
  6284  0965  2969               	goto	l4106
  6285  0966  0020               	movlb	0	; select bank0
  6286  0967  1FBF               	btfss	ParseUByte@val+1,7
  6287  0968  296F               	goto	l4110
  6288  0969                     l4106:	
  6289                           
  6290                           ;strlib.c: 53: return -1;
  6291  0969  30FF               	movlw	255
  6292  096A  0020               	movlb	0	; select bank0
  6293  096B  00B9               	movwf	?_ParseUByte
  6294  096C  30FF               	movlw	255
  6295  096D  00BA               	movwf	?_ParseUByte+1
  6296  096E  0008               	return
  6297  096F                     l4110:	
  6298                           
  6299                           ;strlib.c: 54: }
  6300                           ;strlib.c: 55: *ret = val;
  6301  096F  083E               	movf	ParseUByte@val,w
  6302  0970  00BC               	movwf	??_ParseUByte
  6303  0971  0839               	movf	ParseUByte@ret,w
  6304  0972  0086               	movwf	6
  6305  0973  0187               	clrf	7
  6306  0974  083C               	movf	??_ParseUByte,w
  6307  0975  0081               	movwf	1
  6308                           
  6309                           ;strlib.c: 56: return 0;
  6310  0976  01B9               	clrf	?_ParseUByte
  6311  0977  01BA               	clrf	?_ParseUByte+1
  6312  0978  0008               	return
  6313  0979                     __end_of_ParseUByte:	
  6314                           
  6315                           	psect	text17
  6316  086F                     __ptext17:	
  6317 ;; *************** function _ParseLong *****************
  6318 ;; Defined at:
  6319 ;;		line 18 in file "strlib.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  str             1    wreg     PTR const unsigned char 
  6322 ;;		 -> NULL(0), CMD_Buf(32), 
  6323 ;;  ret             1   19[BANK0 ] PTR long 
  6324 ;;		 -> ParseUByte@val(2), ParseUInt@val(2), ParseByte@val(2), ParseInt@val(2), 
  6325 ;;  base            2   20[BANK0 ] int 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  str             1   23[BANK0 ] PTR const unsigned char 
  6328 ;;		 -> NULL(0), CMD_Buf(32), 
  6329 ;;  end             1   24[BANK0 ] PTR unsigned char 
  6330 ;;		 -> NULL(0), CMD_Buf(32), 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  2   19[BANK0 ] int 
  6333 ;; Registers used:
  6334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        6 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    5
  6347 ;; This function calls:
  6348 ;;		_strtol
  6349 ;; This function is called by:
  6350 ;;		_ParseUByte
  6351 ;;		_ParseInt
  6352 ;;		_ParseByte
  6353 ;;		_ParseUInt
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function _ParseLong
  6359  086F                     _ParseLong:	
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _ParseLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6363                           ;ParseLong@str stored from wreg
  6364  086F  0020               	movlb	0	; select bank0
  6365  0870  00B7               	movwf	ParseLong@str
  6366                           
  6367                           ;strlib.c: 19: char *end;
  6368                           ;strlib.c: 20: *ret = strtol(str,&end,base);
  6369  0871  3038               	movlw	(low (ParseLong@end| 0))& (0+255)
  6370  0872  00B6               	movwf	??_ParseLong
  6371  0873  0836               	movf	??_ParseLong,w
  6372  0874  00A4               	movwf	strtol@endptr
  6373  0875  0835               	movf	ParseLong@base+1,w
  6374  0876  00A6               	movwf	strtol@base+1
  6375  0877  0834               	movf	ParseLong@base,w
  6376  0878  00A5               	movwf	strtol@base
  6377  0879  0837               	movf	ParseLong@str,w
  6378  087A  3186  261F  3188   	fcall	_strtol
  6379  087D  0020               	movlb	0	; select bank0
  6380  087E  0833               	movf	ParseLong@ret,w
  6381  087F  0086               	movwf	6
  6382  0880  0187               	clrf	7
  6383  0881  0824               	movf	?_strtol,w
  6384  0882  3FC0               	movwi [0]fsr1
  6385  0883  0825               	movf	?_strtol+1,w
  6386  0884  3FC1               	movwi [1]fsr1
  6387  0885  0826               	movf	?_strtol+2,w
  6388  0886  3FC2               	movwi [2]fsr1
  6389  0887  0827               	movf	?_strtol+3,w
  6390  0888  3FC3               	movwi [3]fsr1
  6391                           
  6392                           ;strlib.c: 21: if(*end != '\0'){
  6393  0889  0838               	movf	ParseLong@end,w
  6394  088A  0086               	movwf	6
  6395  088B  3001               	movlw	1	; select bank2/3
  6396  088C  0087               	movwf	7
  6397  088D  0801               	movf	1,w
  6398  088E  1903               	btfsc	3,2
  6399  088F  2895               	goto	l3844
  6400                           
  6401                           ;strlib.c: 22: return 1;
  6402  0890  3001               	movlw	1
  6403  0891  00B3               	movwf	?_ParseLong
  6404  0892  3000               	movlw	0
  6405  0893  00B4               	movwf	?_ParseLong+1
  6406  0894  0008               	return
  6407  0895                     l3844:	
  6408                           
  6409                           ;strlib.c: 23: }
  6410                           ;strlib.c: 24: return 0;
  6411  0895  01B3               	clrf	?_ParseLong
  6412  0896  01B4               	clrf	?_ParseLong+1
  6413  0897  0008               	return
  6414  0898                     __end_of_ParseLong:	
  6415                           
  6416                           	psect	text18
  6417  061F                     __ptext18:	
  6418 ;; *************** function _strtol *****************
  6419 ;; Defined at:
  6420 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strtol.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  s               1    wreg     PTR const unsigned char 
  6423 ;;		 -> NULL(0), CMD_Buf(32), 
  6424 ;;  endptr          1    4[BANK0 ] PTR PTR unsigned char 
  6425 ;;		 -> ParseLong@end(1), 
  6426 ;;  base            2    5[BANK0 ] int 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  s               1   17[BANK0 ] PTR const unsigned char 
  6429 ;;		 -> NULL(0), CMD_Buf(32), 
  6430 ;;  a               4   13[BANK0 ] long 
  6431 ;;  c               1   18[BANK0 ] unsigned char 
  6432 ;;  sign            1   12[BANK0 ] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  4    4[BANK0 ] long 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6442 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;Total ram usage:       15 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    4
  6449 ;; This function calls:
  6450 ;;		___lmul
  6451 ;;		_isalpha
  6452 ;;		_isdigit
  6453 ;;		_isspace
  6454 ;;		_toupper
  6455 ;; This function is called by:
  6456 ;;		_ParseLong
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           
  6461                           ;psect for function _strtol
  6462  061F                     _strtol:	
  6463                           
  6464                           ;incstack = 0
  6465                           ; Regs used in _strtol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6466                           ;strtol@s stored from wreg
  6467  061F  0020               	movlb	0	; select bank0
  6468  0620  00B1               	movwf	strtol@s
  6469  0621                     l941:	
  6470  0621  0020               	movlb	0	; select bank0
  6471  0622  0831               	movf	strtol@s,w
  6472  0623  0086               	movwf	6
  6473  0624  3001               	movlw	1	; select bank2/3
  6474  0625  0087               	movwf	7
  6475  0626  0801               	movf	1,w
  6476  0627  00A8               	movwf	??_strtol
  6477  0628  0828               	movf	??_strtol,w
  6478  0629  00B2               	movwf	strtol@c
  6479  062A  3001               	movlw	1
  6480  062B  00A8               	movwf	??_strtol
  6481  062C  0828               	movf	??_strtol,w
  6482  062D  07B1               	addwf	strtol@s,f
  6483  062E  0832               	movf	strtol@c,w
  6484  062F  3197  275A  3186   	fcall	_isspace
  6485  0632  1C03               	btfss	3,0
  6486  0633  2E36               	goto	l2536
  6487  0634  0020               	movlb	0	; select bank0
  6488  0635  2E21               	goto	l941
  6489  0636                     l2536:	
  6490  0636  3000               	movlw	0
  6491  0637  0020               	movlb	0	; select bank0
  6492  0638  00B0               	movwf	strtol@a+3
  6493  0639  3000               	movlw	0
  6494  063A  00AF               	movwf	strtol@a+2
  6495  063B  3000               	movlw	0
  6496  063C  00AE               	movwf	strtol@a+1
  6497  063D  3000               	movlw	0
  6498  063E  00AD               	movwf	strtol@a
  6499  063F  01AC               	clrf	strtol@sign
  6500  0640  302D               	movlw	45
  6501  0641  0632               	xorwf	strtol@c,w
  6502  0642  1D03               	btfss	3,2
  6503  0643  2E47               	goto	l2548
  6504  0644  01AC               	clrf	strtol@sign
  6505  0645  0AAC               	incf	strtol@sign,f
  6506  0646  2E4B               	goto	l2550
  6507  0647                     l2548:	
  6508  0647  302B               	movlw	43
  6509  0648  0632               	xorwf	strtol@c,w
  6510  0649  1D03               	btfss	3,2
  6511  064A  2E57               	goto	l2554
  6512  064B                     l2550:	
  6513  064B  0831               	movf	strtol@s,w
  6514  064C  0086               	movwf	6
  6515  064D  3001               	movlw	1	; select bank2/3
  6516  064E  0087               	movwf	7
  6517  064F  0801               	movf	1,w
  6518  0650  00A8               	movwf	??_strtol
  6519  0651  0828               	movf	??_strtol,w
  6520  0652  00B2               	movwf	strtol@c
  6521  0653  3001               	movlw	1
  6522  0654  00A8               	movwf	??_strtol
  6523  0655  0828               	movf	??_strtol,w
  6524  0656  07B1               	addwf	strtol@s,f
  6525  0657                     l2554:	
  6526  0657  3030               	movlw	48
  6527  0658  0632               	xorwf	strtol@c,w
  6528  0659  1D03               	btfss	3,2
  6529  065A  2E91               	goto	l2578
  6530  065B  0831               	movf	strtol@s,w
  6531  065C  0086               	movwf	6
  6532  065D  3001               	movlw	1	; select bank2/3
  6533  065E  0087               	movwf	7
  6534  065F  0801               	movf	1,w
  6535  0660  00A8               	movwf	??_strtol
  6536  0661  0828               	movf	??_strtol,w
  6537  0662  00B2               	movwf	strtol@c
  6538  0663  3001               	movlw	1
  6539  0664  00A8               	movwf	??_strtol
  6540  0665  0828               	movf	??_strtol,w
  6541  0666  07B1               	addwf	strtol@s,f
  6542  0667  0825               	movf	strtol@base,w
  6543  0668  0426               	iorwf	strtol@base+1,w
  6544  0669  1903               	btfsc	3,2
  6545  066A  2E70               	goto	l2564
  6546  066B  3010               	movlw	16
  6547  066C  0625               	xorwf	strtol@base,w
  6548  066D  0426               	iorwf	strtol@base+1,w
  6549  066E  1D03               	btfss	3,2
  6550  066F  2E89               	goto	l2574
  6551  0670                     l2564:	
  6552  0670  3078               	movlw	120
  6553  0671  0632               	xorwf	strtol@c,w
  6554  0672  1903               	btfsc	3,2
  6555  0673  2E78               	goto	l2568
  6556  0674  3058               	movlw	88
  6557  0675  0632               	xorwf	strtol@c,w
  6558  0676  1D03               	btfss	3,2
  6559  0677  2E89               	goto	l2574
  6560  0678                     l2568:	
  6561  0678  3010               	movlw	16
  6562  0679  00A5               	movwf	strtol@base
  6563  067A  3000               	movlw	0
  6564  067B  00A6               	movwf	strtol@base+1
  6565  067C  0831               	movf	strtol@s,w
  6566  067D  0086               	movwf	6
  6567  067E  3001               	movlw	1	; select bank2/3
  6568  067F  0087               	movwf	7
  6569  0680  0801               	movf	1,w
  6570  0681  00A8               	movwf	??_strtol
  6571  0682  0828               	movf	??_strtol,w
  6572  0683  00B2               	movwf	strtol@c
  6573  0684  3001               	movlw	1
  6574  0685  00A8               	movwf	??_strtol
  6575  0686  0828               	movf	??_strtol,w
  6576  0687  07B1               	addwf	strtol@s,f
  6577  0688  2E91               	goto	l2578
  6578  0689                     l2574:	
  6579  0689  0825               	movf	strtol@base,w
  6580  068A  0426               	iorwf	strtol@base+1,w
  6581  068B  1D03               	btfss	3,2
  6582  068C  2E91               	goto	l2578
  6583  068D  3008               	movlw	8
  6584  068E  00A5               	movwf	strtol@base
  6585  068F  3000               	movlw	0
  6586  0690  00A6               	movwf	strtol@base+1
  6587  0691                     l2578:	
  6588  0691  0825               	movf	strtol@base,w
  6589  0692  0426               	iorwf	strtol@base+1,w
  6590  0693  1D03               	btfss	3,2
  6591  0694  2E99               	goto	l2582
  6592  0695  300A               	movlw	10
  6593  0696  00A5               	movwf	strtol@base
  6594  0697  3000               	movlw	0
  6595  0698  00A6               	movwf	strtol@base+1
  6596  0699                     l2582:	
  6597  0699  0832               	movf	strtol@c,w
  6598  069A  3197  2748  3186   	fcall	_isalpha
  6599  069D  1C03               	btfss	3,0
  6600  069E  2EAA               	goto	l2586
  6601  069F  0020               	movlb	0	; select bank0
  6602  06A0  0832               	movf	strtol@c,w
  6603  06A1  3197  2719  3186   	fcall	_toupper
  6604  06A4  3EC9               	addlw	201
  6605  06A5  0020               	movlb	0	; select bank0
  6606  06A6  00A8               	movwf	??_strtol
  6607  06A7  0828               	movf	??_strtol,w
  6608  06A8  00B2               	movwf	strtol@c
  6609  06A9  2EB4               	goto	l2590
  6610  06AA                     l2586:	
  6611  06AA  0020               	movlb	0	; select bank0
  6612  06AB  0832               	movf	strtol@c,w
  6613  06AC  3196  26EE  3186   	fcall	_isdigit
  6614  06AF  1C03               	btfss	3,0
  6615  06B0  2EF5               	goto	l2600
  6616  06B1  3030               	movlw	48
  6617  06B2  0020               	movlb	0	; select bank0
  6618  06B3  02B2               	subwf	strtol@c,f
  6619  06B4                     l2590:	
  6620  06B4  0826               	movf	strtol@base+1,w
  6621  06B5  3A80               	xorlw	128
  6622  06B6  3C80               	sublw	128
  6623  06B7  1D03               	skipz
  6624  06B8  2EBB               	goto	u2735
  6625  06B9  0825               	movf	strtol@base,w
  6626  06BA  0232               	subwf	strtol@c,w
  6627  06BB                     u2735:	
  6628  06BB  1803               	btfsc	3,0
  6629  06BC  2EF5               	goto	l2600
  6630  06BD  0020               	movlb	0	; select bank0
  6631  06BE  0832               	movf	strtol@c,w
  6632  06BF  00A8               	movwf	??_strtol
  6633  06C0  01A9               	clrf	??_strtol+1
  6634  06C1  01AA               	clrf	??_strtol+2
  6635  06C2  01AB               	clrf	??_strtol+3
  6636  06C3  0825               	movf	strtol@base,w
  6637  06C4  00F2               	movwf	___lmul@multiplier
  6638  06C5  0826               	movf	strtol@base+1,w
  6639  06C6  00F3               	movwf	___lmul@multiplier+1
  6640  06C7  0D89               	rlf	9,f
  6641  06C8  3B89               	subwfb	9,f
  6642  06C9  0989               	comf	9,f
  6643  06CA  00F4               	movwf	___lmul@multiplier+2
  6644  06CB  00F5               	movwf	___lmul@multiplier+3
  6645  06CC  0830               	movf	strtol@a+3,w
  6646  06CD  00F9               	movwf	___lmul@multiplicand+3
  6647  06CE  082F               	movf	strtol@a+2,w
  6648  06CF  00F8               	movwf	___lmul@multiplicand+2
  6649  06D0  082E               	movf	strtol@a+1,w
  6650  06D1  00F7               	movwf	___lmul@multiplicand+1
  6651  06D2  082D               	movf	strtol@a,w
  6652  06D3  00F6               	movwf	___lmul@multiplicand
  6653  06D4  3189  21DB  3186   	fcall	___lmul
  6654  06D7  0872               	movf	?___lmul,w
  6655  06D8  0020               	movlb	0	; select bank0
  6656  06D9  07A8               	addwf	??_strtol,f
  6657  06DA  0873               	movf	?___lmul+1,w
  6658  06DB  3DA9               	addwfc	??_strtol+1,f
  6659  06DC  0874               	movf	?___lmul+2,w
  6660  06DD  3DAA               	addwfc	??_strtol+2,f
  6661  06DE  0875               	movf	?___lmul+3,w
  6662  06DF  3DAB               	addwfc	??_strtol+3,f
  6663  06E0  082B               	movf	??_strtol+3,w
  6664  06E1  00B0               	movwf	strtol@a+3
  6665  06E2  082A               	movf	??_strtol+2,w
  6666  06E3  00AF               	movwf	strtol@a+2
  6667  06E4  0829               	movf	??_strtol+1,w
  6668  06E5  00AE               	movwf	strtol@a+1
  6669  06E6  0828               	movf	??_strtol,w
  6670  06E7  00AD               	movwf	strtol@a
  6671  06E8  0831               	movf	strtol@s,w
  6672  06E9  0086               	movwf	6
  6673  06EA  3001               	movlw	1	; select bank2/3
  6674  06EB  0087               	movwf	7
  6675  06EC  0801               	movf	1,w
  6676  06ED  00A8               	movwf	??_strtol
  6677  06EE  0828               	movf	??_strtol,w
  6678  06EF  00B2               	movwf	strtol@c
  6679  06F0  3001               	movlw	1
  6680  06F1  00A8               	movwf	??_strtol
  6681  06F2  0828               	movf	??_strtol,w
  6682  06F3  07B1               	addwf	strtol@s,f
  6683  06F4  2E99               	goto	l2582
  6684  06F5                     l2600:	
  6685  06F5  0020               	movlb	0	; select bank0
  6686  06F6  0824               	movf	strtol@endptr,w
  6687  06F7  1903               	btfsc	3,2
  6688  06F8  2F01               	goto	l2604
  6689  06F9  0831               	movf	strtol@s,w
  6690  06FA  3EFF               	addlw	-1
  6691  06FB  00A8               	movwf	??_strtol
  6692  06FC  0824               	movf	strtol@endptr,w
  6693  06FD  0086               	movwf	6
  6694  06FE  0187               	clrf	7
  6695  06FF  0828               	movf	??_strtol,w
  6696  0700  0081               	movwf	1
  6697  0701                     l2604:	
  6698  0701  082C               	movf	strtol@sign,w
  6699  0702  1903               	btfsc	3,2
  6700  0703  2F14               	goto	l2610
  6701  0704  092D               	comf	strtol@a,w
  6702  0705  00A4               	movwf	?_strtol
  6703  0706  092E               	comf	strtol@a+1,w
  6704  0707  00A5               	movwf	?_strtol+1
  6705  0708  092F               	comf	strtol@a+2,w
  6706  0709  00A6               	movwf	?_strtol+2
  6707  070A  0930               	comf	strtol@a+3,w
  6708  070B  00A7               	movwf	?_strtol+3
  6709  070C  0AA4               	incf	?_strtol,f
  6710  070D  1903               	skipnz
  6711  070E  0AA5               	incf	?_strtol+1,f
  6712  070F  1903               	skipnz
  6713  0710  0AA6               	incf	?_strtol+2,f
  6714  0711  1903               	skipnz
  6715  0712  0AA7               	incf	?_strtol+3,f
  6716  0713  0008               	return
  6717  0714                     l2610:	
  6718  0714  0830               	movf	strtol@a+3,w
  6719  0715  00A7               	movwf	?_strtol+3
  6720  0716  082F               	movf	strtol@a+2,w
  6721  0717  00A6               	movwf	?_strtol+2
  6722  0718  082E               	movf	strtol@a+1,w
  6723  0719  00A5               	movwf	?_strtol+1
  6724  071A  082D               	movf	strtol@a,w
  6725  071B  00A4               	movwf	?_strtol
  6726  071C  0008               	return
  6727  071D                     __end_of_strtol:	
  6728                           
  6729                           	psect	text19
  6730  1719                     __ptext19:	
  6731 ;; *************** function _toupper *****************
  6732 ;; Defined at:
  6733 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\toupper.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  c               1    wreg     unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  c               1    3[COMMON] unsigned char 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      unsigned char 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        2 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    2
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_CMD_Receive
  6758 ;;		_strtol
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           
  6763                           ;psect for function _toupper
  6764  1719                     _toupper:	
  6765                           
  6766                           ;incstack = 0
  6767                           ; Regs used in _toupper: [wreg+status,2+status,0]
  6768                           ;toupper@c stored from wreg
  6769  1719  00F3               	movwf	toupper@c
  6770  171A  307B               	movlw	123
  6771  171B  0273               	subwf	toupper@c,w
  6772  171C  1803               	skipnc
  6773  171D  2F26               	goto	l2462
  6774  171E  3061               	movlw	97
  6775  171F  0273               	subwf	toupper@c,w
  6776  1720  1C03               	skipc
  6777  1721  2F26               	goto	l2462
  6778  1722  30DF               	movlw	223
  6779  1723  00F2               	movwf	??_toupper
  6780  1724  0872               	movf	??_toupper,w
  6781  1725  05F3               	andwf	toupper@c,f
  6782  1726                     l2462:	
  6783  1726  0873               	movf	toupper@c,w
  6784  1727  0008               	return
  6785  1728                     __end_of_toupper:	
  6786                           
  6787                           	psect	text20
  6788  175A                     __ptext20:	
  6789 ;; *************** function _isspace *****************
  6790 ;; Defined at:
  6791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isspace.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  c               1    wreg     unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  c               1    3[COMMON] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;		None               void
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;Total ram usage:        2 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    2
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_strtol
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _isspace
  6821  175A                     _isspace:	
  6822                           
  6823                           ;incstack = 0
  6824                           ; Regs used in _isspace: [wreg+status,2+status,0]
  6825                           ;isspace@c stored from wreg
  6826  175A  00F3               	movwf	isspace@c
  6827  175B  01F2               	clrf	_isspace$1070
  6828  175C  0AF2               	incf	_isspace$1070,f
  6829  175D  3020               	movlw	32
  6830  175E  0673               	xorwf	isspace@c,w
  6831  175F  1903               	btfsc	3,2
  6832  1760  2F6A               	goto	l2502
  6833  1761  300E               	movlw	14
  6834  1762  0273               	subwf	isspace@c,w
  6835  1763  1803               	skipnc
  6836  1764  2F69               	goto	l2500
  6837  1765  3009               	movlw	9
  6838  1766  0273               	subwf	isspace@c,w
  6839  1767  1803               	skipnc
  6840  1768  2F6A               	goto	l2502
  6841  1769                     l2500:	
  6842  1769  01F2               	clrf	_isspace$1070
  6843  176A                     l2502:	
  6844  176A  0C72               	rrf	_isspace$1070,w
  6845  176B  0008               	return
  6846  176C                     __end_of_isspace:	
  6847                           
  6848                           	psect	text21
  6849  1748                     __ptext21:	
  6850 ;; *************** function _isalpha *****************
  6851 ;; Defined at:
  6852 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isalpha.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  c               1    wreg     unsigned char 
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  c               1    5[COMMON] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;		None               void
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        2 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    3
  6873 ;; This function calls:
  6874 ;;		_isupper
  6875 ;; This function is called by:
  6876 ;;		_strtol
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _isalpha
  6882  1748                     _isalpha:	
  6883                           
  6884                           ;incstack = 0
  6885                           ; Regs used in _isalpha: [wreg+status,2+status,0+pclath+cstack]
  6886                           ;isalpha@c stored from wreg
  6887  1748  00F5               	movwf	isalpha@c
  6888  1749  01F4               	clrf	_isalpha$1067
  6889  174A  0AF4               	incf	_isalpha$1067,f
  6890  174B  307B               	movlw	123
  6891  174C  0275               	subwf	isalpha@c,w
  6892  174D  1803               	skipnc
  6893  174E  2F53               	goto	l2512
  6894  174F  3061               	movlw	97
  6895  1750  0275               	subwf	isalpha@c,w
  6896  1751  1803               	skipnc
  6897  1752  2F58               	goto	l2516
  6898  1753                     l2512:	
  6899  1753  0875               	movf	isalpha@c,w
  6900  1754  3196  26FC         	fcall	_isupper
  6901  1756  1C03               	btfss	3,0
  6902  1757  01F4               	clrf	_isalpha$1067
  6903  1758                     l2516:	
  6904  1758  0C74               	rrf	_isalpha$1067,w
  6905  1759  0008               	return
  6906  175A                     __end_of_isalpha:	
  6907                           
  6908                           	psect	text22
  6909  16FC                     __ptext22:	
  6910 ;; *************** function _isupper *****************
  6911 ;; Defined at:
  6912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isupper.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  c               1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  c               1    3[COMMON] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;		None               void
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        2 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    2
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_isalpha
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function _isupper
  6942  16FC                     _isupper:	
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _isupper: [wreg+status,2+status,0]
  6946                           ;isupper@c stored from wreg
  6947  16FC  00F3               	movwf	isupper@c
  6948  16FD  01F2               	clrf	_isupper$1073
  6949  16FE  305B               	movlw	91
  6950  16FF  0273               	subwf	isupper@c,w
  6951  1700  1803               	skipnc
  6952  1701  2F08               	goto	l2452
  6953  1702  3041               	movlw	65
  6954  1703  0273               	subwf	isupper@c,w
  6955  1704  1C03               	skipc
  6956  1705  2F08               	goto	l2452
  6957  1706  01F2               	clrf	_isupper$1073
  6958  1707  0AF2               	incf	_isupper$1073,f
  6959  1708                     l2452:	
  6960  1708  0C72               	rrf	_isupper$1073,w
  6961  1709  0008               	return
  6962  170A                     __end_of_isupper:	
  6963                           
  6964                           	psect	text23
  6965  09DB                     __ptext23:	
  6966 ;; *************** function ___lmul *****************
  6967 ;; Defined at:
  6968 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  multiplier      4    2[COMMON] unsigned long 
  6971 ;;  multiplicand    4    6[COMMON] unsigned long 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  product         4    0[BANK0 ] unsigned long 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  4    2[COMMON] unsigned long 
  6976 ;; Registers used:
  6977 ;;		wreg, status,2, status,0
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:       12 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    2
  6990 ;; This function calls:
  6991 ;;		Nothing
  6992 ;; This function is called by:
  6993 ;;		_strtol
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           
  6998                           ;psect for function ___lmul
  6999  09DB                     ___lmul:	
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7003  09DB  3000               	movlw	0
  7004  09DC  0020               	movlb	0	; select bank0
  7005  09DD  00A3               	movwf	___lmul@product+3
  7006  09DE  3000               	movlw	0
  7007  09DF  00A2               	movwf	___lmul@product+2
  7008  09E0  3000               	movlw	0
  7009  09E1  00A1               	movwf	___lmul@product+1
  7010  09E2  3000               	movlw	0
  7011  09E3  00A0               	movwf	___lmul@product
  7012  09E4                     l2480:	
  7013  09E4  1C72               	btfss	___lmul@multiplier,0
  7014  09E5  29EF               	goto	l2484
  7015  09E6  0876               	movf	___lmul@multiplicand,w
  7016  09E7  0020               	movlb	0	; select bank0
  7017  09E8  07A0               	addwf	___lmul@product,f
  7018  09E9  0877               	movf	___lmul@multiplicand+1,w
  7019  09EA  3DA1               	addwfc	___lmul@product+1,f
  7020  09EB  0878               	movf	___lmul@multiplicand+2,w
  7021  09EC  3DA2               	addwfc	___lmul@product+2,f
  7022  09ED  0879               	movf	___lmul@multiplicand+3,w
  7023  09EE  3DA3               	addwfc	___lmul@product+3,f
  7024  09EF                     l2484:	
  7025  09EF  3001               	movlw	1
  7026  09F0                     u2505:	
  7027  09F0  35F6               	lslf	___lmul@multiplicand,f
  7028  09F1  0DF7               	rlf	___lmul@multiplicand+1,f
  7029  09F2  0DF8               	rlf	___lmul@multiplicand+2,f
  7030  09F3  0DF9               	rlf	___lmul@multiplicand+3,f
  7031  09F4  0B89               	decfsz	9,f
  7032  09F5  29F0               	goto	u2505
  7033  09F6  3001               	movlw	1
  7034  09F7                     u2515:	
  7035  09F7  36F5               	lsrf	___lmul@multiplier+3,f
  7036  09F8  0CF4               	rrf	___lmul@multiplier+2,f
  7037  09F9  0CF3               	rrf	___lmul@multiplier+1,f
  7038  09FA  0CF2               	rrf	___lmul@multiplier,f
  7039  09FB  0B89               	decfsz	9,f
  7040  09FC  29F7               	goto	u2515
  7041  09FD  0875               	movf	___lmul@multiplier+3,w
  7042  09FE  0474               	iorwf	___lmul@multiplier+2,w
  7043  09FF  0473               	iorwf	___lmul@multiplier+1,w
  7044  0A00  0472               	iorwf	___lmul@multiplier,w
  7045  0A01  1D03               	skipz
  7046  0A02  29E4               	goto	l2480
  7047  0A03  0020               	movlb	0	; select bank0
  7048  0A04  0823               	movf	___lmul@product+3,w
  7049  0A05  00F5               	movwf	?___lmul+3
  7050  0A06  0822               	movf	___lmul@product+2,w
  7051  0A07  00F4               	movwf	?___lmul+2
  7052  0A08  0821               	movf	___lmul@product+1,w
  7053  0A09  00F3               	movwf	?___lmul+1
  7054  0A0A  0820               	movf	___lmul@product,w
  7055  0A0B  00F2               	movwf	?___lmul
  7056  0A0C  0008               	return
  7057  0A0D                     __end_of___lmul:	
  7058                           
  7059                           	psect	text24
  7060  04CD                     __ptext24:	
  7061 ;; *************** function _CC_CheckRegister *****************
  7062 ;; Defined at:
  7063 ;;		line 11 in file "current_controller.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;		None
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  buf             1   36[BANK1 ] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;Total ram usage:       11 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    6
  7084 ;; This function calls:
  7085 ;;		_CMD_GetData
  7086 ;;		_CMD_SetData
  7087 ;;		_MCP4922_Write
  7088 ;;		___awtoft
  7089 ;;		___ftadd
  7090 ;;		___ftdiv
  7091 ;;		___ftmul
  7092 ;;		___fttol
  7093 ;;		___lwtoft
  7094 ;;		_printf
  7095 ;;		_sin
  7096 ;; This function is called by:
  7097 ;;		_main
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           
  7102                           ;psect for function _CC_CheckRegister
  7103  04CD                     _CC_CheckRegister:	
  7104                           
  7105                           ;current_controller.c: 12: uint8_t buf;
  7106                           ;current_controller.c: 14: if(CMD_GetData(0x00,&CC_Reg.Buffer) == 0){
  7107                           
  7108                           ;incstack = 0
  7109                           ; Regs used in _CC_CheckRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7110  04CD  30E5               	movlw	(low (_CC_Reg| 0))& (0+255)
  7111  04CE  0021               	movlb	1	; select bank1
  7112  04CF  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7113  04D0  083A               	movf	??_CC_CheckRegister^(0+128),w
  7114  04D1  00F2               	movwf	CMD_GetData@data
  7115  04D2  3000               	movlw	0
  7116  04D3  3197  277F  3184   	fcall	_CMD_GetData
  7117  04D6  0872               	movf	?_CMD_GetData,w
  7118  04D7  0473               	iorwf	?_CMD_GetData+1,w
  7119  04D8  1D03               	btfss	3,2
  7120  04D9  2D52               	goto	l4538
  7121                           
  7122                           ;current_controller.c: 15: if(CC_Reg.Buffer & 0x01){
  7123  04DA  0021               	movlb	1	; select bank1
  7124  04DB  1C65               	btfss	_CC_Reg^(0+128),0
  7125  04DC  2D52               	goto	l4538
  7126                           
  7127                           ;current_controller.c: 17: CC_Reg.bStart = CC_Reg.Buffer & 0x02;
  7128  04DD  0865               	movf	_CC_Reg^(0+128),w
  7129  04DE  3902               	andlw	2
  7130  04DF  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7131  04E0  083A               	movf	??_CC_CheckRegister^(0+128),w
  7132  04E1  00E8               	movwf	(_CC_Reg^(0+128)+3)
  7133                           
  7134                           ;current_controller.c: 18: CC_Reg.bDirection = CC_Reg.Buffer & 0x04;
  7135  04E2  0865               	movf	_CC_Reg^(0+128),w
  7136  04E3  3904               	andlw	4
  7137  04E4  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7138  04E5  083A               	movf	??_CC_CheckRegister^(0+128),w
  7139  04E6  00E9               	movwf	(_CC_Reg^(0+128)+4)
  7140                           
  7141                           ;current_controller.c: 19: CC_Reg.bSinMode = CC_Reg.Buffer & 0x08;
  7142  04E7  0865               	movf	_CC_Reg^(0+128),w
  7143  04E8  3908               	andlw	8
  7144  04E9  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7145  04EA  083A               	movf	??_CC_CheckRegister^(0+128),w
  7146  04EB  00EA               	movwf	(_CC_Reg^(0+128)+5)
  7147                           
  7148                           ;current_controller.c: 20: CC_Reg.bNotify = CC_Reg.Buffer & 0x80;
  7149  04EC  0865               	movf	_CC_Reg^(0+128),w
  7150  04ED  3980               	andlw	128
  7151  04EE  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7152  04EF  083A               	movf	??_CC_CheckRegister^(0+128),w
  7153  04F0  00EB               	movwf	(_CC_Reg^(0+128)+6)
  7154                           
  7155                           ;current_controller.c: 22: if(CC_Reg.bStart){
  7156  04F1  0868               	movf	(_CC_Reg^(0+128)+3),w
  7157  04F2  1903               	btfsc	3,2
  7158  04F3  2D1B               	goto	l4528
  7159                           
  7160                           ;current_controller.c: 23: CMD_GetData(0x01,&buf);
  7161  04F4  30C4               	movlw	(low (CC_CheckRegister@buf| 0))& (0+255)
  7162  04F5  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7163  04F6  083A               	movf	??_CC_CheckRegister^(0+128),w
  7164  04F7  00F2               	movwf	CMD_GetData@data
  7165  04F8  3001               	movlw	1
  7166  04F9  3197  277F  3184   	fcall	_CMD_GetData
  7167                           
  7168                           ;current_controller.c: 24: CC_Reg.Current = buf;
  7169  04FC  0021               	movlb	1	; select bank1
  7170  04FD  0844               	movf	CC_CheckRegister@buf^(0+128),w
  7171  04FE  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7172  04FF  01BB               	clrf	(??_CC_CheckRegister^(0+128)+1)
  7173  0500  083A               	movf	??_CC_CheckRegister^(0+128),w
  7174  0501  00E6               	movwf	(_CC_Reg^(0+128)+1)
  7175  0502  083B               	movf	(??_CC_CheckRegister+1)^(0+128),w
  7176  0503  00E7               	movwf	((_CC_Reg+1)^(0+128)+1)
  7177                           
  7178                           ;current_controller.c: 25: CMD_GetData(0x02,&buf);
  7179  0504  30C4               	movlw	(low (CC_CheckRegister@buf| 0))& (0+255)
  7180  0505  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7181  0506  083A               	movf	??_CC_CheckRegister^(0+128),w
  7182  0507  00F2               	movwf	CMD_GetData@data
  7183  0508  3002               	movlw	2
  7184  0509  3197  277F  3184   	fcall	_CMD_GetData
  7185                           
  7186                           ;current_controller.c: 26: CC_Reg.Current |= ( buf & 0x0f ) << 8;
  7187  050C  0021               	movlb	1	; select bank1
  7188  050D  0844               	movf	CC_CheckRegister@buf^(0+128),w
  7189  050E  390F               	andlw	15
  7190  050F  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7191  0510  01BB               	clrf	(??_CC_CheckRegister^(0+128)+1)
  7192  0511  083A               	movf	??_CC_CheckRegister^(0+128),w
  7193  0512  00BB               	movwf	(??_CC_CheckRegister^(0+128)+1)
  7194  0513  01BA               	clrf	??_CC_CheckRegister^(0+128)
  7195  0514  083A               	movf	??_CC_CheckRegister^(0+128),w
  7196  0515  04E6               	iorwf	(_CC_Reg^(0+128)+1),f
  7197  0516  083B               	movf	(??_CC_CheckRegister+1)^(0+128),w
  7198  0517  04E7               	iorwf	((_CC_Reg+1)^(0+128)+1),f
  7199                           
  7200                           ;current_controller.c: 27: Angle = 0;
  7201  0518  01DD               	clrf	_Angle^(0+128)
  7202  0519  01DE               	clrf	(_Angle+1)^(0+128)
  7203                           
  7204                           ;current_controller.c: 28: }
  7205  051A  2D1D               	goto	l4530
  7206  051B                     l4528:	
  7207                           
  7208                           ;current_controller.c: 29: else{
  7209                           ;current_controller.c: 30: CC_Reg.Current = 0;
  7210  051B  01E6               	clrf	(_CC_Reg^(0+128)+1)
  7211  051C  01E7               	clrf	((_CC_Reg+1)^(0+128)+1)
  7212  051D                     l4530:	
  7213                           
  7214                           ;current_controller.c: 31: }
  7215                           ;current_controller.c: 33: if(CC_Reg.bDirection){
  7216  051D  0869               	movf	(_CC_Reg^(0+128)+4),w
  7217  051E  1903               	btfsc	3,2
  7218  051F  2D23               	goto	l72
  7219                           
  7220                           ;current_controller.c: 34: do { LATCbits.LATC3 = 1; } while(0);
  7221  0520  0022               	movlb	2	; select bank2
  7222  0521  158E               	bsf	14,3	;volatile
  7223                           
  7224                           ;current_controller.c: 35: }
  7225  0522  2D25               	goto	l4532
  7226  0523                     l72:	
  7227                           ;current_controller.c: 36: else{
  7228                           ;current_controller.c: 37: do { LATCbits.LATC3 = 0; } while(0);
  7229                           
  7230  0523  0022               	movlb	2	; select bank2
  7231  0524  118E               	bcf	14,3	;volatile
  7232  0525                     l4532:	
  7233                           
  7234                           ;current_controller.c: 38: }
  7235                           ;current_controller.c: 40: if(CC_Reg.bNotify){
  7236  0525  0021               	movlb	1	; select bank1
  7237  0526  086B               	movf	(_CC_Reg^(0+128)+6),w
  7238  0527  1903               	btfsc	3,2
  7239  0528  2D48               	goto	l4536
  7240                           
  7241                           ;current_controller.c: 41: printf("Notify:Reg[%xh],Current[%d]",CC_Reg.Buffer,CC_Reg.Cur
      +                          rent,"\r\n");
  7242  0529  302D               	movlw	low (STR_18| (0+32768))
  7243  052A  0020               	movlb	0	; select bank0
  7244  052B  00A6               	movwf	printf@f
  7245  052C  3090               	movlw	high (STR_18| (0+32768))
  7246  052D  00A7               	movwf	printf@f+1
  7247  052E  0021               	movlb	1	; select bank1
  7248  052F  0865               	movf	_CC_Reg^(0+128),w
  7249  0530  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7250  0531  01BB               	clrf	(??_CC_CheckRegister^(0+128)+1)
  7251  0532  083A               	movf	??_CC_CheckRegister^(0+128),w
  7252  0533  0020               	movlb	0	; select bank0
  7253  0534  00A8               	movwf	?_printf+2
  7254  0535  0021               	movlb	1	; select bank1
  7255  0536  083B               	movf	(??_CC_CheckRegister+1)^(0+128),w
  7256  0537  0020               	movlb	0	; select bank0
  7257  0538  00A9               	movwf	?_printf+3
  7258  0539  0021               	movlb	1	; select bank1
  7259  053A  0867               	movf	((_CC_Reg+1)^(0+128)+1),w
  7260  053B  0020               	movlb	0	; select bank0
  7261  053C  00AB               	movwf	?_printf+5
  7262  053D  0021               	movlb	1	; select bank1
  7263  053E  0866               	movf	(_CC_Reg^(0+128)+1),w
  7264  053F  0020               	movlb	0	; select bank0
  7265  0540  00AA               	movwf	?_printf+4
  7266  0541  307B               	movlw	low (STR_4| (0+32768))
  7267  0542  00AC               	movwf	low ((?_printf| 0+6))
  7268  0543  3090               	movlw	high (STR_4| (0+32768))
  7269  0544  00AD               	movwf	(low ((?_printf| 0+6))+1)
  7270  0545  3180  203B  3184   	fcall	_printf
  7271  0548                     l4536:	
  7272                           
  7273                           ;current_controller.c: 42: }
  7274                           ;current_controller.c: 44: CMD_SetData(0x00,CC_Reg.Buffer & (~0x01));
  7275  0548  0021               	movlb	1	; select bank1
  7276  0549  0865               	movf	_CC_Reg^(0+128),w
  7277  054A  39FE               	andlw	254
  7278  054B  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7279  054C  083A               	movf	??_CC_CheckRegister^(0+128),w
  7280  054D  00F2               	movwf	CMD_SetData@data
  7281  054E  3000               	movlw	0
  7282  054F  3196  26E0  3184   	fcall	_CMD_SetData
  7283  0552                     l4538:	
  7284                           
  7285                           ;current_controller.c: 45: }
  7286                           ;current_controller.c: 46: }
  7287                           ;current_controller.c: 48: if(CC_Reg.bStart){
  7288  0552  0021               	movlb	1	; select bank1
  7289  0553  0868               	movf	(_CC_Reg^(0+128)+3),w
  7290  0554  1903               	btfsc	3,2
  7291  0555  0008               	return
  7292                           
  7293                           ;current_controller.c: 49: if(CC_Reg.bSinMode){
  7294  0556  086A               	movf	(_CC_Reg^(0+128)+5),w
  7295  0557  1903               	btfsc	3,2
  7296  0558  2E18               	goto	l4554
  7297                           
  7298                           ;current_controller.c: 50: MCP4922_Write((uint16_t)( sin( ( Angle / 180.0 ) * 3.14159265
      +                          358979323846 ) * (CC_Reg.Current/2) + CC_Reg.Current/2 ));
  7299  0559  085E               	movf	(_Angle+1)^(0+128),w
  7300  055A  0020               	movlb	0	; select bank0
  7301  055B  00A1               	movwf	___awtoft@c+1
  7302  055C  0021               	movlb	1	; select bank1
  7303  055D  085D               	movf	_Angle^(0+128),w
  7304  055E  0020               	movlb	0	; select bank0
  7305  055F  00A0               	movwf	___awtoft@c
  7306  0560  3187  27DA  3184   	fcall	___awtoft
  7307  0563  0020               	movlb	0	; select bank0
  7308  0564  0820               	movf	?___awtoft,w
  7309  0565  00A9               	movwf	___ftdiv@f1
  7310  0566  0821               	movf	?___awtoft+1,w
  7311  0567  00AA               	movwf	___ftdiv@f1+1
  7312  0568  0822               	movf	?___awtoft+2,w
  7313  0569  00AB               	movwf	___ftdiv@f1+2
  7314  056A  3000               	movlw	0
  7315  056B  00A6               	movwf	___ftdiv@f2
  7316  056C  3034               	movlw	52
  7317  056D  00A7               	movwf	___ftdiv@f2+1
  7318  056E  3043               	movlw	67
  7319  056F  00A8               	movwf	___ftdiv@f2+2
  7320  0570  318D  25AD  3184   	fcall	___ftdiv
  7321  0573  0020               	movlb	0	; select bank0
  7322  0574  0826               	movf	?___ftdiv,w
  7323  0575  00B9               	movwf	___ftmul@f2
  7324  0576  0827               	movf	?___ftdiv+1,w
  7325  0577  00BA               	movwf	___ftmul@f2+1
  7326  0578  0828               	movf	?___ftdiv+2,w
  7327  0579  00BB               	movwf	___ftmul@f2+2
  7328  057A  3010               	movlw	16
  7329  057B  00B6               	movwf	___ftmul@f1
  7330  057C  3049               	movlw	73
  7331  057D  00B7               	movwf	___ftmul@f1+1
  7332  057E  3040               	movlw	64
  7333  057F  00B8               	movwf	___ftmul@f1+2
  7334  0580  318E  2656  3184   	fcall	___ftmul
  7335  0583  0020               	movlb	0	; select bank0
  7336  0584  0836               	movf	?___ftmul,w
  7337  0585  0021               	movlb	1	; select bank1
  7338  0586  00BE               	movwf	_CC_CheckRegister$1301^(0+128)
  7339  0587  0020               	movlb	0	; select bank0
  7340  0588  0837               	movf	?___ftmul+1,w
  7341  0589  0021               	movlb	1	; select bank1
  7342  058A  00BF               	movwf	(_CC_CheckRegister$1301+1)^(0+128)
  7343  058B  0020               	movlb	0	; select bank0
  7344  058C  0838               	movf	?___ftmul+2,w
  7345  058D  0021               	movlb	1	; select bank1
  7346  058E  00C0               	movwf	(_CC_CheckRegister$1301+2)^(0+128)
  7347                           
  7348                           ;current_controller.c: 50: MCP4922_Write((uint16_t)( sin( ( Angle / 180.0 ) * 3.14159265
      +                          358979323846 ) * (CC_Reg.Current/2) + CC_Reg.Current/2 ));
  7349  058F  083E               	movf	_CC_CheckRegister$1301^(0+128),w
  7350  0590  00AB               	movwf	sin@f^(0+128)
  7351  0591  083F               	movf	(_CC_CheckRegister$1301+1)^(0+128),w
  7352  0592  00AC               	movwf	(sin@f+1)^(0+128)
  7353  0593  0840               	movf	(_CC_CheckRegister$1301+2)^(0+128),w
  7354  0594  00AD               	movwf	(sin@f+2)^(0+128)
  7355  0595  3183  2311  3184   	fcall	_sin
  7356  0598  0021               	movlb	1	; select bank1
  7357  0599  082B               	movf	?_sin^(0+128),w
  7358  059A  00C1               	movwf	_CC_CheckRegister$1302^(0+128)
  7359  059B  082C               	movf	(?_sin+1)^(0+128),w
  7360  059C  00C2               	movwf	(_CC_CheckRegister$1302+1)^(0+128)
  7361  059D  082D               	movf	(?_sin+2)^(0+128),w
  7362  059E  00C3               	movwf	(_CC_CheckRegister$1302+2)^(0+128)
  7363                           
  7364                           ;current_controller.c: 50: MCP4922_Write((uint16_t)( sin( ( Angle / 180.0 ) * 3.14159265
      +                          358979323846 ) * (CC_Reg.Current/2) + CC_Reg.Current/2 ));
  7365  059F  0841               	movf	_CC_CheckRegister$1302^(0+128),w
  7366  05A0  0020               	movlb	0	; select bank0
  7367  05A1  00B9               	movwf	___ftmul@f2
  7368  05A2  0021               	movlb	1	; select bank1
  7369  05A3  0842               	movf	(_CC_CheckRegister$1302+1)^(0+128),w
  7370  05A4  0020               	movlb	0	; select bank0
  7371  05A5  00BA               	movwf	___ftmul@f2+1
  7372  05A6  0021               	movlb	1	; select bank1
  7373  05A7  0843               	movf	(_CC_CheckRegister$1302+2)^(0+128),w
  7374  05A8  0020               	movlb	0	; select bank0
  7375  05A9  00BB               	movwf	___ftmul@f2+2
  7376  05AA  3001               	movlw	1
  7377  05AB  3EE5               	addlw	(low (_CC_Reg| 0))& (0+255)
  7378  05AC  0086               	movwf	6
  7379  05AD  0187               	clrf	7
  7380  05AE  3F40               	moviw [0]fsr1
  7381  05AF  0021               	movlb	1	; select bank1
  7382  05B0  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7383  05B1  3F41               	moviw [1]fsr1
  7384  05B2  00BB               	movwf	(??_CC_CheckRegister^(0+128)+1)
  7385  05B3  36BB               	lsrf	(??_CC_CheckRegister^(0+128)+1),f
  7386  05B4  0CBA               	rrf	??_CC_CheckRegister^(0+128),f
  7387  05B5  083A               	movf	??_CC_CheckRegister^(0+128),w
  7388  05B6  0020               	movlb	0	; select bank0
  7389  05B7  00A0               	movwf	___lwtoft@c
  7390  05B8  0021               	movlb	1	; select bank1
  7391  05B9  083B               	movf	(??_CC_CheckRegister+1)^(0+128),w
  7392  05BA  0020               	movlb	0	; select bank0
  7393  05BB  00A1               	movwf	___lwtoft@c+1
  7394  05BC  3188  2001  3184   	fcall	___lwtoft
  7395  05BF  0020               	movlb	0	; select bank0
  7396  05C0  0820               	movf	?___lwtoft,w
  7397  05C1  00B6               	movwf	___ftmul@f1
  7398  05C2  0821               	movf	?___lwtoft+1,w
  7399  05C3  00B7               	movwf	___ftmul@f1+1
  7400  05C4  0822               	movf	?___lwtoft+2,w
  7401  05C5  00B8               	movwf	___ftmul@f1+2
  7402  05C6  318E  2656  3184   	fcall	___ftmul
  7403  05C9  0020               	movlb	0	; select bank0
  7404  05CA  0836               	movf	?___ftmul,w
  7405  05CB  00C9               	movwf	___ftadd@f2
  7406  05CC  0837               	movf	?___ftmul+1,w
  7407  05CD  00CA               	movwf	___ftadd@f2+1
  7408  05CE  0838               	movf	?___ftmul+2,w
  7409  05CF  00CB               	movwf	___ftadd@f2+2
  7410  05D0  3001               	movlw	1
  7411  05D1  3EE5               	addlw	(low (_CC_Reg| 0))& (0+255)
  7412  05D2  0086               	movwf	6
  7413  05D3  0187               	clrf	7
  7414  05D4  3F40               	moviw [0]fsr1
  7415  05D5  0021               	movlb	1	; select bank1
  7416  05D6  00BC               	movwf	(??_CC_CheckRegister+2)^(0+128)
  7417  05D7  3F41               	moviw [1]fsr1
  7418  05D8  00BD               	movwf	((??_CC_CheckRegister+2)^(0+128)+1)
  7419  05D9  36BD               	lsrf	((??_CC_CheckRegister+2)^(0+128)+1),f
  7420  05DA  0CBC               	rrf	(??_CC_CheckRegister+2)^(0+128),f
  7421  05DB  083C               	movf	(??_CC_CheckRegister+2)^(0+128),w
  7422  05DC  0020               	movlb	0	; select bank0
  7423  05DD  00A0               	movwf	___lwtoft@c
  7424  05DE  0021               	movlb	1	; select bank1
  7425  05DF  083D               	movf	(??_CC_CheckRegister+3)^(0+128),w
  7426  05E0  0020               	movlb	0	; select bank0
  7427  05E1  00A1               	movwf	___lwtoft@c+1
  7428  05E2  3188  2001  3184   	fcall	___lwtoft
  7429  05E5  0020               	movlb	0	; select bank0
  7430  05E6  0820               	movf	?___lwtoft,w
  7431  05E7  00C6               	movwf	___ftadd@f1
  7432  05E8  0821               	movf	?___lwtoft+1,w
  7433  05E9  00C7               	movwf	___ftadd@f1+1
  7434  05EA  0822               	movf	?___lwtoft+2,w
  7435  05EB  00C8               	movwf	___ftadd@f1+2
  7436  05EC  318F  270A  3184   	fcall	___ftadd
  7437  05EF  0020               	movlb	0	; select bank0
  7438  05F0  0846               	movf	?___ftadd,w
  7439  05F1  00D3               	movwf	___fttol@f1
  7440  05F2  0847               	movf	?___ftadd+1,w
  7441  05F3  00D4               	movwf	___fttol@f1+1
  7442  05F4  0848               	movf	?___ftadd+2,w
  7443  05F5  00D5               	movwf	___fttol@f1+2
  7444  05F6  318C  248C  3184   	fcall	___fttol
  7445  05F9  0020               	movlb	0	; select bank0
  7446  05FA  0854               	movf	?___fttol+1,w
  7447  05FB  0021               	movlb	1	; select bank1
  7448  05FC  00B9               	movwf	(MCP4922_Write@val+1)^(0+128)
  7449  05FD  0020               	movlb	0	; select bank0
  7450  05FE  0853               	movf	?___fttol,w
  7451  05FF  0021               	movlb	1	; select bank1
  7452  0600  00B8               	movwf	MCP4922_Write@val^(0+128)
  7453  0601  3197  270A  3184   	fcall	_MCP4922_Write
  7454                           
  7455                           ;current_controller.c: 51: Angle++;
  7456  0604  3001               	movlw	1
  7457  0605  0021               	movlb	1	; select bank1
  7458  0606  07DD               	addwf	_Angle^(0+128),f
  7459  0607  3000               	movlw	0
  7460  0608  3DDE               	addwfc	(_Angle+1)^(0+128),f
  7461                           
  7462                           ;current_controller.c: 52: if(Angle > 360){
  7463  0609  085E               	movf	(_Angle+1)^(0+128),w
  7464  060A  3A80               	xorlw	128
  7465  060B  00BA               	movwf	??_CC_CheckRegister^(0+128)
  7466  060C  3081               	movlw	129
  7467  060D  023A               	subwf	??_CC_CheckRegister^(0+128),w
  7468  060E  1D03               	skipz
  7469  060F  2E12               	goto	u6505
  7470  0610  3069               	movlw	105
  7471  0611  025D               	subwf	_Angle^(0+128),w
  7472  0612                     u6505:	
  7473  0612  1C03               	skipc
  7474  0613  0008               	return
  7475                           
  7476                           ;current_controller.c: 53: Angle = 0;
  7477  0614  0021               	movlb	1	; select bank1
  7478  0615  01DD               	clrf	_Angle^(0+128)
  7479  0616  01DE               	clrf	(_Angle+1)^(0+128)
  7480                           
  7481                           ;current_controller.c: 54: }
  7482                           ;current_controller.c: 55: }
  7483  0617  0008               	return
  7484  0618                     l4554:	
  7485                           
  7486                           ;current_controller.c: 56: else{
  7487                           ;current_controller.c: 57: MCP4922_Write(CC_Reg.Current);
  7488  0618  0867               	movf	((_CC_Reg+1)^(0+128)+1),w
  7489  0619  00B9               	movwf	(MCP4922_Write@val+1)^(0+128)
  7490  061A  0866               	movf	(_CC_Reg^(0+128)+1),w
  7491  061B  00B8               	movwf	MCP4922_Write@val^(0+128)
  7492  061C  3197  270A         	fcall	_MCP4922_Write
  7493  061E  0008               	return
  7494  061F                     __end_of_CC_CheckRegister:	
  7495                           
  7496                           	psect	text25
  7497  0311                     __ptext25:	
  7498 ;; *************** function _sin *****************
  7499 ;; Defined at:
  7500 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\sin.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  f               3   11[BANK1 ] void 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  x2              3   20[BANK1 ] void 
  7505 ;;  y               3   14[BANK1 ] void 
  7506 ;;  sgn             1   23[BANK1 ] unsigned char 
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  3   11[BANK1 ] unsigned char 
  7509 ;; Registers used:
  7510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7516 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;Total ram usage:       14 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    5
  7523 ;; This function calls:
  7524 ;;		___ftadd
  7525 ;;		___ftdiv
  7526 ;;		___ftge
  7527 ;;		___ftmul
  7528 ;;		___ftneg
  7529 ;;		___ftsub
  7530 ;;		_eval_poly
  7531 ;;		_floor
  7532 ;; This function is called by:
  7533 ;;		_CC_CheckRegister
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           
  7538                           ;psect for function _sin
  7539  0311                     _sin:	
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7543  0311  0021               	movlb	1	; select bank1
  7544  0312  01B7               	clrf	sin@sgn^(0+128)
  7545  0313  082B               	movf	sin@f^(0+128),w
  7546  0314  00F2               	movwf	___ftge@ff1
  7547  0315  082C               	movf	(sin@f+1)^(0+128),w
  7548  0316  00F3               	movwf	___ftge@ff1+1
  7549  0317  082D               	movf	(sin@f+2)^(0+128),w
  7550  0318  00F4               	movwf	___ftge@ff1+2
  7551  0319  3000               	movlw	0
  7552  031A  00F5               	movwf	___ftge@ff2
  7553  031B  3000               	movlw	0
  7554  031C  00F6               	movwf	___ftge@ff2+1
  7555  031D  3000               	movlw	0
  7556  031E  00F7               	movwf	___ftge@ff2+2
  7557  031F  318A  22B3  3183   	fcall	___ftge
  7558  0322  1803               	btfsc	3,0
  7559  0323  2B37               	goto	l4450
  7560  0324  0021               	movlb	1	; select bank1
  7561  0325  082B               	movf	sin@f^(0+128),w
  7562  0326  00F2               	movwf	___ftneg@f1
  7563  0327  082C               	movf	(sin@f+1)^(0+128),w
  7564  0328  00F3               	movwf	___ftneg@f1+1
  7565  0329  082D               	movf	(sin@f+2)^(0+128),w
  7566  032A  00F4               	movwf	___ftneg@f1+2
  7567  032B  3196  26BC  3183   	fcall	___ftneg
  7568  032E  0872               	movf	?___ftneg,w
  7569  032F  0021               	movlb	1	; select bank1
  7570  0330  00AB               	movwf	sin@f^(0+128)
  7571  0331  0873               	movf	?___ftneg+1,w
  7572  0332  00AC               	movwf	(sin@f+1)^(0+128)
  7573  0333  0874               	movf	?___ftneg+2,w
  7574  0334  00AD               	movwf	(sin@f+2)^(0+128)
  7575  0335  01B7               	clrf	sin@sgn^(0+128)
  7576  0336  0AB7               	incf	sin@sgn^(0+128),f
  7577  0337                     l4450:	
  7578  0337  30FA               	movlw	250
  7579  0338  0020               	movlb	0	; select bank0
  7580  0339  00B6               	movwf	___ftmul@f1
  7581  033A  3022               	movlw	34
  7582  033B  00B7               	movwf	___ftmul@f1+1
  7583  033C  303E               	movlw	62
  7584  033D  00B8               	movwf	___ftmul@f1+2
  7585  033E  0021               	movlb	1	; select bank1
  7586  033F  082B               	movf	sin@f^(0+128),w
  7587  0340  0020               	movlb	0	; select bank0
  7588  0341  00B9               	movwf	___ftmul@f2
  7589  0342  0021               	movlb	1	; select bank1
  7590  0343  082C               	movf	(sin@f+1)^(0+128),w
  7591  0344  0020               	movlb	0	; select bank0
  7592  0345  00BA               	movwf	___ftmul@f2+1
  7593  0346  0021               	movlb	1	; select bank1
  7594  0347  082D               	movf	(sin@f+2)^(0+128),w
  7595  0348  0020               	movlb	0	; select bank0
  7596  0349  00BB               	movwf	___ftmul@f2+2
  7597  034A  318E  2656  3183   	fcall	___ftmul
  7598  034D  0020               	movlb	0	; select bank0
  7599  034E  0836               	movf	?___ftmul,w
  7600  034F  0021               	movlb	1	; select bank1
  7601  0350  00AB               	movwf	sin@f^(0+128)
  7602  0351  0020               	movlb	0	; select bank0
  7603  0352  0837               	movf	?___ftmul+1,w
  7604  0353  0021               	movlb	1	; select bank1
  7605  0354  00AC               	movwf	(sin@f+1)^(0+128)
  7606  0355  0020               	movlb	0	; select bank0
  7607  0356  0838               	movf	?___ftmul+2,w
  7608  0357  0021               	movlb	1	; select bank1
  7609  0358  00AD               	movwf	(sin@f+2)^(0+128)
  7610  0359  082B               	movf	sin@f^(0+128),w
  7611  035A  0020               	movlb	0	; select bank0
  7612  035B  00E9               	movwf	floor@x
  7613  035C  0021               	movlb	1	; select bank1
  7614  035D  082C               	movf	(sin@f+1)^(0+128),w
  7615  035E  0020               	movlb	0	; select bank0
  7616  035F  00EA               	movwf	floor@x+1
  7617  0360  0021               	movlb	1	; select bank1
  7618  0361  082D               	movf	(sin@f+2)^(0+128),w
  7619  0362  0020               	movlb	0	; select bank0
  7620  0363  00EB               	movwf	floor@x+2
  7621  0364  318D  2513  3183   	fcall	_floor
  7622  0367  0020               	movlb	0	; select bank0
  7623  0368  0869               	movf	?_floor,w
  7624  0369  0021               	movlb	1	; select bank1
  7625  036A  00A5               	movwf	___ftsub@f2^(0+128)
  7626  036B  0020               	movlb	0	; select bank0
  7627  036C  086A               	movf	?_floor+1,w
  7628  036D  0021               	movlb	1	; select bank1
  7629  036E  00A6               	movwf	(___ftsub@f2+1)^(0+128)
  7630  036F  0020               	movlb	0	; select bank0
  7631  0370  086B               	movf	?_floor+2,w
  7632  0371  0021               	movlb	1	; select bank1
  7633  0372  00A7               	movwf	(___ftsub@f2+2)^(0+128)
  7634  0373  082B               	movf	sin@f^(0+128),w
  7635  0374  00A8               	movwf	___ftsub@f1^(0+128)
  7636  0375  082C               	movf	(sin@f+1)^(0+128),w
  7637  0376  00A9               	movwf	(___ftsub@f1+1)^(0+128)
  7638  0377  082D               	movf	(sin@f+2)^(0+128),w
  7639  0378  00AA               	movwf	(___ftsub@f1+2)^(0+128)
  7640  0379  3189  211A  3183   	fcall	___ftsub
  7641  037C  0021               	movlb	1	; select bank1
  7642  037D  0825               	movf	?___ftsub^(0+128),w
  7643  037E  00AB               	movwf	sin@f^(0+128)
  7644  037F  0826               	movf	(?___ftsub+1)^(0+128),w
  7645  0380  00AC               	movwf	(sin@f+1)^(0+128)
  7646  0381  0827               	movf	(?___ftsub+2)^(0+128),w
  7647  0382  00AD               	movwf	(sin@f+2)^(0+128)
  7648  0383  3000               	movlw	0
  7649  0384  0020               	movlb	0	; select bank0
  7650  0385  00B6               	movwf	___ftmul@f1
  7651  0386  3080               	movlw	128
  7652  0387  00B7               	movwf	___ftmul@f1+1
  7653  0388  3040               	movlw	64
  7654  0389  00B8               	movwf	___ftmul@f1+2
  7655  038A  0021               	movlb	1	; select bank1
  7656  038B  082B               	movf	sin@f^(0+128),w
  7657  038C  0020               	movlb	0	; select bank0
  7658  038D  00B9               	movwf	___ftmul@f2
  7659  038E  0021               	movlb	1	; select bank1
  7660  038F  082C               	movf	(sin@f+1)^(0+128),w
  7661  0390  0020               	movlb	0	; select bank0
  7662  0391  00BA               	movwf	___ftmul@f2+1
  7663  0392  0021               	movlb	1	; select bank1
  7664  0393  082D               	movf	(sin@f+2)^(0+128),w
  7665  0394  0020               	movlb	0	; select bank0
  7666  0395  00BB               	movwf	___ftmul@f2+2
  7667  0396  318E  2656  3183   	fcall	___ftmul
  7668  0399  0020               	movlb	0	; select bank0
  7669  039A  0836               	movf	?___ftmul,w
  7670  039B  0021               	movlb	1	; select bank1
  7671  039C  00AB               	movwf	sin@f^(0+128)
  7672  039D  0020               	movlb	0	; select bank0
  7673  039E  0837               	movf	?___ftmul+1,w
  7674  039F  0021               	movlb	1	; select bank1
  7675  03A0  00AC               	movwf	(sin@f+1)^(0+128)
  7676  03A1  0020               	movlb	0	; select bank0
  7677  03A2  0838               	movf	?___ftmul+2,w
  7678  03A3  0021               	movlb	1	; select bank1
  7679  03A4  00AD               	movwf	(sin@f+2)^(0+128)
  7680  03A5  3000               	movlw	0
  7681  03A6  00F2               	movwf	___ftge@ff1
  7682  03A7  3000               	movlw	0
  7683  03A8  00F3               	movwf	___ftge@ff1+1
  7684  03A9  3040               	movlw	64
  7685  03AA  00F4               	movwf	___ftge@ff1+2
  7686  03AB  082B               	movf	sin@f^(0+128),w
  7687  03AC  00F5               	movwf	___ftge@ff2
  7688  03AD  082C               	movf	(sin@f+1)^(0+128),w
  7689  03AE  00F6               	movwf	___ftge@ff2+1
  7690  03AF  082D               	movf	(sin@f+2)^(0+128),w
  7691  03B0  00F7               	movwf	___ftge@ff2+2
  7692  03B1  318A  22B3  3183   	fcall	___ftge
  7693  03B4  1803               	btfsc	3,0
  7694  03B5  2BD8               	goto	l4462
  7695  03B6  3000               	movlw	0
  7696  03B7  0021               	movlb	1	; select bank1
  7697  03B8  00A5               	movwf	___ftsub@f2^(0+128)
  7698  03B9  3000               	movlw	0
  7699  03BA  00A6               	movwf	(___ftsub@f2+1)^(0+128)
  7700  03BB  3040               	movlw	64
  7701  03BC  00A7               	movwf	(___ftsub@f2+2)^(0+128)
  7702  03BD  082B               	movf	sin@f^(0+128),w
  7703  03BE  00A8               	movwf	___ftsub@f1^(0+128)
  7704  03BF  082C               	movf	(sin@f+1)^(0+128),w
  7705  03C0  00A9               	movwf	(___ftsub@f1+1)^(0+128)
  7706  03C1  082D               	movf	(sin@f+2)^(0+128),w
  7707  03C2  00AA               	movwf	(___ftsub@f1+2)^(0+128)
  7708  03C3  3189  211A  3183   	fcall	___ftsub
  7709  03C6  0021               	movlb	1	; select bank1
  7710  03C7  0825               	movf	?___ftsub^(0+128),w
  7711  03C8  00AB               	movwf	sin@f^(0+128)
  7712  03C9  0826               	movf	(?___ftsub+1)^(0+128),w
  7713  03CA  00AC               	movwf	(sin@f+1)^(0+128)
  7714  03CB  0827               	movf	(?___ftsub+2)^(0+128),w
  7715  03CC  00AD               	movwf	(sin@f+2)^(0+128)
  7716  03CD  0837               	movf	sin@sgn^(0+128),w
  7717  03CE  1D03               	btfss	3,2
  7718  03CF  2BD2               	goto	u6330
  7719  03D0  3001               	movlw	1
  7720  03D1  2BD3               	goto	u6340
  7721  03D2                     u6330:	
  7722  03D2  3000               	movlw	0
  7723  03D3                     u6340:	
  7724  03D3  0020               	movlb	0	; select bank0
  7725  03D4  00ED               	movwf	??_sin
  7726  03D5  086D               	movf	??_sin,w
  7727  03D6  0021               	movlb	1	; select bank1
  7728  03D7  00B7               	movwf	sin@sgn^(0+128)
  7729  03D8                     l4462:	
  7730  03D8  3000               	movlw	0
  7731  03D9  00F2               	movwf	___ftge@ff1
  7732  03DA  3080               	movlw	128
  7733  03DB  00F3               	movwf	___ftge@ff1+1
  7734  03DC  303F               	movlw	63
  7735  03DD  00F4               	movwf	___ftge@ff1+2
  7736  03DE  0021               	movlb	1	; select bank1
  7737  03DF  082B               	movf	sin@f^(0+128),w
  7738  03E0  00F5               	movwf	___ftge@ff2
  7739  03E1  082C               	movf	(sin@f+1)^(0+128),w
  7740  03E2  00F6               	movwf	___ftge@ff2+1
  7741  03E3  082D               	movf	(sin@f+2)^(0+128),w
  7742  03E4  00F7               	movwf	___ftge@ff2+2
  7743  03E5  318A  22B3  3183   	fcall	___ftge
  7744  03E8  1803               	btfsc	3,0
  7745  03E9  2C11               	goto	l906
  7746  03EA  3000               	movlw	0
  7747  03EB  0020               	movlb	0	; select bank0
  7748  03EC  00C6               	movwf	___ftadd@f1
  7749  03ED  3000               	movlw	0
  7750  03EE  00C7               	movwf	___ftadd@f1+1
  7751  03EF  3040               	movlw	64
  7752  03F0  00C8               	movwf	___ftadd@f1+2
  7753  03F1  0021               	movlb	1	; select bank1
  7754  03F2  082B               	movf	sin@f^(0+128),w
  7755  03F3  00F2               	movwf	___ftneg@f1
  7756  03F4  082C               	movf	(sin@f+1)^(0+128),w
  7757  03F5  00F3               	movwf	___ftneg@f1+1
  7758  03F6  082D               	movf	(sin@f+2)^(0+128),w
  7759  03F7  00F4               	movwf	___ftneg@f1+2
  7760  03F8  3196  26BC  3183   	fcall	___ftneg
  7761  03FB  0872               	movf	?___ftneg,w
  7762  03FC  0020               	movlb	0	; select bank0
  7763  03FD  00C9               	movwf	___ftadd@f2
  7764  03FE  0873               	movf	?___ftneg+1,w
  7765  03FF  00CA               	movwf	___ftadd@f2+1
  7766  0400  0874               	movf	?___ftneg+2,w
  7767  0401  00CB               	movwf	___ftadd@f2+2
  7768  0402  318F  270A  3183   	fcall	___ftadd
  7769  0405  0020               	movlb	0	; select bank0
  7770  0406  0846               	movf	?___ftadd,w
  7771  0407  0021               	movlb	1	; select bank1
  7772  0408  00AB               	movwf	sin@f^(0+128)
  7773  0409  0020               	movlb	0	; select bank0
  7774  040A  0847               	movf	?___ftadd+1,w
  7775  040B  0021               	movlb	1	; select bank1
  7776  040C  00AC               	movwf	(sin@f+1)^(0+128)
  7777  040D  0020               	movlb	0	; select bank0
  7778  040E  0848               	movf	?___ftadd+2,w
  7779  040F  0021               	movlb	1	; select bank1
  7780  0410  00AD               	movwf	(sin@f+2)^(0+128)
  7781  0411                     l906:	
  7782  0411  0021               	movlb	1	; select bank1
  7783  0412  082B               	movf	sin@f^(0+128),w
  7784  0413  0020               	movlb	0	; select bank0
  7785  0414  00B6               	movwf	___ftmul@f1
  7786  0415  0021               	movlb	1	; select bank1
  7787  0416  082C               	movf	(sin@f+1)^(0+128),w
  7788  0417  0020               	movlb	0	; select bank0
  7789  0418  00B7               	movwf	___ftmul@f1+1
  7790  0419  0021               	movlb	1	; select bank1
  7791  041A  082D               	movf	(sin@f+2)^(0+128),w
  7792  041B  0020               	movlb	0	; select bank0
  7793  041C  00B8               	movwf	___ftmul@f1+2
  7794  041D  0021               	movlb	1	; select bank1
  7795  041E  082B               	movf	sin@f^(0+128),w
  7796  041F  0020               	movlb	0	; select bank0
  7797  0420  00B9               	movwf	___ftmul@f2
  7798  0421  0021               	movlb	1	; select bank1
  7799  0422  082C               	movf	(sin@f+1)^(0+128),w
  7800  0423  0020               	movlb	0	; select bank0
  7801  0424  00BA               	movwf	___ftmul@f2+1
  7802  0425  0021               	movlb	1	; select bank1
  7803  0426  082D               	movf	(sin@f+2)^(0+128),w
  7804  0427  0020               	movlb	0	; select bank0
  7805  0428  00BB               	movwf	___ftmul@f2+2
  7806  0429  318E  2656  3183   	fcall	___ftmul
  7807  042C  0020               	movlb	0	; select bank0
  7808  042D  0836               	movf	?___ftmul,w
  7809  042E  0021               	movlb	1	; select bank1
  7810  042F  00B4               	movwf	sin@x2^(0+128)
  7811  0430  0020               	movlb	0	; select bank0
  7812  0431  0837               	movf	?___ftmul+1,w
  7813  0432  0021               	movlb	1	; select bank1
  7814  0433  00B5               	movwf	(sin@x2+1)^(0+128)
  7815  0434  0020               	movlb	0	; select bank0
  7816  0435  0838               	movf	?___ftmul+2,w
  7817  0436  0021               	movlb	1	; select bank1
  7818  0437  00B6               	movwf	(sin@x2+2)^(0+128)
  7819  0438  0834               	movf	sin@x2^(0+128),w
  7820  0439  0020               	movlb	0	; select bank0
  7821  043A  00D3               	movwf	eval_poly@x
  7822  043B  0021               	movlb	1	; select bank1
  7823  043C  0835               	movf	(sin@x2+1)^(0+128),w
  7824  043D  0020               	movlb	0	; select bank0
  7825  043E  00D4               	movwf	eval_poly@x+1
  7826  043F  0021               	movlb	1	; select bank1
  7827  0440  0836               	movf	(sin@x2+2)^(0+128),w
  7828  0441  0020               	movlb	0	; select bank0
  7829  0442  00D5               	movwf	eval_poly@x+2
  7830  0443  3021               	movlw	low (sin@coeff_b| (0+32768))
  7831  0444  00D6               	movwf	eval_poly@d
  7832  0445  3090               	movlw	high (sin@coeff_b| (0+32768))
  7833  0446  00D7               	movwf	eval_poly@d+1
  7834  0447  3003               	movlw	3
  7835  0448  00D8               	movwf	eval_poly@n
  7836  0449  3000               	movlw	0
  7837  044A  00D9               	movwf	eval_poly@n+1
  7838  044B  318B  23C8  3183   	fcall	_eval_poly
  7839  044E  0020               	movlb	0	; select bank0
  7840  044F  0853               	movf	?_eval_poly,w
  7841  0450  0021               	movlb	1	; select bank1
  7842  0451  00AE               	movwf	sin@y^(0+128)
  7843  0452  0020               	movlb	0	; select bank0
  7844  0453  0854               	movf	?_eval_poly+1,w
  7845  0454  0021               	movlb	1	; select bank1
  7846  0455  00AF               	movwf	(sin@y+1)^(0+128)
  7847  0456  0020               	movlb	0	; select bank0
  7848  0457  0855               	movf	?_eval_poly+2,w
  7849  0458  0021               	movlb	1	; select bank1
  7850  0459  00B0               	movwf	(sin@y+2)^(0+128)
  7851  045A  3004               	movlw	4
  7852  045B  0020               	movlb	0	; select bank0
  7853  045C  00D8               	movwf	eval_poly@n
  7854  045D  3000               	movlw	0
  7855  045E  00D9               	movwf	eval_poly@n+1
  7856  045F  3012               	movlw	low (sin@coeff_a| (0+32768))
  7857  0460  00D6               	movwf	eval_poly@d
  7858  0461  3090               	movlw	high (sin@coeff_a| (0+32768))
  7859  0462  00D7               	movwf	eval_poly@d+1
  7860  0463  0021               	movlb	1	; select bank1
  7861  0464  0834               	movf	sin@x2^(0+128),w
  7862  0465  0020               	movlb	0	; select bank0
  7863  0466  00D3               	movwf	eval_poly@x
  7864  0467  0021               	movlb	1	; select bank1
  7865  0468  0835               	movf	(sin@x2+1)^(0+128),w
  7866  0469  0020               	movlb	0	; select bank0
  7867  046A  00D4               	movwf	eval_poly@x+1
  7868  046B  0021               	movlb	1	; select bank1
  7869  046C  0836               	movf	(sin@x2+2)^(0+128),w
  7870  046D  0020               	movlb	0	; select bank0
  7871  046E  00D5               	movwf	eval_poly@x+2
  7872  046F  318B  23C8  3183   	fcall	_eval_poly
  7873  0472  0020               	movlb	0	; select bank0
  7874  0473  0853               	movf	?_eval_poly,w
  7875  0474  00A9               	movwf	___ftdiv@f1
  7876  0475  0854               	movf	?_eval_poly+1,w
  7877  0476  00AA               	movwf	___ftdiv@f1+1
  7878  0477  0855               	movf	?_eval_poly+2,w
  7879  0478  00AB               	movwf	___ftdiv@f1+2
  7880  0479  0021               	movlb	1	; select bank1
  7881  047A  082E               	movf	sin@y^(0+128),w
  7882  047B  0020               	movlb	0	; select bank0
  7883  047C  00A6               	movwf	___ftdiv@f2
  7884  047D  0021               	movlb	1	; select bank1
  7885  047E  082F               	movf	(sin@y+1)^(0+128),w
  7886  047F  0020               	movlb	0	; select bank0
  7887  0480  00A7               	movwf	___ftdiv@f2+1
  7888  0481  0021               	movlb	1	; select bank1
  7889  0482  0830               	movf	(sin@y+2)^(0+128),w
  7890  0483  0020               	movlb	0	; select bank0
  7891  0484  00A8               	movwf	___ftdiv@f2+2
  7892  0485  318D  25AD  3183   	fcall	___ftdiv
  7893  0488  0020               	movlb	0	; select bank0
  7894  0489  0826               	movf	?___ftdiv,w
  7895  048A  0021               	movlb	1	; select bank1
  7896  048B  00B1               	movwf	_sin$1303^(0+128)
  7897  048C  0020               	movlb	0	; select bank0
  7898  048D  0827               	movf	?___ftdiv+1,w
  7899  048E  0021               	movlb	1	; select bank1
  7900  048F  00B2               	movwf	(_sin$1303+1)^(0+128)
  7901  0490  0020               	movlb	0	; select bank0
  7902  0491  0828               	movf	?___ftdiv+2,w
  7903  0492  0021               	movlb	1	; select bank1
  7904  0493  00B3               	movwf	(_sin$1303+2)^(0+128)
  7905  0494  0831               	movf	_sin$1303^(0+128),w
  7906  0495  0020               	movlb	0	; select bank0
  7907  0496  00B6               	movwf	___ftmul@f1
  7908  0497  0021               	movlb	1	; select bank1
  7909  0498  0832               	movf	(_sin$1303+1)^(0+128),w
  7910  0499  0020               	movlb	0	; select bank0
  7911  049A  00B7               	movwf	___ftmul@f1+1
  7912  049B  0021               	movlb	1	; select bank1
  7913  049C  0833               	movf	(_sin$1303+2)^(0+128),w
  7914  049D  0020               	movlb	0	; select bank0
  7915  049E  00B8               	movwf	___ftmul@f1+2
  7916  049F  0021               	movlb	1	; select bank1
  7917  04A0  082B               	movf	sin@f^(0+128),w
  7918  04A1  0020               	movlb	0	; select bank0
  7919  04A2  00B9               	movwf	___ftmul@f2
  7920  04A3  0021               	movlb	1	; select bank1
  7921  04A4  082C               	movf	(sin@f+1)^(0+128),w
  7922  04A5  0020               	movlb	0	; select bank0
  7923  04A6  00BA               	movwf	___ftmul@f2+1
  7924  04A7  0021               	movlb	1	; select bank1
  7925  04A8  082D               	movf	(sin@f+2)^(0+128),w
  7926  04A9  0020               	movlb	0	; select bank0
  7927  04AA  00BB               	movwf	___ftmul@f2+2
  7928  04AB  318E  2656  3183   	fcall	___ftmul
  7929  04AE  0020               	movlb	0	; select bank0
  7930  04AF  0836               	movf	?___ftmul,w
  7931  04B0  0021               	movlb	1	; select bank1
  7932  04B1  00AB               	movwf	sin@f^(0+128)
  7933  04B2  0020               	movlb	0	; select bank0
  7934  04B3  0837               	movf	?___ftmul+1,w
  7935  04B4  0021               	movlb	1	; select bank1
  7936  04B5  00AC               	movwf	(sin@f+1)^(0+128)
  7937  04B6  0020               	movlb	0	; select bank0
  7938  04B7  0838               	movf	?___ftmul+2,w
  7939  04B8  0021               	movlb	1	; select bank1
  7940  04B9  00AD               	movwf	(sin@f+2)^(0+128)
  7941  04BA  0837               	movf	sin@sgn^(0+128),w
  7942  04BB  1903               	btfsc	3,2
  7943  04BC  0008               	return
  7944  04BD  082B               	movf	sin@f^(0+128),w
  7945  04BE  00F2               	movwf	___ftneg@f1
  7946  04BF  082C               	movf	(sin@f+1)^(0+128),w
  7947  04C0  00F3               	movwf	___ftneg@f1+1
  7948  04C1  082D               	movf	(sin@f+2)^(0+128),w
  7949  04C2  00F4               	movwf	___ftneg@f1+2
  7950  04C3  3196  26BC         	fcall	___ftneg
  7951  04C5  0872               	movf	?___ftneg,w
  7952  04C6  0021               	movlb	1	; select bank1
  7953  04C7  00AB               	movwf	?_sin^(0+128)
  7954  04C8  0873               	movf	?___ftneg+1,w
  7955  04C9  00AC               	movwf	(?_sin+1)^(0+128)
  7956  04CA  0874               	movf	?___ftneg+2,w
  7957  04CB  00AD               	movwf	(?_sin+2)^(0+128)
  7958  04CC  0008               	return
  7959  04CD                     __end_of_sin:	
  7960                           
  7961                           	psect	text26
  7962  0D13                     __ptext26:	
  7963 ;; *************** function _floor *****************
  7964 ;; Defined at:
  7965 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\floor.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  x               3   73[BANK0 ] unsigned char 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  i               3    0[BANK1 ] unsigned char 
  7970 ;;  expon           2    3[BANK1 ] int 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  3   73[BANK0 ] int 
  7973 ;; Registers used:
  7974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Totals:         0       4       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;Total ram usage:        9 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    4
  7987 ;; This function calls:
  7988 ;;		___altoft
  7989 ;;		___ftadd
  7990 ;;		___ftge
  7991 ;;		___fttol
  7992 ;;		_frexp
  7993 ;; This function is called by:
  7994 ;;		_sin
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function _floor
  8000  0D13                     _floor:	
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8004  0D13  0020               	movlb	0	; select bank0
  8005  0D14  0869               	movf	floor@x,w
  8006  0D15  00F2               	movwf	frexp@value
  8007  0D16  086A               	movf	floor@x+1,w
  8008  0D17  00F3               	movwf	frexp@value+1
  8009  0D18  086B               	movf	floor@x+2,w
  8010  0D19  00F4               	movwf	frexp@value+2
  8011  0D1A  30A3               	movlw	(low (floor@expon| 0))& (0+255)
  8012  0D1B  00EC               	movwf	??_floor
  8013  0D1C  086C               	movf	??_floor,w
  8014  0D1D  00F5               	movwf	frexp@eptr
  8015  0D1E  318A  2241  318D   	fcall	_frexp
  8016  0D21  0021               	movlb	1	; select bank1
  8017  0D22  1FA4               	btfss	(floor@expon+1)^(0+128),7
  8018  0D23  2D46               	goto	l4378
  8019  0D24  0020               	movlb	0	; select bank0
  8020  0D25  0869               	movf	floor@x,w
  8021  0D26  00F2               	movwf	___ftge@ff1
  8022  0D27  086A               	movf	floor@x+1,w
  8023  0D28  00F3               	movwf	___ftge@ff1+1
  8024  0D29  086B               	movf	floor@x+2,w
  8025  0D2A  00F4               	movwf	___ftge@ff1+2
  8026  0D2B  3000               	movlw	0
  8027  0D2C  00F5               	movwf	___ftge@ff2
  8028  0D2D  3000               	movlw	0
  8029  0D2E  00F6               	movwf	___ftge@ff2+1
  8030  0D2F  3000               	movlw	0
  8031  0D30  00F7               	movwf	___ftge@ff2+2
  8032  0D31  318A  22B3  318D   	fcall	___ftge
  8033  0D34  1803               	btfsc	3,0
  8034  0D35  2D3E               	goto	l4374
  8035  0D36  3000               	movlw	0
  8036  0D37  0020               	movlb	0	; select bank0
  8037  0D38  00E9               	movwf	?_floor
  8038  0D39  3080               	movlw	128
  8039  0D3A  00EA               	movwf	?_floor+1
  8040  0D3B  30BF               	movlw	191
  8041  0D3C  00EB               	movwf	?_floor+2
  8042  0D3D  0008               	return
  8043  0D3E                     l4374:	
  8044  0D3E  3000               	movlw	0
  8045  0D3F  0020               	movlb	0	; select bank0
  8046  0D40  00E9               	movwf	?_floor
  8047  0D41  3000               	movlw	0
  8048  0D42  00EA               	movwf	?_floor+1
  8049  0D43  3000               	movlw	0
  8050  0D44  00EB               	movwf	?_floor+2
  8051  0D45  0008               	return
  8052  0D46                     l4378:	
  8053  0D46  3000               	movlw	0
  8054  0D47  0021               	movlb	1	; select bank1
  8055  0D48  0224               	subwf	(floor@expon+1)^(0+128),w
  8056  0D49  3015               	movlw	21
  8057  0D4A  1903               	skipnz
  8058  0D4B  0223               	subwf	floor@expon^(0+128),w
  8059  0D4C  1803               	btfsc	3,0
  8060  0D4D  0008               	return
  8061  0D4E  0020               	movlb	0	; select bank0
  8062  0D4F  0869               	movf	floor@x,w
  8063  0D50  00D3               	movwf	___fttol@f1
  8064  0D51  086A               	movf	floor@x+1,w
  8065  0D52  00D4               	movwf	___fttol@f1+1
  8066  0D53  086B               	movf	floor@x+2,w
  8067  0D54  00D5               	movwf	___fttol@f1+2
  8068  0D55  318C  248C  318D   	fcall	___fttol
  8069  0D58  0020               	movlb	0	; select bank0
  8070  0D59  0856               	movf	?___fttol+3,w
  8071  0D5A  00E4               	movwf	___altoft@c+3
  8072  0D5B  0855               	movf	?___fttol+2,w
  8073  0D5C  00E3               	movwf	___altoft@c+2
  8074  0D5D  0854               	movf	?___fttol+1,w
  8075  0D5E  00E2               	movwf	___altoft@c+1
  8076  0D5F  0853               	movf	?___fttol,w
  8077  0D60  00E1               	movwf	___altoft@c
  8078  0D61  318A  2276  318D   	fcall	___altoft
  8079  0D64  0020               	movlb	0	; select bank0
  8080  0D65  0861               	movf	?___altoft,w
  8081  0D66  0021               	movlb	1	; select bank1
  8082  0D67  00A0               	movwf	floor@i^(0+128)
  8083  0D68  0020               	movlb	0	; select bank0
  8084  0D69  0862               	movf	?___altoft+1,w
  8085  0D6A  0021               	movlb	1	; select bank1
  8086  0D6B  00A1               	movwf	(floor@i+1)^(0+128)
  8087  0D6C  0020               	movlb	0	; select bank0
  8088  0D6D  0863               	movf	?___altoft+2,w
  8089  0D6E  0021               	movlb	1	; select bank1
  8090  0D6F  00A2               	movwf	(floor@i+2)^(0+128)
  8091  0D70  0020               	movlb	0	; select bank0
  8092  0D71  0869               	movf	floor@x,w
  8093  0D72  00F2               	movwf	___ftge@ff1
  8094  0D73  086A               	movf	floor@x+1,w
  8095  0D74  00F3               	movwf	___ftge@ff1+1
  8096  0D75  086B               	movf	floor@x+2,w
  8097  0D76  00F4               	movwf	___ftge@ff1+2
  8098  0D77  0021               	movlb	1	; select bank1
  8099  0D78  0820               	movf	floor@i^(0+128),w
  8100  0D79  00F5               	movwf	___ftge@ff2
  8101  0D7A  0821               	movf	(floor@i+1)^(0+128),w
  8102  0D7B  00F6               	movwf	___ftge@ff2+1
  8103  0D7C  0822               	movf	(floor@i+2)^(0+128),w
  8104  0D7D  00F7               	movwf	___ftge@ff2+2
  8105  0D7E  318A  22B3  318D   	fcall	___ftge
  8106  0D81  1803               	btfsc	3,0
  8107  0D82  2DA0               	goto	l4388
  8108  0D83  3000               	movlw	0
  8109  0D84  0020               	movlb	0	; select bank0
  8110  0D85  00C6               	movwf	___ftadd@f1
  8111  0D86  3080               	movlw	128
  8112  0D87  00C7               	movwf	___ftadd@f1+1
  8113  0D88  30BF               	movlw	191
  8114  0D89  00C8               	movwf	___ftadd@f1+2
  8115  0D8A  0021               	movlb	1	; select bank1
  8116  0D8B  0820               	movf	floor@i^(0+128),w
  8117  0D8C  0020               	movlb	0	; select bank0
  8118  0D8D  00C9               	movwf	___ftadd@f2
  8119  0D8E  0021               	movlb	1	; select bank1
  8120  0D8F  0821               	movf	(floor@i+1)^(0+128),w
  8121  0D90  0020               	movlb	0	; select bank0
  8122  0D91  00CA               	movwf	___ftadd@f2+1
  8123  0D92  0021               	movlb	1	; select bank1
  8124  0D93  0822               	movf	(floor@i+2)^(0+128),w
  8125  0D94  0020               	movlb	0	; select bank0
  8126  0D95  00CB               	movwf	___ftadd@f2+2
  8127  0D96  318F  270A         	fcall	___ftadd
  8128  0D98  0020               	movlb	0	; select bank0
  8129  0D99  0846               	movf	?___ftadd,w
  8130  0D9A  00E9               	movwf	?_floor
  8131  0D9B  0847               	movf	?___ftadd+1,w
  8132  0D9C  00EA               	movwf	?_floor+1
  8133  0D9D  0848               	movf	?___ftadd+2,w
  8134  0D9E  00EB               	movwf	?_floor+2
  8135  0D9F  0008               	return
  8136  0DA0                     l4388:	
  8137  0DA0  0021               	movlb	1	; select bank1
  8138  0DA1  0820               	movf	floor@i^(0+128),w
  8139  0DA2  0020               	movlb	0	; select bank0
  8140  0DA3  00E9               	movwf	?_floor
  8141  0DA4  0021               	movlb	1	; select bank1
  8142  0DA5  0821               	movf	(floor@i+1)^(0+128),w
  8143  0DA6  0020               	movlb	0	; select bank0
  8144  0DA7  00EA               	movwf	?_floor+1
  8145  0DA8  0021               	movlb	1	; select bank1
  8146  0DA9  0822               	movf	(floor@i+2)^(0+128),w
  8147  0DAA  0020               	movlb	0	; select bank0
  8148  0DAB  00EB               	movwf	?_floor+2
  8149  0DAC  0008               	return
  8150  0DAD                     __end_of_floor:	
  8151                           
  8152                           	psect	text27
  8153  0A41                     __ptext27:	
  8154 ;; *************** function _frexp *****************
  8155 ;; Defined at:
  8156 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\frexp.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  value           3    2[COMMON] int 
  8159 ;;  eptr            1    5[COMMON] PTR int 
  8160 ;;		 -> floor@expon(2), 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  3    2[COMMON] PTR int 
  8165 ;; Registers used:
  8166 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        6 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    2
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_floor
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function _frexp
  8188  0A41                     _frexp:	
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8192  0A41  0874               	movf	frexp@value+2,w
  8193  0A42  0473               	iorwf	frexp@value+1,w
  8194  0A43  0472               	iorwf	frexp@value,w
  8195  0A44  1D03               	skipz
  8196  0A45  2A4D               	goto	l4074
  8197  0A46  0875               	movf	frexp@eptr,w
  8198  0A47  0086               	movwf	6
  8199  0A48  0187               	clrf	7
  8200  0A49  3000               	movlw	0
  8201  0A4A  3FC0               	movwi [0]fsr1
  8202  0A4B  3FC1               	movwi [1]fsr1
  8203                           
  8204                           ;	Return value of _frexp is never used
  8205  0A4C  0008               	return
  8206  0A4D                     l4074:	
  8207  0A4D  0874               	movf	frexp@value+2,w
  8208  0A4E  397F               	andlw	127
  8209  0A4F  00F6               	movwf	??_frexp
  8210  0A50  01F7               	clrf	??_frexp+1
  8211  0A51  35F6               	lslf	??_frexp,f
  8212  0A52  0DF7               	rlf	??_frexp+1,f
  8213  0A53  0875               	movf	frexp@eptr,w
  8214  0A54  0086               	movwf	6
  8215  0A55  0187               	clrf	7
  8216  0A56  0876               	movf	??_frexp,w
  8217  0A57  3FC0               	movwi [0]fsr1
  8218  0A58  0877               	movf	??_frexp+1,w
  8219  0A59  3FC1               	movwi [1]fsr1
  8220  0A5A  0D73               	rlf	frexp@value+1,w
  8221  0A5B  0D73               	rlf	frexp@value+1,w
  8222  0A5C  3901               	andlw	1
  8223  0A5D  00F6               	movwf	??_frexp
  8224  0A5E  01F7               	clrf	??_frexp+1
  8225  0A5F  0875               	movf	frexp@eptr,w
  8226  0A60  0086               	movwf	6
  8227  0A61  0187               	clrf	7
  8228  0A62  0876               	movf	??_frexp,w
  8229  0A63  0481               	iorwf	1,f
  8230  0A64  3141               	addfsr 1,1
  8231  0A65  0877               	movf	??_frexp+1,w
  8232  0A66  0481               	iorwf	1,f
  8233  0A67  0875               	movf	frexp@eptr,w
  8234  0A68  0086               	movwf	6
  8235  0A69  0187               	clrf	7
  8236  0A6A  3082               	movlw	130
  8237  0A6B  0781               	addwf	1,f
  8238  0A6C  3141               	addfsr 1,1
  8239  0A6D  30FF               	movlw	255
  8240  0A6E  3D81               	addwfc	1,f
  8241  0A6F  317F               	addfsr 1,-1
  8242  0A70  0874               	movf	frexp@value+2,w
  8243  0A71  3980               	andlw	-128
  8244  0A72  383F               	iorlw	63
  8245  0A73  00F4               	movwf	frexp@value+2
  8246  0A74  13F3               	bcf	frexp@value+1,7
  8247  0A75  0008               	return
  8248  0A76                     __end_of_frexp:	
  8249                           ;	Return value of _frexp is never used
  8250                           
  8251                           
  8252                           	psect	text28
  8253  0C8C                     __ptext28:	
  8254 ;; *************** function ___fttol *****************
  8255 ;; Defined at:
  8256 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  f1              3   51[BANK0 ] float 
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  lval            4   60[BANK0 ] unsigned long 
  8261 ;;  exp1            1   64[BANK0 ] unsigned char 
  8262 ;;  sign1           1   59[BANK0 ] unsigned char 
  8263 ;; Return value:  Size  Location     Type
  8264 ;;                  4   51[BANK0 ] long 
  8265 ;; Registers used:
  8266 ;;		wreg, status,2, status,0
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8272 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;Total ram usage:       14 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    2
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_CC_CheckRegister
  8283 ;;		_floor
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function ___fttol
  8289  0C8C                     ___fttol:	
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8293  0C8C  0020               	movlb	0	; select bank0
  8294  0C8D  0853               	movf	___fttol@f1,w
  8295  0C8E  00D7               	movwf	??___fttol
  8296  0C8F  0854               	movf	___fttol@f1+1,w
  8297  0C90  00D8               	movwf	??___fttol+1
  8298  0C91  0855               	movf	___fttol@f1+2,w
  8299  0C92  00D9               	movwf	??___fttol+2
  8300  0C93  1003               	clrc
  8301  0C94  0D58               	rlf	??___fttol+1,w
  8302  0C95  0D59               	rlf	??___fttol+2,w
  8303  0C96  00DA               	movwf	??___fttol+3
  8304  0C97  085A               	movf	??___fttol+3,w
  8305  0C98  00E0               	movwf	___fttol@exp1
  8306  0C99  0860               	movf	___fttol@exp1,w
  8307  0C9A  1D03               	btfss	3,2
  8308  0C9B  2CA5               	goto	l4010
  8309  0C9C  3000               	movlw	0
  8310  0C9D  00D6               	movwf	?___fttol+3
  8311  0C9E  3000               	movlw	0
  8312  0C9F  00D5               	movwf	?___fttol+2
  8313  0CA0  3000               	movlw	0
  8314  0CA1  00D4               	movwf	?___fttol+1
  8315  0CA2  3000               	movlw	0
  8316  0CA3  00D3               	movwf	?___fttol
  8317  0CA4  0008               	return
  8318  0CA5                     l4010:	
  8319  0CA5  0853               	movf	___fttol@f1,w
  8320  0CA6  00D7               	movwf	??___fttol
  8321  0CA7  0854               	movf	___fttol@f1+1,w
  8322  0CA8  00D8               	movwf	??___fttol+1
  8323  0CA9  0855               	movf	___fttol@f1+2,w
  8324  0CAA  00D9               	movwf	??___fttol+2
  8325  0CAB  3017               	movlw	23
  8326  0CAC                     u5485:	
  8327  0CAC  36D9               	lsrf	??___fttol+2,f
  8328  0CAD  0CD8               	rrf	??___fttol+1,f
  8329  0CAE  0CD7               	rrf	??___fttol,f
  8330  0CAF  0B89               	decfsz	9,f
  8331  0CB0  2CAC               	goto	u5485
  8332  0CB1  0857               	movf	??___fttol,w
  8333  0CB2  00DA               	movwf	??___fttol+3
  8334  0CB3  085A               	movf	??___fttol+3,w
  8335  0CB4  00DB               	movwf	___fttol@sign1
  8336  0CB5  17D4               	bsf	___fttol@f1+1,7
  8337  0CB6  30FF               	movlw	255
  8338  0CB7  05D3               	andwf	___fttol@f1,f
  8339  0CB8  30FF               	movlw	255
  8340  0CB9  05D4               	andwf	___fttol@f1+1,f
  8341  0CBA  3000               	movlw	0
  8342  0CBB  05D5               	andwf	___fttol@f1+2,f
  8343  0CBC  0853               	movf	___fttol@f1,w
  8344  0CBD  00DC               	movwf	___fttol@lval
  8345  0CBE  0854               	movf	___fttol@f1+1,w
  8346  0CBF  00DD               	movwf	___fttol@lval+1
  8347  0CC0  0855               	movf	___fttol@f1+2,w
  8348  0CC1  00DE               	movwf	___fttol@lval+2
  8349  0CC2  01DF               	clrf	___fttol@lval+3
  8350  0CC3  308E               	movlw	142
  8351  0CC4  02E0               	subwf	___fttol@exp1,f
  8352  0CC5  1FE0               	btfss	___fttol@exp1,7
  8353  0CC6  2CE3               	goto	l4030
  8354  0CC7  0860               	movf	___fttol@exp1,w
  8355  0CC8  3A80               	xorlw	128
  8356  0CC9  3E8F               	addlw	143
  8357  0CCA  1803               	skipnc
  8358  0CCB  2CD5               	goto	l4028
  8359  0CCC  3000               	movlw	0
  8360  0CCD  00D6               	movwf	?___fttol+3
  8361  0CCE  3000               	movlw	0
  8362  0CCF  00D5               	movwf	?___fttol+2
  8363  0CD0  3000               	movlw	0
  8364  0CD1  00D4               	movwf	?___fttol+1
  8365  0CD2  3000               	movlw	0
  8366  0CD3  00D3               	movwf	?___fttol
  8367  0CD4  0008               	return
  8368  0CD5                     l4028:	
  8369  0CD5  3001               	movlw	1
  8370  0CD6                     u5515:	
  8371  0CD6  36DF               	lsrf	___fttol@lval+3,f
  8372  0CD7  0CDE               	rrf	___fttol@lval+2,f
  8373  0CD8  0CDD               	rrf	___fttol@lval+1,f
  8374  0CD9  0CDC               	rrf	___fttol@lval,f
  8375  0CDA  0B89               	decfsz	9,f
  8376  0CDB  2CD6               	goto	u5515
  8377  0CDC  3001               	movlw	1
  8378  0CDD  00D7               	movwf	??___fttol
  8379  0CDE  0857               	movf	??___fttol,w
  8380  0CDF  07E0               	addwf	___fttol@exp1,f
  8381  0CE0  1903               	btfsc	3,2
  8382  0CE1  2CFC               	goto	l4038
  8383  0CE2  2CD5               	goto	l4028
  8384  0CE3                     l4030:	
  8385  0CE3  3018               	movlw	24
  8386  0CE4  0260               	subwf	___fttol@exp1,w
  8387  0CE5  1C03               	skipc
  8388  0CE6  2CF9               	goto	l786
  8389  0CE7  3000               	movlw	0
  8390  0CE8  00D6               	movwf	?___fttol+3
  8391  0CE9  3000               	movlw	0
  8392  0CEA  00D5               	movwf	?___fttol+2
  8393  0CEB  3000               	movlw	0
  8394  0CEC  00D4               	movwf	?___fttol+1
  8395  0CED  3000               	movlw	0
  8396  0CEE  00D3               	movwf	?___fttol
  8397  0CEF  0008               	return
  8398  0CF0                     l4036:	
  8399  0CF0  3001               	movlw	1
  8400  0CF1                     u5545:	
  8401  0CF1  35DC               	lslf	___fttol@lval,f
  8402  0CF2  0DDD               	rlf	___fttol@lval+1,f
  8403  0CF3  0DDE               	rlf	___fttol@lval+2,f
  8404  0CF4  0DDF               	rlf	___fttol@lval+3,f
  8405  0CF5  0B89               	decfsz	9,f
  8406  0CF6  2CF1               	goto	u5545
  8407  0CF7  3001               	movlw	1
  8408  0CF8  02E0               	subwf	___fttol@exp1,f
  8409  0CF9                     l786:	
  8410  0CF9  0860               	movf	___fttol@exp1,w
  8411  0CFA  1D03               	btfss	3,2
  8412  0CFB  2CF0               	goto	l4036
  8413  0CFC                     l4038:	
  8414  0CFC  085B               	movf	___fttol@sign1,w
  8415  0CFD  1903               	btfsc	3,2
  8416  0CFE  2D0A               	goto	l4042
  8417  0CFF  09DC               	comf	___fttol@lval,f
  8418  0D00  09DD               	comf	___fttol@lval+1,f
  8419  0D01  09DE               	comf	___fttol@lval+2,f
  8420  0D02  09DF               	comf	___fttol@lval+3,f
  8421  0D03  0ADC               	incf	___fttol@lval,f
  8422  0D04  1903               	skipnz
  8423  0D05  0ADD               	incf	___fttol@lval+1,f
  8424  0D06  1903               	skipnz
  8425  0D07  0ADE               	incf	___fttol@lval+2,f
  8426  0D08  1903               	skipnz
  8427  0D09  0ADF               	incf	___fttol@lval+3,f
  8428  0D0A                     l4042:	
  8429  0D0A  085F               	movf	___fttol@lval+3,w
  8430  0D0B  00D6               	movwf	?___fttol+3
  8431  0D0C  085E               	movf	___fttol@lval+2,w
  8432  0D0D  00D5               	movwf	?___fttol+2
  8433  0D0E  085D               	movf	___fttol@lval+1,w
  8434  0D0F  00D4               	movwf	?___fttol+1
  8435  0D10  085C               	movf	___fttol@lval,w
  8436  0D11  00D3               	movwf	?___fttol
  8437  0D12  0008               	return
  8438  0D13                     __end_of___fttol:	
  8439                           
  8440                           	psect	text29
  8441  0AB3                     __ptext29:	
  8442 ;; *************** function ___ftge *****************
  8443 ;; Defined at:
  8444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;  ff1             3    2[COMMON] float 
  8447 ;;  ff2             3    5[COMMON] float 
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;		None
  8450 ;; Return value:  Size  Location     Type
  8451 ;;		None               void
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8459 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Totals:         6       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;Total ram usage:        9 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    2
  8466 ;; This function calls:
  8467 ;;		Nothing
  8468 ;; This function is called by:
  8469 ;;		_sin
  8470 ;;		_floor
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           
  8475                           ;psect for function ___ftge
  8476  0AB3                     ___ftge:	
  8477                           
  8478                           ;incstack = 0
  8479                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8480  0AB3  1FF4               	btfss	___ftge@ff1+2,7
  8481  0AB4  2ACA               	goto	l3938
  8482  0AB5  0972               	comf	___ftge@ff1,w
  8483  0AB6  0020               	movlb	0	; select bank0
  8484  0AB7  00A0               	movwf	??___ftge
  8485  0AB8  0973               	comf	___ftge@ff1+1,w
  8486  0AB9  00A1               	movwf	??___ftge+1
  8487  0ABA  0974               	comf	___ftge@ff1+2,w
  8488  0ABB  00A2               	movwf	??___ftge+2
  8489  0ABC  0AA0               	incf	??___ftge,f
  8490  0ABD  1903               	skipnz
  8491  0ABE  0AA1               	incf	??___ftge+1,f
  8492  0ABF  1903               	skipnz
  8493  0AC0  0AA2               	incf	??___ftge+2,f
  8494  0AC1  3000               	movlw	0
  8495  0AC2  0720               	addwf	??___ftge,w
  8496  0AC3  00F2               	movwf	___ftge@ff1
  8497  0AC4  3000               	movlw	0
  8498  0AC5  3D21               	addwfc	??___ftge+1,w
  8499  0AC6  00F3               	movwf	___ftge@ff1+1
  8500  0AC7  3080               	movlw	128
  8501  0AC8  3D22               	addwfc	??___ftge+2,w
  8502  0AC9  00F4               	movwf	___ftge@ff1+2
  8503  0ACA                     l3938:	
  8504  0ACA  1FF7               	btfss	___ftge@ff2+2,7
  8505  0ACB  2AE1               	goto	l3942
  8506  0ACC  0975               	comf	___ftge@ff2,w
  8507  0ACD  0020               	movlb	0	; select bank0
  8508  0ACE  00A0               	movwf	??___ftge
  8509  0ACF  0976               	comf	___ftge@ff2+1,w
  8510  0AD0  00A1               	movwf	??___ftge+1
  8511  0AD1  0977               	comf	___ftge@ff2+2,w
  8512  0AD2  00A2               	movwf	??___ftge+2
  8513  0AD3  0AA0               	incf	??___ftge,f
  8514  0AD4  1903               	skipnz
  8515  0AD5  0AA1               	incf	??___ftge+1,f
  8516  0AD6  1903               	skipnz
  8517  0AD7  0AA2               	incf	??___ftge+2,f
  8518  0AD8  3000               	movlw	0
  8519  0AD9  0720               	addwf	??___ftge,w
  8520  0ADA  00F5               	movwf	___ftge@ff2
  8521  0ADB  3000               	movlw	0
  8522  0ADC  3D21               	addwfc	??___ftge+1,w
  8523  0ADD  00F6               	movwf	___ftge@ff2+1
  8524  0ADE  3080               	movlw	128
  8525  0ADF  3D22               	addwfc	??___ftge+2,w
  8526  0AE0  00F7               	movwf	___ftge@ff2+2
  8527  0AE1                     l3942:	
  8528  0AE1  3080               	movlw	128
  8529  0AE2  06F4               	xorwf	___ftge@ff1+2,f
  8530  0AE3  3080               	movlw	128
  8531  0AE4  06F7               	xorwf	___ftge@ff2+2,f
  8532  0AE5  0877               	movf	___ftge@ff2+2,w
  8533  0AE6  0274               	subwf	___ftge@ff1+2,w
  8534  0AE7  1D03               	skipz
  8535  0AE8  0008               	return
  8536  0AE9  0876               	movf	___ftge@ff2+1,w
  8537  0AEA  0273               	subwf	___ftge@ff1+1,w
  8538  0AEB  1D03               	skipz
  8539  0AEC  0008               	return
  8540  0AED  0875               	movf	___ftge@ff2,w
  8541  0AEE  0272               	subwf	___ftge@ff1,w
  8542  0AEF  0008               	return
  8543  0AF0                     __end_of___ftge:	
  8544                           
  8545                           	psect	text30
  8546  0A76                     __ptext30:	
  8547 ;; *************** function ___altoft *****************
  8548 ;; Defined at:
  8549 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  c               4   65[BANK0 ] long 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  sign            1   72[BANK0 ] unsigned char 
  8554 ;;  exp             1   71[BANK0 ] unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  3   65[BANK0 ] float 
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0, pclath, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8564 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;Total ram usage:        8 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    3
  8571 ;; This function calls:
  8572 ;;		___ftpack
  8573 ;; This function is called by:
  8574 ;;		_floor
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           
  8579                           ;psect for function ___altoft
  8580  0A76                     ___altoft:	
  8581                           
  8582                           ;incstack = 0
  8583                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  8584  0A76  0020               	movlb	0	; select bank0
  8585  0A77  01E8               	clrf	___altoft@sign
  8586  0A78  308E               	movlw	142
  8587  0A79  00E5               	movwf	??___altoft
  8588  0A7A  0865               	movf	??___altoft,w
  8589  0A7B  00E7               	movwf	___altoft@exp
  8590  0A7C  1FE4               	btfss	___altoft@c+3,7
  8591  0A7D  2A8B               	goto	l3858
  8592  0A7E  09E1               	comf	___altoft@c,f
  8593  0A7F  09E2               	comf	___altoft@c+1,f
  8594  0A80  09E3               	comf	___altoft@c+2,f
  8595  0A81  09E4               	comf	___altoft@c+3,f
  8596  0A82  0AE1               	incf	___altoft@c,f
  8597  0A83  1903               	skipnz
  8598  0A84  0AE2               	incf	___altoft@c+1,f
  8599  0A85  1903               	skipnz
  8600  0A86  0AE3               	incf	___altoft@c+2,f
  8601  0A87  1903               	skipnz
  8602  0A88  0AE4               	incf	___altoft@c+3,f
  8603  0A89  01E8               	clrf	___altoft@sign
  8604  0A8A  0AE8               	incf	___altoft@sign,f
  8605  0A8B                     l3858:	
  8606  0A8B  30FF               	movlw	255
  8607  0A8C  0564               	andwf	___altoft@c+3,w
  8608  0A8D  1903               	btfsc	3,2
  8609  0A8E  2A9B               	goto	l3860
  8610  0A8F  3001               	movlw	1
  8611  0A90                     u5075:	
  8612  0A90  36E4               	lsrf	___altoft@c+3,f
  8613  0A91  0CE3               	rrf	___altoft@c+2,f
  8614  0A92  0CE2               	rrf	___altoft@c+1,f
  8615  0A93  0CE1               	rrf	___altoft@c,f
  8616  0A94  0B89               	decfsz	9,f
  8617  0A95  2A90               	goto	u5075
  8618  0A96  3001               	movlw	1
  8619  0A97  00E5               	movwf	??___altoft
  8620  0A98  0865               	movf	??___altoft,w
  8621  0A99  07E7               	addwf	___altoft@exp,f
  8622  0A9A  2A8B               	goto	l3858
  8623  0A9B                     l3860:	
  8624  0A9B  0861               	movf	___altoft@c,w
  8625  0A9C  00F2               	movwf	___ftpack@arg
  8626  0A9D  0862               	movf	___altoft@c+1,w
  8627  0A9E  00F3               	movwf	___ftpack@arg+1
  8628  0A9F  0863               	movf	___altoft@c+2,w
  8629  0AA0  00F4               	movwf	___ftpack@arg+2
  8630  0AA1  0867               	movf	___altoft@exp,w
  8631  0AA2  00E5               	movwf	??___altoft
  8632  0AA3  0865               	movf	??___altoft,w
  8633  0AA4  00F5               	movwf	___ftpack@exp
  8634  0AA5  0868               	movf	___altoft@sign,w
  8635  0AA6  00E6               	movwf	??___altoft+1
  8636  0AA7  0866               	movf	??___altoft+1,w
  8637  0AA8  00F6               	movwf	___ftpack@sign
  8638  0AA9  318C  2428         	fcall	___ftpack
  8639  0AAB  0872               	movf	?___ftpack,w
  8640  0AAC  0020               	movlb	0	; select bank0
  8641  0AAD  00E1               	movwf	?___altoft
  8642  0AAE  0873               	movf	?___ftpack+1,w
  8643  0AAF  00E2               	movwf	?___altoft+1
  8644  0AB0  0874               	movf	?___ftpack+2,w
  8645  0AB1  00E3               	movwf	?___altoft+2
  8646  0AB2  0008               	return
  8647  0AB3                     __end_of___altoft:	
  8648                           
  8649                           	psect	text31
  8650  0BC8                     __ptext31:	
  8651 ;; *************** function _eval_poly *****************
  8652 ;; Defined at:
  8653 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\evalpoly.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  x               3   51[BANK0 ] float 
  8656 ;;  d               2   54[BANK0 ] PTR const 
  8657 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  8658 ;;  n               2   56[BANK0 ] int 
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  res             3   58[BANK0 ] int 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  3   51[BANK0 ] int 
  8663 ;; Registers used:
  8664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:       10 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    4
  8677 ;; This function calls:
  8678 ;;		___ftadd
  8679 ;;		___ftmul
  8680 ;;		___wmul
  8681 ;; This function is called by:
  8682 ;;		_sin
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _eval_poly
  8688  0BC8                     _eval_poly:	
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8692  0BC8  0020               	movlb	0	; select bank0
  8693  0BC9  0859               	movf	eval_poly@n+1,w
  8694  0BCA  00F3               	movwf	___wmul@multiplier+1
  8695  0BCB  0858               	movf	eval_poly@n,w
  8696  0BCC  00F2               	movwf	___wmul@multiplier
  8697  0BCD  3003               	movlw	3
  8698  0BCE  00F4               	movwf	___wmul@multiplicand
  8699  0BCF  3000               	movlw	0
  8700  0BD0  00F5               	movwf	___wmul@multiplicand+1
  8701  0BD1  3197  27C9  318B   	fcall	___wmul
  8702  0BD4  0020               	movlb	0	; select bank0
  8703  0BD5  0856               	movf	eval_poly@d,w
  8704  0BD6  0772               	addwf	?___wmul,w
  8705  0BD7  0084               	movwf	4
  8706  0BD8  0857               	movf	eval_poly@d+1,w
  8707  0BD9  3D73               	addwfc	?___wmul+1,w
  8708  0BDA  0085               	movwf	5
  8709  0BDB  3F00               	moviw [0]fsr0
  8710  0BDC  00DA               	movwf	eval_poly@res
  8711  0BDD  3F01               	moviw [1]fsr0
  8712  0BDE  00DB               	movwf	eval_poly@res+1
  8713  0BDF  3F02               	moviw [2]fsr0
  8714  0BE0                     L4:	
  8715  0BE0  00DC               	movwf	eval_poly@res+2
  8716  0BE1  0858               	movf	eval_poly@n,w
  8717  0BE2  0459               	iorwf	eval_poly@n+1,w
  8718  0BE3  1903               	btfsc	3,2
  8719  0BE4  2C21               	goto	l4398
  8720  0BE5  30FF               	movlw	255
  8721  0BE6  07D8               	addwf	eval_poly@n,f
  8722  0BE7  30FF               	movlw	255
  8723  0BE8  3DD9               	addwfc	eval_poly@n+1,f
  8724  0BE9  0859               	movf	eval_poly@n+1,w
  8725  0BEA  00F3               	movwf	___wmul@multiplier+1
  8726  0BEB  0858               	movf	eval_poly@n,w
  8727  0BEC  00F2               	movwf	___wmul@multiplier
  8728  0BED  3003               	movlw	3
  8729  0BEE  00F4               	movwf	___wmul@multiplicand
  8730  0BEF  3000               	movlw	0
  8731  0BF0  00F5               	movwf	___wmul@multiplicand+1
  8732  0BF1  3197  27C9  318B   	fcall	___wmul
  8733  0BF4  0020               	movlb	0	; select bank0
  8734  0BF5  0856               	movf	eval_poly@d,w
  8735  0BF6  0772               	addwf	?___wmul,w
  8736  0BF7  0084               	movwf	4
  8737  0BF8  0857               	movf	eval_poly@d+1,w
  8738  0BF9  3D73               	addwfc	?___wmul+1,w
  8739  0BFA  0085               	movwf	5
  8740  0BFB  3F00               	moviw [0]fsr0
  8741  0BFC  00C6               	movwf	___ftadd@f1
  8742  0BFD  3F01               	moviw [1]fsr0
  8743  0BFE  00C7               	movwf	___ftadd@f1+1
  8744  0BFF  3F02               	moviw [2]fsr0
  8745  0C00  00C8               	movwf	___ftadd@f1+2
  8746  0C01  085A               	movf	eval_poly@res,w
  8747  0C02  00B6               	movwf	___ftmul@f1
  8748  0C03  085B               	movf	eval_poly@res+1,w
  8749  0C04  00B7               	movwf	___ftmul@f1+1
  8750  0C05  085C               	movf	eval_poly@res+2,w
  8751  0C06  00B8               	movwf	___ftmul@f1+2
  8752  0C07  0853               	movf	eval_poly@x,w
  8753  0C08  00B9               	movwf	___ftmul@f2
  8754  0C09  0854               	movf	eval_poly@x+1,w
  8755  0C0A  00BA               	movwf	___ftmul@f2+1
  8756  0C0B  0855               	movf	eval_poly@x+2,w
  8757  0C0C  00BB               	movwf	___ftmul@f2+2
  8758  0C0D  318E  2656  318B   	fcall	___ftmul
  8759  0C10  0020               	movlb	0	; select bank0
  8760  0C11  0836               	movf	?___ftmul,w
  8761  0C12  00C9               	movwf	___ftadd@f2
  8762  0C13  0837               	movf	?___ftmul+1,w
  8763  0C14  00CA               	movwf	___ftadd@f2+1
  8764  0C15  0838               	movf	?___ftmul+2,w
  8765  0C16  00CB               	movwf	___ftadd@f2+2
  8766  0C17  318F  270A  318B   	fcall	___ftadd
  8767  0C1A  0020               	movlb	0	; select bank0
  8768  0C1B  0846               	movf	?___ftadd,w
  8769  0C1C  00DA               	movwf	eval_poly@res
  8770  0C1D  0847               	movf	?___ftadd+1,w
  8771  0C1E  00DB               	movwf	eval_poly@res+1
  8772  0C1F  0848               	movf	?___ftadd+2,w
  8773  0C20  2BE0               	goto	L4
  8774  0C21                     l4398:	
  8775  0C21  085A               	movf	eval_poly@res,w
  8776  0C22  00D3               	movwf	?_eval_poly
  8777  0C23  085B               	movf	eval_poly@res+1,w
  8778  0C24  00D4               	movwf	?_eval_poly+1
  8779  0C25  085C               	movf	eval_poly@res+2,w
  8780  0C26  00D5               	movwf	?_eval_poly+2
  8781  0C27  0008               	return
  8782  0C28                     __end_of_eval_poly:	
  8783                           
  8784                           	psect	text32
  8785  0E56                     __ptext32:	
  8786 ;; *************** function ___ftmul *****************
  8787 ;; Defined at:
  8788 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  f1              3   22[BANK0 ] float 
  8791 ;;  f2              3   25[BANK0 ] float 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  8794 ;;  sign            1   37[BANK0 ] unsigned char 
  8795 ;;  cntr            1   36[BANK0 ] unsigned char 
  8796 ;;  exp             1   32[BANK0 ] unsigned char 
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3   22[BANK0 ] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0, pclath, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:       16 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    3
  8813 ;; This function calls:
  8814 ;;		___ftpack
  8815 ;; This function is called by:
  8816 ;;		_CC_CheckRegister
  8817 ;;		_sin
  8818 ;;		_eval_poly
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function ___ftmul
  8824  0E56                     ___ftmul:	
  8825                           
  8826                           ;incstack = 0
  8827                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8828  0E56  0020               	movlb	0	; select bank0
  8829  0E57  0836               	movf	___ftmul@f1,w
  8830  0E58  00BC               	movwf	??___ftmul
  8831  0E59  0837               	movf	___ftmul@f1+1,w
  8832  0E5A  00BD               	movwf	??___ftmul+1
  8833  0E5B  0838               	movf	___ftmul@f1+2,w
  8834  0E5C  00BE               	movwf	??___ftmul+2
  8835  0E5D  1003               	clrc
  8836  0E5E  0D3D               	rlf	??___ftmul+1,w
  8837  0E5F  0D3E               	rlf	??___ftmul+2,w
  8838  0E60  00BF               	movwf	??___ftmul+3
  8839  0E61  083F               	movf	??___ftmul+3,w
  8840  0E62  00C0               	movwf	___ftmul@exp
  8841  0E63  0840               	movf	___ftmul@exp,w
  8842  0E64  1D03               	btfss	3,2
  8843  0E65  2E6D               	goto	l3960
  8844  0E66  3000               	movlw	0
  8845  0E67  00B6               	movwf	?___ftmul
  8846  0E68  3000               	movlw	0
  8847  0E69  00B7               	movwf	?___ftmul+1
  8848  0E6A  3000               	movlw	0
  8849  0E6B  00B8               	movwf	?___ftmul+2
  8850  0E6C  0008               	return
  8851  0E6D                     l3960:	
  8852  0E6D  0839               	movf	___ftmul@f2,w
  8853  0E6E  00BC               	movwf	??___ftmul
  8854  0E6F  083A               	movf	___ftmul@f2+1,w
  8855  0E70  00BD               	movwf	??___ftmul+1
  8856  0E71  083B               	movf	___ftmul@f2+2,w
  8857  0E72  00BE               	movwf	??___ftmul+2
  8858  0E73  1003               	clrc
  8859  0E74  0D3D               	rlf	??___ftmul+1,w
  8860  0E75  0D3E               	rlf	??___ftmul+2,w
  8861  0E76  00BF               	movwf	??___ftmul+3
  8862  0E77  083F               	movf	??___ftmul+3,w
  8863  0E78  00C5               	movwf	___ftmul@sign
  8864  0E79  0845               	movf	___ftmul@sign,w
  8865  0E7A  1D03               	btfss	3,2
  8866  0E7B  2E83               	goto	l3966
  8867  0E7C  3000               	movlw	0
  8868  0E7D  00B6               	movwf	?___ftmul
  8869  0E7E  3000               	movlw	0
  8870  0E7F  00B7               	movwf	?___ftmul+1
  8871  0E80  3000               	movlw	0
  8872  0E81  00B8               	movwf	?___ftmul+2
  8873  0E82  0008               	return
  8874  0E83                     l3966:	
  8875  0E83  0845               	movf	___ftmul@sign,w
  8876  0E84  3E7B               	addlw	123
  8877  0E85  00BC               	movwf	??___ftmul
  8878  0E86  083C               	movf	??___ftmul,w
  8879  0E87  07C0               	addwf	___ftmul@exp,f
  8880  0E88  0836               	movf	___ftmul@f1,w
  8881  0E89  00BC               	movwf	??___ftmul
  8882  0E8A  0837               	movf	___ftmul@f1+1,w
  8883  0E8B  00BD               	movwf	??___ftmul+1
  8884  0E8C  0838               	movf	___ftmul@f1+2,w
  8885  0E8D  00BE               	movwf	??___ftmul+2
  8886  0E8E  3010               	movlw	16
  8887  0E8F                     u5375:	
  8888  0E8F  36BE               	lsrf	??___ftmul+2,f
  8889  0E90  0CBD               	rrf	??___ftmul+1,f
  8890  0E91  0CBC               	rrf	??___ftmul,f
  8891  0E92  0B89               	decfsz	9,f
  8892  0E93  2E8F               	goto	u5375
  8893  0E94  083C               	movf	??___ftmul,w
  8894  0E95  00BF               	movwf	??___ftmul+3
  8895  0E96  083F               	movf	??___ftmul+3,w
  8896  0E97  00C5               	movwf	___ftmul@sign
  8897  0E98  0839               	movf	___ftmul@f2,w
  8898  0E99  00BC               	movwf	??___ftmul
  8899  0E9A  083A               	movf	___ftmul@f2+1,w
  8900  0E9B  00BD               	movwf	??___ftmul+1
  8901  0E9C  083B               	movf	___ftmul@f2+2,w
  8902  0E9D  00BE               	movwf	??___ftmul+2
  8903  0E9E  3010               	movlw	16
  8904  0E9F                     u5385:	
  8905  0E9F  36BE               	lsrf	??___ftmul+2,f
  8906  0EA0  0CBD               	rrf	??___ftmul+1,f
  8907  0EA1  0CBC               	rrf	??___ftmul,f
  8908  0EA2  0B89               	decfsz	9,f
  8909  0EA3  2E9F               	goto	u5385
  8910  0EA4  083C               	movf	??___ftmul,w
  8911  0EA5  00BF               	movwf	??___ftmul+3
  8912  0EA6  083F               	movf	??___ftmul+3,w
  8913  0EA7  06C5               	xorwf	___ftmul@sign,f
  8914  0EA8  3080               	movlw	128
  8915  0EA9  00BC               	movwf	??___ftmul
  8916  0EAA  083C               	movf	??___ftmul,w
  8917  0EAB  05C5               	andwf	___ftmul@sign,f
  8918  0EAC  17B7               	bsf	___ftmul@f1+1,7
  8919  0EAD  17BA               	bsf	___ftmul@f2+1,7
  8920  0EAE  30FF               	movlw	255
  8921  0EAF  05B9               	andwf	___ftmul@f2,f
  8922  0EB0  30FF               	movlw	255
  8923  0EB1  05BA               	andwf	___ftmul@f2+1,f
  8924  0EB2  3000               	movlw	0
  8925  0EB3  05BB               	andwf	___ftmul@f2+2,f
  8926  0EB4  3000               	movlw	0
  8927  0EB5  00C1               	movwf	___ftmul@f3_as_product
  8928  0EB6  3000               	movlw	0
  8929  0EB7  00C2               	movwf	___ftmul@f3_as_product+1
  8930  0EB8  3000               	movlw	0
  8931  0EB9  00C3               	movwf	___ftmul@f3_as_product+2
  8932  0EBA  3007               	movlw	7
  8933  0EBB  00BC               	movwf	??___ftmul
  8934  0EBC  083C               	movf	??___ftmul,w
  8935  0EBD  00C4               	movwf	___ftmul@cntr
  8936  0EBE                     l3978:	
  8937  0EBE  1C36               	btfss	___ftmul@f1,0
  8938  0EBF  2EC6               	goto	l3982
  8939  0EC0  0839               	movf	___ftmul@f2,w
  8940  0EC1  07C1               	addwf	___ftmul@f3_as_product,f
  8941  0EC2  083A               	movf	___ftmul@f2+1,w
  8942  0EC3  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8943  0EC4  083B               	movf	___ftmul@f2+2,w
  8944  0EC5  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8945  0EC6                     l3982:	
  8946  0EC6  3001               	movlw	1
  8947  0EC7                     u5405:	
  8948  0EC7  36B8               	lsrf	___ftmul@f1+2,f
  8949  0EC8  0CB7               	rrf	___ftmul@f1+1,f
  8950  0EC9  0CB6               	rrf	___ftmul@f1,f
  8951  0ECA  0B89               	decfsz	9,f
  8952  0ECB  2EC7               	goto	u5405
  8953  0ECC  3001               	movlw	1
  8954  0ECD                     u5415:	
  8955  0ECD  35B9               	lslf	___ftmul@f2,f
  8956  0ECE  0DBA               	rlf	___ftmul@f2+1,f
  8957  0ECF  0DBB               	rlf	___ftmul@f2+2,f
  8958  0ED0  0B89               	decfsz	9,f
  8959  0ED1  2ECD               	goto	u5415
  8960  0ED2  3001               	movlw	1
  8961  0ED3  02C4               	subwf	___ftmul@cntr,f
  8962  0ED4  1D03               	btfss	3,2
  8963  0ED5  2EBE               	goto	l3978
  8964  0ED6  3009               	movlw	9
  8965  0ED7  00BC               	movwf	??___ftmul
  8966  0ED8  083C               	movf	??___ftmul,w
  8967  0ED9  00C4               	movwf	___ftmul@cntr
  8968  0EDA                     l3990:	
  8969  0EDA  1C36               	btfss	___ftmul@f1,0
  8970  0EDB  2EE2               	goto	l3994
  8971  0EDC  0839               	movf	___ftmul@f2,w
  8972  0EDD  07C1               	addwf	___ftmul@f3_as_product,f
  8973  0EDE  083A               	movf	___ftmul@f2+1,w
  8974  0EDF  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8975  0EE0  083B               	movf	___ftmul@f2+2,w
  8976  0EE1  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8977  0EE2                     l3994:	
  8978  0EE2  3001               	movlw	1
  8979  0EE3                     u5445:	
  8980  0EE3  36B8               	lsrf	___ftmul@f1+2,f
  8981  0EE4  0CB7               	rrf	___ftmul@f1+1,f
  8982  0EE5  0CB6               	rrf	___ftmul@f1,f
  8983  0EE6  0B89               	decfsz	9,f
  8984  0EE7  2EE3               	goto	u5445
  8985  0EE8  3001               	movlw	1
  8986  0EE9                     u5455:	
  8987  0EE9  36C3               	lsrf	___ftmul@f3_as_product+2,f
  8988  0EEA  0CC2               	rrf	___ftmul@f3_as_product+1,f
  8989  0EEB  0CC1               	rrf	___ftmul@f3_as_product,f
  8990  0EEC  0B89               	decfsz	9,f
  8991  0EED  2EE9               	goto	u5455
  8992  0EEE  3001               	movlw	1
  8993  0EEF  02C4               	subwf	___ftmul@cntr,f
  8994  0EF0  1D03               	btfss	3,2
  8995  0EF1  2EDA               	goto	l3990
  8996  0EF2  0841               	movf	___ftmul@f3_as_product,w
  8997  0EF3  00F2               	movwf	___ftpack@arg
  8998  0EF4  0842               	movf	___ftmul@f3_as_product+1,w
  8999  0EF5  00F3               	movwf	___ftpack@arg+1
  9000  0EF6  0843               	movf	___ftmul@f3_as_product+2,w
  9001  0EF7  00F4               	movwf	___ftpack@arg+2
  9002  0EF8  0840               	movf	___ftmul@exp,w
  9003  0EF9  00BC               	movwf	??___ftmul
  9004  0EFA  083C               	movf	??___ftmul,w
  9005  0EFB  00F5               	movwf	___ftpack@exp
  9006  0EFC  0845               	movf	___ftmul@sign,w
  9007  0EFD  00BD               	movwf	??___ftmul+1
  9008  0EFE  083D               	movf	??___ftmul+1,w
  9009  0EFF  00F6               	movwf	___ftpack@sign
  9010  0F00  318C  2428         	fcall	___ftpack
  9011  0F02  0872               	movf	?___ftpack,w
  9012  0F03  0020               	movlb	0	; select bank0
  9013  0F04  00B6               	movwf	?___ftmul
  9014  0F05  0873               	movf	?___ftpack+1,w
  9015  0F06  00B7               	movwf	?___ftmul+1
  9016  0F07  0874               	movf	?___ftpack+2,w
  9017  0F08  00B8               	movwf	?___ftmul+2
  9018  0F09  0008               	return
  9019  0F0A                     __end_of___ftmul:	
  9020                           
  9021                           	psect	text33
  9022  091A                     __ptext33:	
  9023 ;; *************** function ___ftsub *****************
  9024 ;; Defined at:
  9025 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  f2              3    5[BANK1 ] float 
  9028 ;;  f1              3    8[BANK1 ] float 
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  3    5[BANK1 ] float 
  9033 ;; Registers used:
  9034 ;;		wreg, status,2, status,0, pclath, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9040 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;Total ram usage:        6 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    4
  9047 ;; This function calls:
  9048 ;;		___ftadd
  9049 ;; This function is called by:
  9050 ;;		_sin
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           
  9055                           ;psect for function ___ftsub
  9056  091A                     ___ftsub:	
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9060  091A  0021               	movlb	1	; select bank1
  9061  091B  0827               	movf	(___ftsub@f2+2)^(0+128),w
  9062  091C  0426               	iorwf	(___ftsub@f2+1)^(0+128),w
  9063  091D  0425               	iorwf	___ftsub@f2^(0+128),w
  9064  091E  1903               	skipnz
  9065  091F  2922               	goto	l4360
  9066  0920  3080               	movlw	128
  9067  0921  06A7               	xorwf	(___ftsub@f2+2)^(0+128),f
  9068  0922                     l4360:	
  9069  0922  0828               	movf	___ftsub@f1^(0+128),w
  9070  0923  0020               	movlb	0	; select bank0
  9071  0924  00C6               	movwf	___ftadd@f1
  9072  0925  0021               	movlb	1	; select bank1
  9073  0926  0829               	movf	(___ftsub@f1+1)^(0+128),w
  9074  0927  0020               	movlb	0	; select bank0
  9075  0928  00C7               	movwf	___ftadd@f1+1
  9076  0929  0021               	movlb	1	; select bank1
  9077  092A  082A               	movf	(___ftsub@f1+2)^(0+128),w
  9078  092B  0020               	movlb	0	; select bank0
  9079  092C  00C8               	movwf	___ftadd@f1+2
  9080  092D  0021               	movlb	1	; select bank1
  9081  092E  0825               	movf	___ftsub@f2^(0+128),w
  9082  092F  0020               	movlb	0	; select bank0
  9083  0930  00C9               	movwf	___ftadd@f2
  9084  0931  0021               	movlb	1	; select bank1
  9085  0932  0826               	movf	(___ftsub@f2+1)^(0+128),w
  9086  0933  0020               	movlb	0	; select bank0
  9087  0934  00CA               	movwf	___ftadd@f2+1
  9088  0935  0021               	movlb	1	; select bank1
  9089  0936  0827               	movf	(___ftsub@f2+2)^(0+128),w
  9090  0937  0020               	movlb	0	; select bank0
  9091  0938  00CB               	movwf	___ftadd@f2+2
  9092  0939  318F  270A         	fcall	___ftadd
  9093  093B  0020               	movlb	0	; select bank0
  9094  093C  0846               	movf	?___ftadd,w
  9095  093D  0021               	movlb	1	; select bank1
  9096  093E  00A5               	movwf	?___ftsub^(0+128)
  9097  093F  0020               	movlb	0	; select bank0
  9098  0940  0847               	movf	?___ftadd+1,w
  9099  0941  0021               	movlb	1	; select bank1
  9100  0942  00A6               	movwf	(?___ftsub+1)^(0+128)
  9101  0943  0020               	movlb	0	; select bank0
  9102  0944  0848               	movf	?___ftadd+2,w
  9103  0945  0021               	movlb	1	; select bank1
  9104  0946  00A7               	movwf	(?___ftsub+2)^(0+128)
  9105  0947  0008               	return
  9106  0948                     __end_of___ftsub:	
  9107                           
  9108                           	psect	text34
  9109  0F0A                     __ptext34:	
  9110 ;; *************** function ___ftadd *****************
  9111 ;; Defined at:
  9112 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  f1              3   38[BANK0 ] float 
  9115 ;;  f2              3   41[BANK0 ] float 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  exp1            1   50[BANK0 ] unsigned char 
  9118 ;;  exp2            1   49[BANK0 ] unsigned char 
  9119 ;;  sign            1   48[BANK0 ] unsigned char 
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  3   38[BANK0 ] float 
  9122 ;; Registers used:
  9123 ;;		wreg, status,2, status,0, pclath, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9129 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;Total ram usage:       13 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    3
  9136 ;; This function calls:
  9137 ;;		___ftpack
  9138 ;; This function is called by:
  9139 ;;		_CC_CheckRegister
  9140 ;;		___ftsub
  9141 ;;		_sin
  9142 ;;		_eval_poly
  9143 ;;		_floor
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function ___ftadd
  9149  0F0A                     ___ftadd:	
  9150                           
  9151                           ;incstack = 0
  9152                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9153  0F0A  0020               	movlb	0	; select bank0
  9154  0F0B  0846               	movf	___ftadd@f1,w
  9155  0F0C  00CC               	movwf	??___ftadd
  9156  0F0D  0847               	movf	___ftadd@f1+1,w
  9157  0F0E  00CD               	movwf	??___ftadd+1
  9158  0F0F  0848               	movf	___ftadd@f1+2,w
  9159  0F10  00CE               	movwf	??___ftadd+2
  9160  0F11  1003               	clrc
  9161  0F12  0D4D               	rlf	??___ftadd+1,w
  9162  0F13  0D4E               	rlf	??___ftadd+2,w
  9163  0F14  00CF               	movwf	??___ftadd+3
  9164  0F15  084F               	movf	??___ftadd+3,w
  9165  0F16  00D2               	movwf	___ftadd@exp1
  9166  0F17  0849               	movf	___ftadd@f2,w
  9167  0F18  00CC               	movwf	??___ftadd
  9168  0F19  084A               	movf	___ftadd@f2+1,w
  9169  0F1A  00CD               	movwf	??___ftadd+1
  9170  0F1B  084B               	movf	___ftadd@f2+2,w
  9171  0F1C  00CE               	movwf	??___ftadd+2
  9172  0F1D  1003               	clrc
  9173  0F1E  0D4D               	rlf	??___ftadd+1,w
  9174  0F1F  0D4E               	rlf	??___ftadd+2,w
  9175  0F20  00CF               	movwf	??___ftadd+3
  9176  0F21  084F               	movf	??___ftadd+3,w
  9177  0F22  00D1               	movwf	___ftadd@exp2
  9178  0F23  0852               	movf	___ftadd@exp1,w
  9179  0F24  1903               	btfsc	3,2
  9180  0F25  2F32               	goto	l3870
  9181  0F26  0851               	movf	___ftadd@exp2,w
  9182  0F27  0252               	subwf	___ftadd@exp1,w
  9183  0F28  1803               	skipnc
  9184  0F29  2F39               	goto	l3874
  9185  0F2A  0352               	decf	___ftadd@exp1,w
  9186  0F2B  3AFF               	xorlw	255
  9187  0F2C  0751               	addwf	___ftadd@exp2,w
  9188  0F2D  00CC               	movwf	??___ftadd
  9189  0F2E  3019               	movlw	25
  9190  0F2F  024C               	subwf	??___ftadd,w
  9191  0F30  1C03               	skipc
  9192  0F31  2F39               	goto	l3874
  9193  0F32                     l3870:	
  9194  0F32  0849               	movf	___ftadd@f2,w
  9195  0F33  00C6               	movwf	?___ftadd
  9196  0F34  084A               	movf	___ftadd@f2+1,w
  9197  0F35  00C7               	movwf	?___ftadd+1
  9198  0F36  084B               	movf	___ftadd@f2+2,w
  9199  0F37  00C8               	movwf	?___ftadd+2
  9200  0F38  0008               	return
  9201  0F39                     l3874:	
  9202  0F39  0851               	movf	___ftadd@exp2,w
  9203  0F3A  1903               	btfsc	3,2
  9204  0F3B  0008               	return
  9205  0F3C  0852               	movf	___ftadd@exp1,w
  9206  0F3D  0251               	subwf	___ftadd@exp2,w
  9207  0F3E  1803               	skipnc
  9208  0F3F  2F48               	goto	l3880
  9209  0F40  0351               	decf	___ftadd@exp2,w
  9210  0F41  3AFF               	xorlw	255
  9211  0F42  0752               	addwf	___ftadd@exp1,w
  9212  0F43  00CC               	movwf	??___ftadd
  9213  0F44  3019               	movlw	25
  9214  0F45  024C               	subwf	??___ftadd,w
  9215  0F46  1803               	btfsc	3,0
  9216  0F47  0008               	return
  9217  0F48                     l3880:	
  9218  0F48  3006               	movlw	6
  9219  0F49  00CC               	movwf	??___ftadd
  9220  0F4A  084C               	movf	??___ftadd,w
  9221  0F4B  00D0               	movwf	___ftadd@sign
  9222  0F4C  1BC8               	btfsc	___ftadd@f1+2,7
  9223  0F4D  17D0               	bsf	___ftadd@sign,7
  9224  0F4E  1BCB               	btfsc	___ftadd@f2+2,7
  9225  0F4F  1750               	bsf	___ftadd@sign,6
  9226  0F50  17C7               	bsf	___ftadd@f1+1,7
  9227  0F51  30FF               	movlw	255
  9228  0F52  05C6               	andwf	___ftadd@f1,f
  9229  0F53  30FF               	movlw	255
  9230  0F54  05C7               	andwf	___ftadd@f1+1,f
  9231  0F55  3000               	movlw	0
  9232  0F56  05C8               	andwf	___ftadd@f1+2,f
  9233  0F57  17CA               	bsf	___ftadd@f2+1,7
  9234  0F58  30FF               	movlw	255
  9235  0F59  05C9               	andwf	___ftadd@f2,f
  9236  0F5A  30FF               	movlw	255
  9237  0F5B  05CA               	andwf	___ftadd@f2+1,f
  9238  0F5C  3000               	movlw	0
  9239  0F5D  05CB               	andwf	___ftadd@f2+2,f
  9240  0F5E  0851               	movf	___ftadd@exp2,w
  9241  0F5F  0252               	subwf	___ftadd@exp1,w
  9242  0F60  1803               	skipnc
  9243  0F61  2F84               	goto	l3902
  9244  0F62                     l3892:	
  9245  0F62  3001               	movlw	1
  9246  0F63                     u5185:	
  9247  0F63  35C9               	lslf	___ftadd@f2,f
  9248  0F64  0DCA               	rlf	___ftadd@f2+1,f
  9249  0F65  0DCB               	rlf	___ftadd@f2+2,f
  9250  0F66  0B89               	decfsz	9,f
  9251  0F67  2F63               	goto	u5185
  9252  0F68  3001               	movlw	1
  9253  0F69  02D1               	subwf	___ftadd@exp2,f
  9254  0F6A  0851               	movf	___ftadd@exp2,w
  9255  0F6B  0652               	xorwf	___ftadd@exp1,w
  9256  0F6C  1903               	skipnz
  9257  0F6D  2F7F               	goto	l3900
  9258  0F6E  3001               	movlw	1
  9259  0F6F  02D0               	subwf	___ftadd@sign,f
  9260  0F70  0850               	movf	___ftadd@sign,w
  9261  0F71  3907               	andlw	7
  9262  0F72  1903               	btfsc	3,2
  9263  0F73  2F7F               	goto	l3900
  9264  0F74  2F62               	goto	l3892
  9265  0F75                     l3898:	
  9266  0F75  3001               	movlw	1
  9267  0F76                     u5215:	
  9268  0F76  36C8               	lsrf	___ftadd@f1+2,f
  9269  0F77  0CC7               	rrf	___ftadd@f1+1,f
  9270  0F78  0CC6               	rrf	___ftadd@f1,f
  9271  0F79  0B89               	decfsz	9,f
  9272  0F7A  2F76               	goto	u5215
  9273  0F7B  3001               	movlw	1
  9274  0F7C  00CC               	movwf	??___ftadd
  9275  0F7D  084C               	movf	??___ftadd,w
  9276  0F7E  07D2               	addwf	___ftadd@exp1,f
  9277  0F7F                     l3900:	
  9278  0F7F  0852               	movf	___ftadd@exp1,w
  9279  0F80  0651               	xorwf	___ftadd@exp2,w
  9280  0F81  1903               	btfsc	3,2
  9281  0F82  2FA9               	goto	l726
  9282  0F83  2F75               	goto	l3898
  9283  0F84                     l3902:	
  9284  0F84  0852               	movf	___ftadd@exp1,w
  9285  0F85  0251               	subwf	___ftadd@exp2,w
  9286  0F86  1803               	skipnc
  9287  0F87  2FA9               	goto	l726
  9288  0F88                     l3904:	
  9289  0F88  3001               	movlw	1
  9290  0F89                     u5245:	
  9291  0F89  35C6               	lslf	___ftadd@f1,f
  9292  0F8A  0DC7               	rlf	___ftadd@f1+1,f
  9293  0F8B  0DC8               	rlf	___ftadd@f1+2,f
  9294  0F8C  0B89               	decfsz	9,f
  9295  0F8D  2F89               	goto	u5245
  9296  0F8E  3001               	movlw	1
  9297  0F8F  02D2               	subwf	___ftadd@exp1,f
  9298  0F90  0851               	movf	___ftadd@exp2,w
  9299  0F91  0652               	xorwf	___ftadd@exp1,w
  9300  0F92  1903               	skipnz
  9301  0F93  2FA5               	goto	l3912
  9302  0F94  3001               	movlw	1
  9303  0F95  02D0               	subwf	___ftadd@sign,f
  9304  0F96  0850               	movf	___ftadd@sign,w
  9305  0F97  3907               	andlw	7
  9306  0F98  1903               	btfsc	3,2
  9307  0F99  2FA5               	goto	l3912
  9308  0F9A  2F88               	goto	l3904
  9309  0F9B                     l3910:	
  9310  0F9B  3001               	movlw	1
  9311  0F9C                     u5275:	
  9312  0F9C  36CB               	lsrf	___ftadd@f2+2,f
  9313  0F9D  0CCA               	rrf	___ftadd@f2+1,f
  9314  0F9E  0CC9               	rrf	___ftadd@f2,f
  9315  0F9F  0B89               	decfsz	9,f
  9316  0FA0  2F9C               	goto	u5275
  9317  0FA1  3001               	movlw	1
  9318  0FA2  00CC               	movwf	??___ftadd
  9319  0FA3  084C               	movf	??___ftadd,w
  9320  0FA4  07D1               	addwf	___ftadd@exp2,f
  9321  0FA5                     l3912:	
  9322  0FA5  0852               	movf	___ftadd@exp1,w
  9323  0FA6  0651               	xorwf	___ftadd@exp2,w
  9324  0FA7  1D03               	skipz
  9325  0FA8  2F9B               	goto	l3910
  9326  0FA9                     l726:	
  9327  0FA9  1FD0               	btfss	___ftadd@sign,7
  9328  0FAA  2FBB               	goto	l3916
  9329  0FAB  30FF               	movlw	255
  9330  0FAC  06C6               	xorwf	___ftadd@f1,f
  9331  0FAD  30FF               	movlw	255
  9332  0FAE  06C7               	xorwf	___ftadd@f1+1,f
  9333  0FAF  30FF               	movlw	255
  9334  0FB0  06C8               	xorwf	___ftadd@f1+2,f
  9335  0FB1  3001               	movlw	1
  9336  0FB2  07C6               	addwf	___ftadd@f1,f
  9337  0FB3  3000               	movlw	0
  9338  0FB4  1803               	skipnc
  9339  0FB5  3001               	movlw	1
  9340  0FB6  07C7               	addwf	___ftadd@f1+1,f
  9341  0FB7  3000               	movlw	0
  9342  0FB8  1803               	skipnc
  9343  0FB9  3001               	movlw	1
  9344  0FBA  07C8               	addwf	___ftadd@f1+2,f
  9345  0FBB                     l3916:	
  9346  0FBB  1F50               	btfss	___ftadd@sign,6
  9347  0FBC  2FCD               	goto	l3920
  9348  0FBD  30FF               	movlw	255
  9349  0FBE  06C9               	xorwf	___ftadd@f2,f
  9350  0FBF  30FF               	movlw	255
  9351  0FC0  06CA               	xorwf	___ftadd@f2+1,f
  9352  0FC1  30FF               	movlw	255
  9353  0FC2  06CB               	xorwf	___ftadd@f2+2,f
  9354  0FC3  3001               	movlw	1
  9355  0FC4  07C9               	addwf	___ftadd@f2,f
  9356  0FC5  3000               	movlw	0
  9357  0FC6  1803               	skipnc
  9358  0FC7  3001               	movlw	1
  9359  0FC8  07CA               	addwf	___ftadd@f2+1,f
  9360  0FC9  3000               	movlw	0
  9361  0FCA  1803               	skipnc
  9362  0FCB  3001               	movlw	1
  9363  0FCC  07CB               	addwf	___ftadd@f2+2,f
  9364  0FCD                     l3920:	
  9365  0FCD  01D0               	clrf	___ftadd@sign
  9366  0FCE  0846               	movf	___ftadd@f1,w
  9367  0FCF  07C9               	addwf	___ftadd@f2,f
  9368  0FD0  0847               	movf	___ftadd@f1+1,w
  9369  0FD1  3DCA               	addwfc	___ftadd@f2+1,f
  9370  0FD2  0848               	movf	___ftadd@f1+2,w
  9371  0FD3  3DCB               	addwfc	___ftadd@f2+2,f
  9372  0FD4  1FCB               	btfss	___ftadd@f2+2,7
  9373  0FD5  2FE8               	goto	l3930
  9374  0FD6  30FF               	movlw	255
  9375  0FD7  06C9               	xorwf	___ftadd@f2,f
  9376  0FD8  30FF               	movlw	255
  9377  0FD9  06CA               	xorwf	___ftadd@f2+1,f
  9378  0FDA  30FF               	movlw	255
  9379  0FDB  06CB               	xorwf	___ftadd@f2+2,f
  9380  0FDC  3001               	movlw	1
  9381  0FDD  07C9               	addwf	___ftadd@f2,f
  9382  0FDE  3000               	movlw	0
  9383  0FDF  1803               	skipnc
  9384  0FE0  3001               	movlw	1
  9385  0FE1  07CA               	addwf	___ftadd@f2+1,f
  9386  0FE2  3000               	movlw	0
  9387  0FE3  1803               	skipnc
  9388  0FE4  3001               	movlw	1
  9389  0FE5  07CB               	addwf	___ftadd@f2+2,f
  9390  0FE6  01D0               	clrf	___ftadd@sign
  9391  0FE7  0AD0               	incf	___ftadd@sign,f
  9392  0FE8                     l3930:	
  9393  0FE8  0849               	movf	___ftadd@f2,w
  9394  0FE9  00F2               	movwf	___ftpack@arg
  9395  0FEA  084A               	movf	___ftadd@f2+1,w
  9396  0FEB  00F3               	movwf	___ftpack@arg+1
  9397  0FEC  084B               	movf	___ftadd@f2+2,w
  9398  0FED  00F4               	movwf	___ftpack@arg+2
  9399  0FEE  0852               	movf	___ftadd@exp1,w
  9400  0FEF  00CC               	movwf	??___ftadd
  9401  0FF0  084C               	movf	??___ftadd,w
  9402  0FF1  00F5               	movwf	___ftpack@exp
  9403  0FF2  0850               	movf	___ftadd@sign,w
  9404  0FF3  00CD               	movwf	??___ftadd+1
  9405  0FF4  084D               	movf	??___ftadd+1,w
  9406  0FF5  00F6               	movwf	___ftpack@sign
  9407  0FF6  318C  2428         	fcall	___ftpack
  9408  0FF8  0872               	movf	?___ftpack,w
  9409  0FF9  0020               	movlb	0	; select bank0
  9410  0FFA  00C6               	movwf	?___ftadd
  9411  0FFB  0873               	movf	?___ftpack+1,w
  9412  0FFC  00C7               	movwf	?___ftadd+1
  9413  0FFD  0874               	movf	?___ftpack+2,w
  9414  0FFE  00C8               	movwf	?___ftadd+2
  9415  0FFF  0008               	return
  9416  1000                     __end_of___ftadd:	
  9417                           
  9418                           	psect	text35
  9419  16BC                     __ptext35:	
  9420 ;; *************** function ___ftneg *****************
  9421 ;; Defined at:
  9422 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;  f1              3    2[COMMON] float 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  3    2[COMMON] float 
  9429 ;; Registers used:
  9430 ;;		wreg
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9436 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;Total ram usage:        3 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    2
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_sin
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function ___ftneg
  9452  16BC                     ___ftneg:	
  9453                           
  9454                           ;incstack = 0
  9455                           ; Regs used in ___ftneg: [wreg]
  9456  16BC  0874               	movf	___ftneg@f1+2,w
  9457  16BD  0473               	iorwf	___ftneg@f1+1,w
  9458  16BE  0472               	iorwf	___ftneg@f1,w
  9459  16BF  1903               	skipnz
  9460  16C0  0008               	return
  9461  16C1  3080               	movlw	128
  9462  16C2  06F4               	xorwf	___ftneg@f1+2,f
  9463  16C3  0008               	return
  9464  16C4                     __end_of___ftneg:	
  9465                           
  9466                           	psect	text36
  9467  0DAD                     __ptext36:	
  9468 ;; *************** function ___ftdiv *****************
  9469 ;; Defined at:
  9470 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;  f2              3    6[BANK0 ] float 
  9473 ;;  f1              3    9[BANK0 ] float 
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  f3              3   17[BANK0 ] float 
  9476 ;;  sign            1   21[BANK0 ] unsigned char 
  9477 ;;  exp             1   20[BANK0 ] unsigned char 
  9478 ;;  cntr            1   16[BANK0 ] unsigned char 
  9479 ;; Return value:  Size  Location     Type
  9480 ;;                  3    6[BANK0 ] float 
  9481 ;; Registers used:
  9482 ;;		wreg, status,2, status,0, pclath, cstack
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9488 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;Total ram usage:       16 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; Hardware stack levels required when called:    3
  9495 ;; This function calls:
  9496 ;;		___ftpack
  9497 ;; This function is called by:
  9498 ;;		_CC_CheckRegister
  9499 ;;		_sin
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function ___ftdiv
  9505  0DAD                     ___ftdiv:	
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9509  0DAD  0020               	movlb	0	; select bank0
  9510  0DAE  0829               	movf	___ftdiv@f1,w
  9511  0DAF  00AC               	movwf	??___ftdiv
  9512  0DB0  082A               	movf	___ftdiv@f1+1,w
  9513  0DB1  00AD               	movwf	??___ftdiv+1
  9514  0DB2  082B               	movf	___ftdiv@f1+2,w
  9515  0DB3  00AE               	movwf	??___ftdiv+2
  9516  0DB4  1003               	clrc
  9517  0DB5  0D2D               	rlf	??___ftdiv+1,w
  9518  0DB6  0D2E               	rlf	??___ftdiv+2,w
  9519  0DB7  00AF               	movwf	??___ftdiv+3
  9520  0DB8  082F               	movf	??___ftdiv+3,w
  9521  0DB9  00B4               	movwf	___ftdiv@exp
  9522  0DBA  0834               	movf	___ftdiv@exp,w
  9523  0DBB  1D03               	btfss	3,2
  9524  0DBC  2DC4               	goto	l4320
  9525  0DBD  3000               	movlw	0
  9526  0DBE  00A6               	movwf	?___ftdiv
  9527  0DBF  3000               	movlw	0
  9528  0DC0  00A7               	movwf	?___ftdiv+1
  9529  0DC1  3000               	movlw	0
  9530  0DC2  00A8               	movwf	?___ftdiv+2
  9531  0DC3  0008               	return
  9532  0DC4                     l4320:	
  9533  0DC4  0826               	movf	___ftdiv@f2,w
  9534  0DC5  00AC               	movwf	??___ftdiv
  9535  0DC6  0827               	movf	___ftdiv@f2+1,w
  9536  0DC7  00AD               	movwf	??___ftdiv+1
  9537  0DC8  0828               	movf	___ftdiv@f2+2,w
  9538  0DC9  00AE               	movwf	??___ftdiv+2
  9539  0DCA  1003               	clrc
  9540  0DCB  0D2D               	rlf	??___ftdiv+1,w
  9541  0DCC  0D2E               	rlf	??___ftdiv+2,w
  9542  0DCD  00AF               	movwf	??___ftdiv+3
  9543  0DCE  082F               	movf	??___ftdiv+3,w
  9544  0DCF  00B5               	movwf	___ftdiv@sign
  9545  0DD0  0835               	movf	___ftdiv@sign,w
  9546  0DD1  1D03               	btfss	3,2
  9547  0DD2  2DDA               	goto	l4326
  9548  0DD3  3000               	movlw	0
  9549  0DD4  00A6               	movwf	?___ftdiv
  9550  0DD5  3000               	movlw	0
  9551  0DD6  00A7               	movwf	?___ftdiv+1
  9552  0DD7  3000               	movlw	0
  9553  0DD8  00A8               	movwf	?___ftdiv+2
  9554  0DD9  0008               	return
  9555  0DDA                     l4326:	
  9556  0DDA  3000               	movlw	0
  9557  0DDB  00B1               	movwf	___ftdiv@f3
  9558  0DDC  3000               	movlw	0
  9559  0DDD  00B2               	movwf	___ftdiv@f3+1
  9560  0DDE  3000               	movlw	0
  9561  0DDF  00B3               	movwf	___ftdiv@f3+2
  9562  0DE0  3089               	movlw	137
  9563  0DE1  0735               	addwf	___ftdiv@sign,w
  9564  0DE2  00AC               	movwf	??___ftdiv
  9565  0DE3  082C               	movf	??___ftdiv,w
  9566  0DE4  02B4               	subwf	___ftdiv@exp,f
  9567  0DE5  0829               	movf	___ftdiv@f1,w
  9568  0DE6  00AC               	movwf	??___ftdiv
  9569  0DE7  082A               	movf	___ftdiv@f1+1,w
  9570  0DE8  00AD               	movwf	??___ftdiv+1
  9571  0DE9  082B               	movf	___ftdiv@f1+2,w
  9572  0DEA  00AE               	movwf	??___ftdiv+2
  9573  0DEB  3010               	movlw	16
  9574  0DEC                     u6115:	
  9575  0DEC  36AE               	lsrf	??___ftdiv+2,f
  9576  0DED  0CAD               	rrf	??___ftdiv+1,f
  9577  0DEE  0CAC               	rrf	??___ftdiv,f
  9578  0DEF  0B89               	decfsz	9,f
  9579  0DF0  2DEC               	goto	u6115
  9580  0DF1  082C               	movf	??___ftdiv,w
  9581  0DF2  00AF               	movwf	??___ftdiv+3
  9582  0DF3  082F               	movf	??___ftdiv+3,w
  9583  0DF4  00B5               	movwf	___ftdiv@sign
  9584  0DF5  0826               	movf	___ftdiv@f2,w
  9585  0DF6  00AC               	movwf	??___ftdiv
  9586  0DF7  0827               	movf	___ftdiv@f2+1,w
  9587  0DF8  00AD               	movwf	??___ftdiv+1
  9588  0DF9  0828               	movf	___ftdiv@f2+2,w
  9589  0DFA  00AE               	movwf	??___ftdiv+2
  9590  0DFB  3010               	movlw	16
  9591  0DFC                     u6125:	
  9592  0DFC  36AE               	lsrf	??___ftdiv+2,f
  9593  0DFD  0CAD               	rrf	??___ftdiv+1,f
  9594  0DFE  0CAC               	rrf	??___ftdiv,f
  9595  0DFF  0B89               	decfsz	9,f
  9596  0E00  2DFC               	goto	u6125
  9597  0E01  082C               	movf	??___ftdiv,w
  9598  0E02  00AF               	movwf	??___ftdiv+3
  9599  0E03  082F               	movf	??___ftdiv+3,w
  9600  0E04  06B5               	xorwf	___ftdiv@sign,f
  9601  0E05  3080               	movlw	128
  9602  0E06  00AC               	movwf	??___ftdiv
  9603  0E07  082C               	movf	??___ftdiv,w
  9604  0E08  05B5               	andwf	___ftdiv@sign,f
  9605  0E09  17AA               	bsf	___ftdiv@f1+1,7
  9606  0E0A  30FF               	movlw	255
  9607  0E0B  05A9               	andwf	___ftdiv@f1,f
  9608  0E0C  30FF               	movlw	255
  9609  0E0D  05AA               	andwf	___ftdiv@f1+1,f
  9610  0E0E  3000               	movlw	0
  9611  0E0F  05AB               	andwf	___ftdiv@f1+2,f
  9612  0E10  17A7               	bsf	___ftdiv@f2+1,7
  9613  0E11  30FF               	movlw	255
  9614  0E12  05A6               	andwf	___ftdiv@f2,f
  9615  0E13  30FF               	movlw	255
  9616  0E14  05A7               	andwf	___ftdiv@f2+1,f
  9617  0E15  3000               	movlw	0
  9618  0E16  05A8               	andwf	___ftdiv@f2+2,f
  9619  0E17  3018               	movlw	24
  9620  0E18  00AC               	movwf	??___ftdiv
  9621  0E19  082C               	movf	??___ftdiv,w
  9622  0E1A  00B0               	movwf	___ftdiv@cntr
  9623  0E1B                     l4340:	
  9624  0E1B  3001               	movlw	1
  9625  0E1C                     u6135:	
  9626  0E1C  35B1               	lslf	___ftdiv@f3,f
  9627  0E1D  0DB2               	rlf	___ftdiv@f3+1,f
  9628  0E1E  0DB3               	rlf	___ftdiv@f3+2,f
  9629  0E1F  0B89               	decfsz	9,f
  9630  0E20  2E1C               	goto	u6135
  9631  0E21  0828               	movf	___ftdiv@f2+2,w
  9632  0E22  022B               	subwf	___ftdiv@f1+2,w
  9633  0E23  1D03               	skipz
  9634  0E24  2E2B               	goto	u6145
  9635  0E25  0827               	movf	___ftdiv@f2+1,w
  9636  0E26  022A               	subwf	___ftdiv@f1+1,w
  9637  0E27  1D03               	skipz
  9638  0E28  2E2B               	goto	u6145
  9639  0E29  0826               	movf	___ftdiv@f2,w
  9640  0E2A  0229               	subwf	___ftdiv@f1,w
  9641  0E2B                     u6145:	
  9642  0E2B  1C03               	skipc
  9643  0E2C  2E34               	goto	l4348
  9644  0E2D  0826               	movf	___ftdiv@f2,w
  9645  0E2E  02A9               	subwf	___ftdiv@f1,f
  9646  0E2F  0827               	movf	___ftdiv@f2+1,w
  9647  0E30  3BAA               	subwfb	___ftdiv@f1+1,f
  9648  0E31  0828               	movf	___ftdiv@f2+2,w
  9649  0E32  3BAB               	subwfb	___ftdiv@f1+2,f
  9650  0E33  1431               	bsf	___ftdiv@f3,0
  9651  0E34                     l4348:	
  9652  0E34  3001               	movlw	1
  9653  0E35                     u6155:	
  9654  0E35  35A9               	lslf	___ftdiv@f1,f
  9655  0E36  0DAA               	rlf	___ftdiv@f1+1,f
  9656  0E37  0DAB               	rlf	___ftdiv@f1+2,f
  9657  0E38  0B89               	decfsz	9,f
  9658  0E39  2E35               	goto	u6155
  9659  0E3A  3001               	movlw	1
  9660  0E3B  02B0               	subwf	___ftdiv@cntr,f
  9661  0E3C  1D03               	btfss	3,2
  9662  0E3D  2E1B               	goto	l4340
  9663  0E3E  0831               	movf	___ftdiv@f3,w
  9664  0E3F  00F2               	movwf	___ftpack@arg
  9665  0E40  0832               	movf	___ftdiv@f3+1,w
  9666  0E41  00F3               	movwf	___ftpack@arg+1
  9667  0E42  0833               	movf	___ftdiv@f3+2,w
  9668  0E43  00F4               	movwf	___ftpack@arg+2
  9669  0E44  0834               	movf	___ftdiv@exp,w
  9670  0E45  00AC               	movwf	??___ftdiv
  9671  0E46  082C               	movf	??___ftdiv,w
  9672  0E47  00F5               	movwf	___ftpack@exp
  9673  0E48  0835               	movf	___ftdiv@sign,w
  9674  0E49  00AD               	movwf	??___ftdiv+1
  9675  0E4A  082D               	movf	??___ftdiv+1,w
  9676  0E4B  00F6               	movwf	___ftpack@sign
  9677  0E4C  318C  2428         	fcall	___ftpack
  9678  0E4E  0872               	movf	?___ftpack,w
  9679  0E4F  0020               	movlb	0	; select bank0
  9680  0E50  00A6               	movwf	?___ftdiv
  9681  0E51  0873               	movf	?___ftpack+1,w
  9682  0E52  00A7               	movwf	?___ftdiv+1
  9683  0E53  0874               	movf	?___ftpack+2,w
  9684  0E54  00A8               	movwf	?___ftdiv+2
  9685  0E55  0008               	return
  9686  0E56                     __end_of___ftdiv:	
  9687                           
  9688                           	psect	text37
  9689  003B                     __ptext37:	
  9690 ;; *************** function _printf *****************
  9691 ;; Defined at:
  9692 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  9695 ;;		 -> STR_18(28), STR_15(5), STR_13(5), STR_9(5), 
  9696 ;;		 -> STR_6(5), STR_2(5), 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  idx             1   18[BANK0 ] unsigned char 
  9699 ;;  tmpval          4    0        struct .
  9700 ;;  width           2   28[BANK0 ] int 
  9701 ;;  flag            2   26[BANK0 ] unsigned short 
  9702 ;;  val             2   24[BANK0 ] unsigned int 
  9703 ;;  len             2   22[BANK0 ] unsigned int 
  9704 ;;  cp              2   19[BANK0 ] PTR const unsigned char 
  9705 ;;		 -> STR_20(7), STR_19(3), STR_17(3), STR_16(4), 
  9706 ;;		 -> STR_14(3), STR_11(3), STR_10(4), STR_8(3), 
  9707 ;;		 -> STR_7(4), STR_4(3), STR_3(4), 
  9708 ;;  c               1   31[BANK0 ] char 
  9709 ;;  prec            1   30[BANK0 ] char 
  9710 ;;  ap              1   21[BANK0 ] PTR void [1]
  9711 ;;		 -> ?_printf(2), 
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  2    6[BANK0 ] int 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9721 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;Total ram usage:       26 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    4
  9728 ;; This function calls:
  9729 ;;		___bmul
  9730 ;;		___lwdiv
  9731 ;;		___lwmod
  9732 ;;		___wmul
  9733 ;;		_isdigit
  9734 ;;		_putch
  9735 ;; This function is called by:
  9736 ;;		_CMD_Execute
  9737 ;;		_CC_CheckRegister
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _printf
  9743  003B                     _printf:	
  9744                           
  9745                           ;doprnt.c: 466: va_list ap;
  9746                           ;doprnt.c: 499: signed char c;
  9747                           ;doprnt.c: 501: int width;
  9748                           ;doprnt.c: 506: signed char prec;
  9749                           ;doprnt.c: 508: unsigned short flag;
  9750                           ;doprnt.c: 523: union {
  9751                           ;doprnt.c: 524: unsigned long vd;
  9752                           ;doprnt.c: 525: double integ;
  9753                           ;doprnt.c: 526: } tmpval;
  9754                           ;doprnt.c: 528: unsigned int val;
  9755                           ;doprnt.c: 529: unsigned len;
  9756                           ;doprnt.c: 530: const char * cp;
  9757                           ;doprnt.c: 533: *ap = __va_start();
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9761  003B  3028               	movlw	(low ((?_printf| 0+2)))& (0+255)
  9762  003C  0020               	movlb	0	; select bank0
  9763  003D  00AE               	movwf	??_printf
  9764  003E  082E               	movf	??_printf,w
  9765  003F  00B5               	movwf	printf@ap
  9766  0040                     l4312:	
  9767                           ;doprnt.c: 536: while(c = *f++) {
  9768                           
  9769  0040  0020               	movlb	0	; select bank0
  9770  0041  0827               	movf	printf@f+1,w
  9771  0042  00AF               	movwf	??_printf+1
  9772  0043  0826               	movf	printf@f,w
  9773  0044  00AE               	movwf	??_printf
  9774  0045  0AA6               	incf	printf@f,f
  9775  0046  1903               	skipnz
  9776  0047  0AA7               	incf	printf@f+1,f
  9777  0048  082E               	movf	??_printf,w
  9778  0049  0084               	movwf	4
  9779  004A  082F               	movf	??_printf+1,w
  9780  004B  0085               	movwf	5
  9781  004C  0800               	movf	0,w	;code access
  9782  004D  00B0               	movwf	??_printf+2
  9783  004E  0830               	movf	??_printf+2,w
  9784  004F  00BF               	movwf	printf@c
  9785  0050  083F               	movf	printf@c,w
  9786  0051  1903               	btfsc	3,2
  9787  0052  0008               	return
  9788                           
  9789                           ;doprnt.c: 538: if(c != '%')
  9790  0053  3025               	movlw	37
  9791  0054  063F               	xorwf	printf@c,w
  9792  0055  1903               	btfsc	3,2
  9793  0056  285C               	goto	l4122
  9794                           
  9795                           ;doprnt.c: 540: {
  9796                           ;doprnt.c: 541: (putch(c) );
  9797  0057  083F               	movf	printf@c,w
  9798  0058  3196  26B1  3180   	fcall	_putch
  9799                           
  9800                           ;doprnt.c: 542: continue;
  9801  005B  2840               	goto	l4312
  9802  005C                     l4122:	
  9803                           
  9804                           ;doprnt.c: 543: }
  9805                           ;doprnt.c: 546: width = 0;
  9806  005C  0020               	movlb	0	; select bank0
  9807  005D  01BC               	clrf	printf@width
  9808  005E  01BD               	clrf	printf@width+1
  9809                           
  9810                           ;doprnt.c: 548: flag = 0;
  9811  005F  01BA               	clrf	printf@flag
  9812  0060  01BB               	clrf	printf@flag+1
  9813                           
  9814                           ;doprnt.c: 551: switch(*f) {
  9815                           
  9816                           ;doprnt.c: 550: for(;;) {
  9817  0061  2867               	goto	l4128
  9818  0062                     l374:	
  9819                           ;doprnt.c: 553: case '-':
  9820                           
  9821                           
  9822                           ;doprnt.c: 554: flag |= 0x08;
  9823  0062  15BA               	bsf	printf@flag,3
  9824                           
  9825                           ;doprnt.c: 555: f++;
  9826  0063  3001               	movlw	1
  9827  0064  07A6               	addwf	printf@f,f
  9828  0065  3000               	movlw	0
  9829  0066  3DA7               	addwfc	printf@f+1,f
  9830  0067                     l4128:	
  9831                           ;doprnt.c: 584: }
  9832                           
  9833                           ;doprnt.c: 556: continue;
  9834                           
  9835  0067  0826               	movf	printf@f,w
  9836  0068  0084               	movwf	4
  9837  0069  0827               	movf	printf@f+1,w
  9838  006A  0085               	movwf	5
  9839  006B  0800               	movf	0,w	;code access
  9840                           
  9841                           ; Switch size 1, requested type "space"
  9842                           ; Number of cases is 1, Range of values is 45 to 45
  9843                           ; switch strategies available:
  9844                           ; Name         Instructions Cycles
  9845                           ; simple_byte            4     3 (average)
  9846                           ; direct_byte           11     9 (fixed)
  9847                           ; jumptable            263     9 (fixed)
  9848                           ;	Chosen strategy is simple_byte
  9849  006C  3A2D               	xorlw	45	; case 45
  9850  006D  1903               	skipnz
  9851  006E  2862               	goto	l374
  9852  006F  2870               	goto	l4130
  9853  0070                     l4130:	
  9854                           ;doprnt.c: 586: }
  9855                           
  9856                           ;doprnt.c: 585: break;
  9857                           
  9858                           
  9859                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9860  0070  0826               	movf	printf@f,w
  9861  0071  0084               	movwf	4
  9862  0072  0827               	movf	printf@f+1,w
  9863  0073  0085               	movwf	5
  9864  0074  0800               	movf	0,w	;code access
  9865  0075  3196  26EE  3180   	fcall	_isdigit
  9866  0078  1C03               	btfss	3,0
  9867  0079  28AB               	goto	l4142
  9868                           
  9869                           ;doprnt.c: 598: width = 0;
  9870  007A  0020               	movlb	0	; select bank0
  9871  007B  01BC               	clrf	printf@width
  9872  007C  01BD               	clrf	printf@width+1
  9873  007D                     l4134:	
  9874                           ;doprnt.c: 599: do {
  9875                           
  9876                           
  9877                           ;doprnt.c: 600: width *= 10;
  9878  007D  300A               	movlw	10
  9879  007E  00F2               	movwf	___wmul@multiplier
  9880  007F  3000               	movlw	0
  9881  0080  00F3               	movwf	___wmul@multiplier+1
  9882  0081  0020               	movlb	0	; select bank0
  9883  0082  083D               	movf	printf@width+1,w
  9884  0083  00F5               	movwf	___wmul@multiplicand+1
  9885  0084  083C               	movf	printf@width,w
  9886  0085  00F4               	movwf	___wmul@multiplicand
  9887  0086  3197  27C9  3180   	fcall	___wmul
  9888  0089  0873               	movf	?___wmul+1,w
  9889  008A  0020               	movlb	0	; select bank0
  9890  008B  00BD               	movwf	printf@width+1
  9891  008C  0872               	movf	?___wmul,w
  9892  008D  00BC               	movwf	printf@width
  9893                           
  9894                           ;doprnt.c: 601: width += *f++ - '0';
  9895  008E  0826               	movf	printf@f,w
  9896  008F  0084               	movwf	4
  9897  0090  0827               	movf	printf@f+1,w
  9898  0091  0085               	movwf	5
  9899  0092  0800               	movf	0,w	;code access
  9900  0093  3ED0               	addlw	208
  9901  0094  00AE               	movwf	??_printf
  9902  0095  30FF               	movlw	255
  9903  0096  1803               	skipnc
  9904  0097  3000               	movlw	0
  9905  0098  00AF               	movwf	??_printf+1
  9906  0099  082E               	movf	??_printf,w
  9907  009A  07BC               	addwf	printf@width,f
  9908  009B  082F               	movf	??_printf+1,w
  9909  009C  3DBD               	addwfc	printf@width+1,f
  9910  009D  3001               	movlw	1
  9911  009E  07A6               	addwf	printf@f,f
  9912  009F  3000               	movlw	0
  9913  00A0  3DA7               	addwfc	printf@f+1,f
  9914                           
  9915                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9916  00A1  0826               	movf	printf@f,w
  9917  00A2  0084               	movwf	4
  9918  00A3  0827               	movf	printf@f+1,w
  9919  00A4  0085               	movwf	5
  9920  00A5  0800               	movf	0,w	;code access
  9921  00A6  3196  26EE  3180   	fcall	_isdigit
  9922  00A9  1803               	btfsc	3,0
  9923  00AA  287D               	goto	l4134
  9924  00AB                     l4142:	
  9925                           
  9926                           ;doprnt.c: 608: }
  9927                           ;doprnt.c: 611: if(*f == '.') {
  9928  00AB  0020               	movlb	0	; select bank0
  9929  00AC  0826               	movf	printf@f,w
  9930  00AD  0084               	movwf	4
  9931  00AE  0827               	movf	printf@f+1,w
  9932  00AF  0085               	movwf	5
  9933  00B0  0012               	moviw fsr0++
  9934  00B1  3A2E               	xorlw	46
  9935  00B2  1D03               	btfss	3,2
  9936  00B3  28DE               	goto	l4156
  9937                           
  9938                           ;doprnt.c: 612: flag |= 0x4000;
  9939  00B4  173B               	bsf	printf@flag+1,6
  9940                           
  9941                           ;doprnt.c: 613: f++;
  9942  00B5  3001               	movlw	1
  9943  00B6  07A6               	addwf	printf@f,f
  9944  00B7  3000               	movlw	0
  9945  00B8  3DA7               	addwfc	printf@f+1,f
  9946                           
  9947                           ;doprnt.c: 620: {
  9948                           ;doprnt.c: 621: prec = 0;
  9949  00B9  01BE               	clrf	printf@prec
  9950  00BA                     l4154:	
  9951                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9952                           
  9953  00BA  0826               	movf	printf@f,w
  9954  00BB  0084               	movwf	4
  9955  00BC  0827               	movf	printf@f+1,w
  9956  00BD  0085               	movwf	5
  9957  00BE  0800               	movf	0,w	;code access
  9958  00BF  3196  26EE  3180   	fcall	_isdigit
  9959  00C2  1C03               	btfss	3,0
  9960  00C3  2967               	goto	l4206
  9961                           
  9962                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9963  00C4  0020               	movlb	0	; select bank0
  9964  00C5  0826               	movf	printf@f,w
  9965  00C6  0084               	movwf	4
  9966  00C7  0827               	movf	printf@f+1,w
  9967  00C8  0085               	movwf	5
  9968  00C9  0800               	movf	0,w	;code access
  9969  00CA  00AE               	movwf	??_printf
  9970  00CB  300A               	movlw	10
  9971  00CC  00AF               	movwf	??_printf+1
  9972  00CD  082F               	movf	??_printf+1,w
  9973  00CE  00F2               	movwf	___bmul@multiplicand
  9974  00CF  083E               	movf	printf@prec,w
  9975  00D0  3197  2737  3180   	fcall	___bmul
  9976  00D3  0020               	movlb	0	; select bank0
  9977  00D4  072E               	addwf	??_printf,w
  9978  00D5  3ED0               	addlw	-48
  9979  00D6  00B0               	movwf	??_printf+2
  9980  00D7  0830               	movf	??_printf+2,w
  9981  00D8  00BE               	movwf	printf@prec
  9982  00D9  3001               	movlw	1
  9983  00DA  07A6               	addwf	printf@f,f
  9984  00DB  3000               	movlw	0
  9985  00DC  3DA7               	addwfc	printf@f+1,f
  9986  00DD  28BA               	goto	l4154
  9987  00DE                     l4156:	
  9988                           ;doprnt.c: 624: }
  9989                           ;doprnt.c: 625: } else {
  9990                           
  9991                           
  9992                           ;doprnt.c: 626: prec = 0;
  9993  00DE  0020               	movlb	0	; select bank0
  9994  00DF  01BE               	clrf	printf@prec
  9995                           
  9996                           ;doprnt.c: 630: }
  9997                           ;doprnt.c: 635: switch(c = *f++) {
  9998  00E0  2967               	goto	l4206
  9999  00E1                     l393:	
 10000                           ;doprnt.c: 703: case 'p':
 10001                           
 10002                           ;doprnt.c: 698: case 'i':
 10003                           ;doprnt.c: 699: break;
 10004                           
 10005                           ;doprnt.c: 697: case 'd':
 10006                           
 10007                           ;doprnt.c: 638: goto alldone;
 10008                           
 10009                           ;doprnt.c: 637: case 0:
 10010                           
 10011                           
 10012                           ;doprnt.c: 718: case 'x':
 10013                           ;doprnt.c: 721: flag |= 0x80;
 10014  00E1  17BA               	bsf	printf@flag,7
 10015                           
 10016                           ;doprnt.c: 723: break;
 10017  00E2  2988               	goto	l391
 10018  00E3                     l4158:	
 10019                           ;doprnt.c: 728: case 's':
 10020                           
 10021                           
 10022                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10023  00E3  0835               	movf	printf@ap,w
 10024  00E4  0086               	movwf	6
 10025  00E5  0187               	clrf	7
 10026  00E6  3F40               	moviw [0]fsr1
 10027  00E7  00B3               	movwf	printf@cp
 10028  00E8  3F41               	moviw [1]fsr1
 10029  00E9  00B4               	movwf	printf@cp+1
 10030  00EA  3002               	movlw	2
 10031  00EB  00AE               	movwf	??_printf
 10032  00EC  082E               	movf	??_printf,w
 10033  00ED  07B5               	addwf	printf@ap,f
 10034                           
 10035                           ;doprnt.c: 740: if(!cp)
 10036  00EE  0833               	movf	printf@cp,w
 10037  00EF  0434               	iorwf	printf@cp+1,w
 10038  00F0  1D03               	btfss	3,2
 10039  00F1  28F6               	goto	l4166
 10040                           
 10041                           ;doprnt.c: 741: cp = "(null)";
 10042  00F2  305A               	movlw	low (STR_20| (0+32768))
 10043  00F3  00B3               	movwf	printf@cp
 10044  00F4  3090               	movlw	high (STR_20| (0+32768))
 10045  00F5  00B4               	movwf	printf@cp+1
 10046  00F6                     l4166:	
 10047                           
 10048                           ;doprnt.c: 745: len = 0;
 10049  00F6  01B6               	clrf	printf@len
 10050  00F7  01B7               	clrf	printf@len+1
 10051  00F8                     l4170:	
 10052                           ;doprnt.c: 746: while(cp[len])
 10053                           
 10054  00F8  0833               	movf	printf@cp,w
 10055  00F9  0736               	addwf	printf@len,w
 10056  00FA  0084               	movwf	4
 10057  00FB  0834               	movf	printf@cp+1,w
 10058  00FC  3D37               	addwfc	printf@len+1,w
 10059  00FD  0085               	movwf	5
 10060  00FE  0012               	moviw fsr0++
 10061  00FF  1903               	btfsc	3,2
 10062  0100  2906               	goto	l4172
 10063                           
 10064                           ;doprnt.c: 747: len++;
 10065  0101  3001               	movlw	1
 10066  0102  07B6               	addwf	printf@len,f
 10067  0103  3000               	movlw	0
 10068  0104  3DB7               	addwfc	printf@len+1,f
 10069  0105  28F8               	goto	l4170
 10070  0106                     l4172:	
 10071                           
 10072                           ;doprnt.c: 753: if(prec && prec < len)
 10073  0106  083E               	movf	printf@prec,w
 10074  0107  1903               	btfsc	3,2
 10075  0108  291B               	goto	l4178
 10076  0109  083E               	movf	printf@prec,w
 10077  010A  00AE               	movwf	??_printf
 10078  010B  01AF               	clrf	??_printf+1
 10079  010C  1BAE               	btfsc	??_printf,7
 10080  010D  03AF               	decf	??_printf+1,f
 10081  010E  0837               	movf	printf@len+1,w
 10082  010F  022F               	subwf	??_printf+1,w
 10083  0110  1D03               	skipz
 10084  0111  2914               	goto	u5765
 10085  0112  0836               	movf	printf@len,w
 10086  0113  022E               	subwf	??_printf,w
 10087  0114                     u5765:	
 10088  0114  1803               	skipnc
 10089  0115  291B               	goto	l4178
 10090                           
 10091                           ;doprnt.c: 754: len = prec;
 10092  0116  083E               	movf	printf@prec,w
 10093  0117  00B6               	movwf	printf@len
 10094  0118  01B7               	clrf	printf@len+1
 10095  0119  1BB6               	btfsc	printf@len,7
 10096  011A  03B7               	decf	printf@len+1,f
 10097  011B                     l4178:	
 10098                           
 10099                           ;doprnt.c: 757: if(width > len)
 10100  011B  083D               	movf	printf@width+1,w
 10101  011C  0237               	subwf	printf@len+1,w
 10102  011D  1D03               	skipz
 10103  011E  2921               	goto	u5775
 10104  011F  083C               	movf	printf@width,w
 10105  0120  0236               	subwf	printf@len,w
 10106  0121                     u5775:	
 10107  0121  1803               	skipnc
 10108  0122  2928               	goto	l4182
 10109                           
 10110                           ;doprnt.c: 758: width -= len;
 10111  0123  0836               	movf	printf@len,w
 10112  0124  02BC               	subwf	printf@width,f
 10113  0125  0837               	movf	printf@len+1,w
 10114  0126  3BBD               	subwfb	printf@width+1,f
 10115  0127  292A               	goto	l4184
 10116  0128                     l4182:	
 10117                           
 10118                           ;doprnt.c: 759: else
 10119                           ;doprnt.c: 760: width = 0;
 10120  0128  01BC               	clrf	printf@width
 10121  0129  01BD               	clrf	printf@width+1
 10122  012A                     l4184:	
 10123                           
 10124                           ;doprnt.c: 762: if(!(flag & 0x08))
 10125  012A  1DBA               	btfss	printf@flag,3
 10126  012B  2931               	goto	l4190
 10127  012C  294A               	goto	l4196
 10128  012D                     l4188:	
 10129                           ;doprnt.c: 764: while(width--)
 10130                           
 10131                           
 10132                           ;doprnt.c: 765: (putch(' ') );
 10133  012D  3020               	movlw	32
 10134  012E  3196  26B1  3180   	fcall	_putch
 10135  0131                     l4190:	
 10136  0131  30FF               	movlw	255
 10137  0132  0020               	movlb	0	; select bank0
 10138  0133  07BC               	addwf	printf@width,f
 10139  0134  30FF               	movlw	255
 10140  0135  3DBD               	addwfc	printf@width+1,f
 10141  0136  0A3C               	incf	printf@width,w
 10142  0137  1D03               	skipz
 10143  0138  292D               	goto	l4188
 10144  0139  0A3D               	incf	printf@width+1,w
 10145  013A  1903               	btfsc	3,2
 10146  013B  294A               	goto	l4196
 10147  013C  292D               	goto	l4188
 10148  013D                     l4192:	
 10149                           ;doprnt.c: 767: while(len--)
 10150                           
 10151                           
 10152                           ;doprnt.c: 768: (putch(*cp++) );
 10153  013D  0833               	movf	printf@cp,w
 10154  013E  0084               	movwf	4
 10155  013F  0834               	movf	printf@cp+1,w
 10156  0140  0085               	movwf	5
 10157  0141  0800               	movf	0,w	;code access
 10158  0142  3196  26B1  3180   	fcall	_putch
 10159  0145  3001               	movlw	1
 10160  0146  0020               	movlb	0	; select bank0
 10161  0147  07B3               	addwf	printf@cp,f
 10162  0148  3000               	movlw	0
 10163  0149  3DB4               	addwfc	printf@cp+1,f
 10164  014A                     l4196:	
 10165  014A  3001               	movlw	1
 10166  014B  02B6               	subwf	printf@len,f
 10167  014C  3000               	movlw	0
 10168  014D  3BB7               	subwfb	printf@len+1,f
 10169  014E  0A36               	incf	printf@len,w
 10170  014F  1D03               	skipz
 10171  0150  293D               	goto	l4192
 10172  0151  0A37               	incf	printf@len+1,w
 10173  0152  1D03               	btfss	3,2
 10174  0153  293D               	goto	l4192
 10175                           
 10176                           ;doprnt.c: 770: if(flag & 0x08)
 10177  0154  19BA               	btfsc	printf@flag,3
 10178  0155  295B               	goto	l4202
 10179  0156  2840               	goto	l4312
 10180  0157                     l4200:	
 10181                           ;doprnt.c: 771: while(width--)
 10182                           
 10183                           
 10184                           ;doprnt.c: 772: (putch(' ') );
 10185  0157  3020               	movlw	32
 10186  0158  3196  26B1  3180   	fcall	_putch
 10187  015B                     l4202:	
 10188  015B  30FF               	movlw	255
 10189  015C  0020               	movlb	0	; select bank0
 10190  015D  07BC               	addwf	printf@width,f
 10191  015E  30FF               	movlw	255
 10192  015F  3DBD               	addwfc	printf@width+1,f
 10193  0160  0A3C               	incf	printf@width,w
 10194  0161  1D03               	skipz
 10195  0162  2957               	goto	l4200
 10196  0163  0A3D               	incf	printf@width+1,w
 10197  0164  1903               	btfsc	3,2
 10198  0165  2840               	goto	l4312
 10199  0166  2957               	goto	l4200
 10200  0167                     l4206:	
 10201                           ;doprnt.c: 822: }
 10202                           
 10203                           ;doprnt.c: 813: continue;
 10204                           
 10205                           ;doprnt.c: 802: default:
 10206                           
 10207                           ;doprnt.c: 774: continue;
 10208                           
 10209  0167  0020               	movlb	0	; select bank0
 10210  0168  0827               	movf	printf@f+1,w
 10211  0169  00AF               	movwf	??_printf+1
 10212  016A  0826               	movf	printf@f,w
 10213  016B  00AE               	movwf	??_printf
 10214  016C  0AA6               	incf	printf@f,f
 10215  016D  1903               	skipnz
 10216  016E  0AA7               	incf	printf@f+1,f
 10217  016F  082E               	movf	??_printf,w
 10218  0170  0084               	movwf	4
 10219  0171  082F               	movf	??_printf+1,w
 10220  0172  0085               	movwf	5
 10221  0173  0800               	movf	0,w	;code access
 10222  0174  00BF               	movwf	printf@c
 10223                           
 10224                           ; Switch size 1, requested type "space"
 10225                           ; Number of cases is 6, Range of values is 0 to 120
 10226                           ; switch strategies available:
 10227                           ; Name         Instructions Cycles
 10228                           ; simple_byte           19    10 (average)
 10229                           ; direct_byte          248     6 (fixed)
 10230                           ; jumptable            260     6 (fixed)
 10231                           ;	Chosen strategy is simple_byte
 10232  0175  3A00               	xorlw	0	; case 0
 10233  0176  1903               	skipnz
 10234  0177  2B10               	goto	l452
 10235  0178  3A64               	xorlw	100	; case 100
 10236  0179  1903               	skipnz
 10237  017A  2988               	goto	l391
 10238  017B  3A0D               	xorlw	13	; case 105
 10239  017C  1903               	skipnz
 10240  017D  2988               	goto	l391
 10241  017E  3A19               	xorlw	25	; case 112
 10242  017F  1903               	skipnz
 10243  0180  28E1               	goto	l393
 10244  0181  3A03               	xorlw	3	; case 115
 10245  0182  1903               	skipnz
 10246  0183  28E3               	goto	l4158
 10247  0184  3A0B               	xorlw	11	; case 120
 10248  0185  1903               	skipnz
 10249  0186  28E1               	goto	l393
 10250  0187  2840               	goto	l4312
 10251  0188                     l391:	
 10252                           
 10253                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10254  0188  1BBA               	btfsc	printf@flag,7
 10255  0189  29A1               	goto	l4218
 10256                           
 10257                           ;doprnt.c: 1253: {
 10258                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10259  018A  0835               	movf	printf@ap,w
 10260  018B  0086               	movwf	6
 10261  018C  0187               	clrf	7
 10262  018D  3F40               	moviw [0]fsr1
 10263  018E  00B8               	movwf	printf@val
 10264  018F  3F41               	moviw [1]fsr1
 10265  0190  00B9               	movwf	printf@val+1
 10266  0191  3002               	movlw	2
 10267  0192  00AE               	movwf	??_printf
 10268  0193  082E               	movf	??_printf,w
 10269  0194  07B5               	addwf	printf@ap,f
 10270                           
 10271                           ;doprnt.c: 1261: if((int)val < 0) {
 10272  0195  1FB9               	btfss	printf@val+1,7
 10273  0196  29AC               	goto	l4222
 10274                           
 10275                           ;doprnt.c: 1262: flag |= 0x03;
 10276  0197  3003               	movlw	3
 10277  0198  04BA               	iorwf	printf@flag,f
 10278  0199  3000               	movlw	0
 10279  019A  04BB               	iorwf	printf@flag+1,f
 10280                           
 10281                           ;doprnt.c: 1263: val = -val;
 10282  019B  09B8               	comf	printf@val,f
 10283  019C  09B9               	comf	printf@val+1,f
 10284  019D  0AB8               	incf	printf@val,f
 10285  019E  1903               	skipnz
 10286  019F  0AB9               	incf	printf@val+1,f
 10287                           
 10288                           ;doprnt.c: 1264: }
 10289                           ;doprnt.c: 1266: }
 10290  01A0  29AC               	goto	l4222
 10291  01A1                     l4218:	
 10292                           
 10293                           ;doprnt.c: 1268: else
 10294                           ;doprnt.c: 1273: {
 10295                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10296  01A1  0835               	movf	printf@ap,w
 10297  01A2  0086               	movwf	6
 10298  01A3  0187               	clrf	7
 10299  01A4  3F40               	moviw [0]fsr1
 10300  01A5  00B8               	movwf	printf@val
 10301  01A6  3F41               	moviw [1]fsr1
 10302  01A7  00B9               	movwf	printf@val+1
 10303  01A8  3002               	movlw	2
 10304  01A9  00AE               	movwf	??_printf
 10305  01AA  082E               	movf	??_printf,w
 10306  01AB  07B5               	addwf	printf@ap,f
 10307  01AC                     l4222:	
 10308                           
 10309                           ;doprnt.c: 1287: }
 10310                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10311  01AC  083E               	movf	printf@prec,w
 10312  01AD  1D03               	btfss	3,2
 10313  01AE  29FC               	goto	l4250
 10314  01AF  0838               	movf	printf@val,w
 10315  01B0  0439               	iorwf	printf@val+1,w
 10316  01B1  1D03               	btfss	3,2
 10317  01B2  29FC               	goto	l4250
 10318                           
 10319                           ;doprnt.c: 1291: prec++;
 10320  01B3  3001               	movlw	1
 10321  01B4  00AE               	movwf	??_printf
 10322  01B5  082E               	movf	??_printf,w
 10323  01B6  07BE               	addwf	printf@prec,f
 10324                           
 10325                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10326  01B7  29FC               	goto	l4250
 10327  01B8                     l419:	
 10328                           ;doprnt.c: 1299: case 0x00:
 10329                           
 10330                           
 10331                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10332  01B8  01BF               	clrf	printf@c
 10333  01B9  0ABF               	incf	printf@c,f
 10334  01BA                     L7:	
 10335  01BA  3005               	movlw	5
 10336  01BB  063F               	xorwf	printf@c,w
 10337  01BC  1903               	btfsc	3,2
 10338  01BD  2A05               	goto	l4252
 10339                           
 10340                           ;doprnt.c: 1306: if(val < dpowers[c])
 10341  01BE  083F               	movf	printf@c,w
 10342  01BF  00AE               	movwf	??_printf
 10343  01C0  01AF               	clrf	??_printf+1
 10344  01C1  35AE               	lslf	??_printf,f
 10345  01C2  0DAF               	rlf	??_printf+1,f
 10346  01C3  3000               	movlw	low (_dpowers| (0+32768))
 10347  01C4  072E               	addwf	??_printf,w
 10348  01C5  0084               	movwf	4
 10349  01C6  3090               	movlw	high (_dpowers| (0+32768))
 10350  01C7  3D2F               	addwfc	??_printf+1,w
 10351  01C8  0085               	movwf	5
 10352  01C9  3F00               	moviw [0]fsr0
 10353  01CA  00B0               	movwf	??_printf+2
 10354  01CB  3F01               	moviw [1]fsr0
 10355  01CC  00B1               	movwf	??_printf+3
 10356  01CD  0831               	movf	??_printf+3,w
 10357  01CE  0239               	subwf	printf@val+1,w
 10358  01CF  1D03               	skipz
 10359  01D0  29D3               	goto	u5885
 10360  01D1  0830               	movf	??_printf+2,w
 10361  01D2  0238               	subwf	printf@val,w
 10362  01D3                     u5885:	
 10363  01D3  1C03               	btfss	3,0
 10364  01D4  2A05               	goto	l4252
 10365                           
 10366                           ;doprnt.c: 1307: break;
 10367  01D5  3001               	movlw	1
 10368  01D6  00AE               	movwf	??_printf
 10369  01D7  082E               	movf	??_printf,w
 10370  01D8  07BF               	addwf	printf@c,f
 10371  01D9  29BA               	goto	L7
 10372  01DA                     l424:	
 10373                           ;doprnt.c: 1314: case 0x80:
 10374                           
 10375                           ;doprnt.c: 1309: break;
 10376                           
 10377                           
 10378                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10379  01DA  01BF               	clrf	printf@c
 10380  01DB  0ABF               	incf	printf@c,f
 10381  01DC                     L8:	
 10382  01DC  3004               	movlw	4
 10383  01DD  063F               	xorwf	printf@c,w
 10384  01DE  1903               	btfsc	3,2
 10385  01DF  2A05               	goto	l4252
 10386                           
 10387                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10388  01E0  083F               	movf	printf@c,w
 10389  01E1  00AE               	movwf	??_printf
 10390  01E2  01AF               	clrf	??_printf+1
 10391  01E3  35AE               	lslf	??_printf,f
 10392  01E4  0DAF               	rlf	??_printf+1,f
 10393  01E5  300A               	movlw	low (_hexpowers| (0+32768))
 10394  01E6  072E               	addwf	??_printf,w
 10395  01E7  0084               	movwf	4
 10396  01E8  3090               	movlw	high (_hexpowers| (0+32768))
 10397  01E9  3D2F               	addwfc	??_printf+1,w
 10398  01EA  0085               	movwf	5
 10399  01EB  3F00               	moviw [0]fsr0
 10400  01EC  00B0               	movwf	??_printf+2
 10401  01ED  3F01               	moviw [1]fsr0
 10402  01EE  00B1               	movwf	??_printf+3
 10403  01EF  0831               	movf	??_printf+3,w
 10404  01F0  0239               	subwf	printf@val+1,w
 10405  01F1  1D03               	skipz
 10406  01F2  29F5               	goto	u5915
 10407  01F3  0830               	movf	??_printf+2,w
 10408  01F4  0238               	subwf	printf@val,w
 10409  01F5                     u5915:	
 10410  01F5  1C03               	btfss	3,0
 10411  01F6  2A05               	goto	l4252
 10412                           
 10413                           ;doprnt.c: 1318: break;
 10414  01F7  3001               	movlw	1
 10415  01F8  00AE               	movwf	??_printf
 10416  01F9  082E               	movf	??_printf,w
 10417  01FA  07BF               	addwf	printf@c,f
 10418  01FB  29DC               	goto	L8
 10419  01FC                     l4250:	
 10420                           ;doprnt.c: 1336: }
 10421                           
 10422                           ;doprnt.c: 1320: break;
 10423                           
 10424  01FC  083A               	movf	printf@flag,w
 10425  01FD  3980               	andlw	128
 10426                           
 10427                           ; Switch size 1, requested type "space"
 10428                           ; Number of cases is 2, Range of values is 0 to 128
 10429                           ; switch strategies available:
 10430                           ; Name         Instructions Cycles
 10431                           ; simple_byte            7     4 (average)
 10432                           ; jumptable            260     6 (fixed)
 10433                           ;	Chosen strategy is simple_byte
 10434  01FE  3A00               	xorlw	0	; case 0
 10435  01FF  1903               	skipnz
 10436  0200  29B8               	goto	l419
 10437  0201  3A80               	xorlw	128	; case 128
 10438  0202  1903               	skipnz
 10439  0203  29DA               	goto	l424
 10440  0204  2A05               	goto	l4252
 10441  0205                     l4252:	
 10442                           
 10443                           ;doprnt.c: 1339: if(c < prec)
 10444  0205  083F               	movf	printf@c,w
 10445  0206  3A80               	xorlw	128
 10446  0207  00AE               	movwf	??_printf
 10447  0208  083E               	movf	printf@prec,w
 10448  0209  3A80               	xorlw	128
 10449  020A  02AE               	subwf	??_printf,f
 10450  020B  1803               	skipnc
 10451  020C  2A12               	goto	l4256
 10452                           
 10453                           ;doprnt.c: 1340: c = prec;
 10454  020D  083E               	movf	printf@prec,w
 10455  020E  00AE               	movwf	??_printf
 10456  020F  082E               	movf	??_printf,w
 10457  0210  00BF               	movwf	printf@c
 10458  0211  2A1E               	goto	l4260
 10459  0212                     l4256:	
 10460                           
 10461                           ;doprnt.c: 1341: else if(prec < c)
 10462  0212  083E               	movf	printf@prec,w
 10463  0213  3A80               	xorlw	128
 10464  0214  00AE               	movwf	??_printf
 10465  0215  083F               	movf	printf@c,w
 10466  0216  3A80               	xorlw	128
 10467  0217  02AE               	subwf	??_printf,f
 10468  0218  1803               	skipnc
 10469  0219  2A1E               	goto	l4260
 10470                           
 10471                           ;doprnt.c: 1342: prec = c;
 10472  021A  083F               	movf	printf@c,w
 10473  021B  00AE               	movwf	??_printf
 10474  021C  082E               	movf	??_printf,w
 10475  021D  00BE               	movwf	printf@prec
 10476  021E                     l4260:	
 10477                           
 10478                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10479  021E  083C               	movf	printf@width,w
 10480  021F  043D               	iorwf	printf@width+1,w
 10481  0220  1903               	btfsc	3,2
 10482  0221  2A30               	goto	l4266
 10483  0222  3003               	movlw	3
 10484  0223  053A               	andwf	printf@flag,w
 10485  0224  00AE               	movwf	??_printf
 10486  0225  3000               	movlw	0
 10487  0226  053B               	andwf	printf@flag+1,w
 10488  0227  00AF               	movwf	??_printf+1
 10489  0228  082E               	movf	??_printf,w
 10490  0229  042F               	iorwf	??_printf+1,w
 10491  022A  1903               	btfsc	3,2
 10492  022B  2A30               	goto	l4266
 10493                           
 10494                           ;doprnt.c: 1346: width--;
 10495  022C  30FF               	movlw	255
 10496  022D  07BC               	addwf	printf@width,f
 10497  022E  30FF               	movlw	255
 10498  022F  3DBD               	addwfc	printf@width+1,f
 10499  0230                     l4266:	
 10500                           
 10501                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10502  0230  1F3B               	btfss	printf@flag+1,6
 10503  0231  2A51               	goto	l4274
 10504                           
 10505                           ;doprnt.c: 1349: if(width > prec)
 10506  0232  083E               	movf	printf@prec,w
 10507  0233  00AE               	movwf	??_printf
 10508  0234  01AF               	clrf	??_printf+1
 10509  0235  1BAE               	btfsc	??_printf,7
 10510  0236  03AF               	decf	??_printf+1,f
 10511  0237  082F               	movf	??_printf+1,w
 10512  0238  3A80               	xorlw	128
 10513  0239  00B0               	movwf	??_printf+2
 10514  023A  083D               	movf	printf@width+1,w
 10515  023B  3A80               	xorlw	128
 10516  023C  0230               	subwf	??_printf+2,w
 10517  023D  1D03               	skipz
 10518  023E  2A41               	goto	u5985
 10519  023F  083C               	movf	printf@width,w
 10520  0240  022E               	subwf	??_printf,w
 10521  0241                     u5985:	
 10522  0241  1803               	skipnc
 10523  0242  2A4E               	goto	l4272
 10524                           
 10525                           ;doprnt.c: 1350: width -= prec;
 10526  0243  0020               	movlb	0	; select bank0
 10527  0244  083E               	movf	printf@prec,w
 10528  0245  00AE               	movwf	??_printf
 10529  0246  01AF               	clrf	??_printf+1
 10530  0247  1BAE               	btfsc	??_printf,7
 10531  0248  03AF               	decf	??_printf+1,f
 10532  0249  082E               	movf	??_printf,w
 10533  024A  02BC               	subwf	printf@width,f
 10534  024B  082F               	movf	??_printf+1,w
 10535  024C  3BBD               	subwfb	printf@width+1,f
 10536  024D  2A51               	goto	l4274
 10537  024E                     l4272:	
 10538                           
 10539                           ;doprnt.c: 1351: else
 10540                           ;doprnt.c: 1352: width = 0;
 10541  024E  0020               	movlb	0	; select bank0
 10542  024F  01BC               	clrf	printf@width
 10543  0250  01BD               	clrf	printf@width+1
 10544  0251                     l4274:	
 10545                           
 10546                           ;doprnt.c: 1353: }
 10547                           ;doprnt.c: 1381: if(width > c)
 10548  0251  083F               	movf	printf@c,w
 10549  0252  00AE               	movwf	??_printf
 10550  0253  01AF               	clrf	??_printf+1
 10551  0254  1BAE               	btfsc	??_printf,7
 10552  0255  03AF               	decf	??_printf+1,f
 10553  0256  082F               	movf	??_printf+1,w
 10554  0257  3A80               	xorlw	128
 10555  0258  00B0               	movwf	??_printf+2
 10556  0259  083D               	movf	printf@width+1,w
 10557  025A  3A80               	xorlw	128
 10558  025B  0230               	subwf	??_printf+2,w
 10559  025C  1D03               	skipz
 10560  025D  2A60               	goto	u5995
 10561  025E  083C               	movf	printf@width,w
 10562  025F  022E               	subwf	??_printf,w
 10563  0260                     u5995:	
 10564  0260  1803               	skipnc
 10565  0261  2A6D               	goto	l4278
 10566                           
 10567                           ;doprnt.c: 1382: width -= c;
 10568  0262  0020               	movlb	0	; select bank0
 10569  0263  083F               	movf	printf@c,w
 10570  0264  00AE               	movwf	??_printf
 10571  0265  01AF               	clrf	??_printf+1
 10572  0266  1BAE               	btfsc	??_printf,7
 10573  0267  03AF               	decf	??_printf+1,f
 10574  0268  082E               	movf	??_printf,w
 10575  0269  02BC               	subwf	printf@width,f
 10576  026A  082F               	movf	??_printf+1,w
 10577  026B  3BBD               	subwfb	printf@width+1,f
 10578  026C  2A70               	goto	l4280
 10579  026D                     l4278:	
 10580                           
 10581                           ;doprnt.c: 1383: else
 10582                           ;doprnt.c: 1384: width = 0;
 10583  026D  0020               	movlb	0	; select bank0
 10584  026E  01BC               	clrf	printf@width
 10585  026F  01BD               	clrf	printf@width+1
 10586  0270                     l4280:	
 10587                           
 10588                           ;doprnt.c: 1422: {
 10589                           ;doprnt.c: 1424: if(width
 10590                           ;doprnt.c: 1426: && !(flag & 0x08)
 10591                           ;doprnt.c: 1428: )
 10592  0270  083C               	movf	printf@width,w
 10593  0271  043D               	iorwf	printf@width+1,w
 10594  0272  1D03               	btfss	3,2
 10595  0273  19BA               	btfsc	printf@flag,3
 10596  0274  2A82               	goto	l4288
 10597  0275                     l4284:	
 10598                           ;doprnt.c: 1429: do
 10599                           
 10600                           
 10601                           ;doprnt.c: 1430: (putch(' ') );
 10602  0275  3020               	movlw	32
 10603  0276  3196  26B1  3180   	fcall	_putch
 10604                           
 10605                           ;doprnt.c: 1431: while(--width);
 10606  0279  30FF               	movlw	255
 10607  027A  0020               	movlb	0	; select bank0
 10608  027B  07BC               	addwf	printf@width,f
 10609  027C  30FF               	movlw	255
 10610  027D  3DBD               	addwfc	printf@width+1,f
 10611  027E  083C               	movf	printf@width,w
 10612  027F  043D               	iorwf	printf@width+1,w
 10613  0280  1D03               	btfss	3,2
 10614  0281  2A75               	goto	l4284
 10615  0282                     l4288:	
 10616                           
 10617                           ;doprnt.c: 1438: if(flag & 0x03)
 10618  0282  3003               	movlw	3
 10619  0283  053A               	andwf	printf@flag,w
 10620  0284  00AE               	movwf	??_printf
 10621  0285  3000               	movlw	0
 10622  0286  053B               	andwf	printf@flag+1,w
 10623  0287  00AF               	movwf	??_printf+1
 10624  0288  082E               	movf	??_printf,w
 10625  0289  042F               	iorwf	??_printf+1,w
 10626  028A  1903               	btfsc	3,2
 10627  028B  2AE2               	goto	l4304
 10628                           
 10629                           ;doprnt.c: 1439: (putch('-') );
 10630  028C  302D               	movlw	45
 10631  028D  2ADF               	goto	L9
 10632  028E                     l4292:	
 10633                           ;doprnt.c: 1478: {
 10634                           ;doprnt.c: 1483: case 0x00:
 10635                           
 10636                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 10637                           
 10638                           ;doprnt.c: 1469: }
 10639                           ;doprnt.c: 1474: while(prec--) {
 10640                           
 10641                           
 10642                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10643  028E  300A               	movlw	10
 10644  028F  0020               	movlb	0	; select bank0
 10645  0290  00A0               	movwf	___lwmod@divisor
 10646  0291  3000               	movlw	0
 10647  0292  00A1               	movwf	___lwmod@divisor+1
 10648  0293  083E               	movf	printf@prec,w
 10649  0294  00AE               	movwf	??_printf
 10650  0295  01AF               	clrf	??_printf+1
 10651  0296  35AE               	lslf	??_printf,f
 10652  0297  0DAF               	rlf	??_printf+1,f
 10653  0298  3000               	movlw	low (_dpowers| (0+32768))
 10654  0299  072E               	addwf	??_printf,w
 10655  029A  0084               	movwf	4
 10656  029B  3090               	movlw	high (_dpowers| (0+32768))
 10657  029C  3D2F               	addwfc	??_printf+1,w
 10658  029D  0085               	movwf	5
 10659  029E  3F00               	moviw [0]fsr0
 10660  029F  00F2               	movwf	___lwdiv@divisor
 10661  02A0  3F01               	moviw [1]fsr0
 10662  02A1  00F3               	movwf	___lwdiv@divisor+1
 10663  02A2  0839               	movf	printf@val+1,w
 10664  02A3  00F5               	movwf	___lwdiv@dividend+1
 10665  02A4  0838               	movf	printf@val,w
 10666  02A5  00F4               	movwf	___lwdiv@dividend
 10667  02A6  318A  220D  3180   	fcall	___lwdiv
 10668  02A9  0873               	movf	?___lwdiv+1,w
 10669  02AA  0020               	movlb	0	; select bank0
 10670  02AB  00A3               	movwf	___lwmod@dividend+1
 10671  02AC  0872               	movf	?___lwdiv,w
 10672  02AD  00A2               	movwf	___lwmod@dividend
 10673  02AE  3188  20ED  3180   	fcall	___lwmod
 10674  02B1  0020               	movlb	0	; select bank0
 10675  02B2  0820               	movf	?___lwmod,w
 10676  02B3  3E30               	addlw	48
 10677  02B4  00B0               	movwf	??_printf+2
 10678  02B5  0830               	movf	??_printf+2,w
 10679  02B6  2ADD               	goto	L6
 10680  02B7                     l4294:	
 10681                           ;doprnt.c: 1497: case 0x80:
 10682                           
 10683                           ;doprnt.c: 1491: break;
 10684                           
 10685                           
 10686                           ;doprnt.c: 1499: {
 10687                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10688  02B7  083E               	movf	printf@prec,w
 10689  02B8  00AE               	movwf	??_printf
 10690  02B9  01AF               	clrf	??_printf+1
 10691  02BA  35AE               	lslf	??_printf,f
 10692  02BB  0DAF               	rlf	??_printf+1,f
 10693  02BC  300A               	movlw	low (_hexpowers| (0+32768))
 10694  02BD  072E               	addwf	??_printf,w
 10695  02BE  0084               	movwf	4
 10696  02BF  3090               	movlw	high (_hexpowers| (0+32768))
 10697  02C0  3D2F               	addwfc	??_printf+1,w
 10698  02C1  0085               	movwf	5
 10699  02C2  3F00               	moviw [0]fsr0
 10700  02C3  00F2               	movwf	___lwdiv@divisor
 10701  02C4  3F01               	moviw [1]fsr0
 10702  02C5  00F3               	movwf	___lwdiv@divisor+1
 10703  02C6  0839               	movf	printf@val+1,w
 10704  02C7  00F5               	movwf	___lwdiv@dividend+1
 10705  02C8  0838               	movf	printf@val,w
 10706  02C9  00F4               	movwf	___lwdiv@dividend
 10707  02CA  318A  220D  3180   	fcall	___lwdiv
 10708  02CD  0872               	movf	?___lwdiv,w
 10709  02CE  390F               	andlw	15
 10710  02CF  0020               	movlb	0	; select bank0
 10711  02D0  00B0               	movwf	??_printf+2
 10712  02D1  0830               	movf	??_printf+2,w
 10713  02D2  00B2               	movwf	printf@idx
 10714                           
 10715                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10716  02D3  0832               	movf	printf@idx,w
 10717  02D4  3E49               	addlw	low (STR_21| (0+32768))
 10718  02D5  0084               	movwf	4
 10719  02D6  3090               	movlw	high (STR_21| (0+32768))
 10720  02D7  1803               	skipnc
 10721  02D8  3E01               	addlw	1
 10722  02D9  0085               	movwf	5
 10723  02DA  0800               	movf	0,w	;code access
 10724  02DB  00AE               	movwf	??_printf
 10725  02DC  082E               	movf	??_printf,w
 10726  02DD                     L6:	
 10727  02DD  00BF               	movwf	printf@c
 10728  02DE                     l4302:	
 10729                           ;doprnt.c: 1523: }
 10730                           
 10731                           ;doprnt.c: 1508: }
 10732                           ;doprnt.c: 1510: break;
 10733                           
 10734                           
 10735                           ;doprnt.c: 1524: (putch(c) );
 10736  02DE  083F               	movf	printf@c,w
 10737  02DF                     L9:	
 10738  02DF  3196  26B1  3180   	fcall	_putch
 10739  02E2                     l4304:	
 10740  02E2  30FF               	movlw	255
 10741  02E3  0020               	movlb	0	; select bank0
 10742  02E4  00AE               	movwf	??_printf
 10743  02E5  082E               	movf	??_printf,w
 10744  02E6  07BE               	addwf	printf@prec,f
 10745  02E7  0A3E               	incf	printf@prec,w
 10746  02E8  1903               	btfsc	3,2
 10747  02E9  2AF5               	goto	l447
 10748  02EA  0020               	movlb	0	; select bank0
 10749  02EB  083A               	movf	printf@flag,w
 10750  02EC  3980               	andlw	128
 10751                           
 10752                           ; Switch size 1, requested type "space"
 10753                           ; Number of cases is 2, Range of values is 0 to 128
 10754                           ; switch strategies available:
 10755                           ; Name         Instructions Cycles
 10756                           ; simple_byte            7     4 (average)
 10757                           ; jumptable            260     6 (fixed)
 10758                           ;	Chosen strategy is simple_byte
 10759  02ED  3A00               	xorlw	0	; case 0
 10760  02EE  1903               	skipnz
 10761  02EF  2A8E               	goto	l4292
 10762  02F0  3A80               	xorlw	128	; case 128
 10763  02F1  1903               	skipnz
 10764  02F2  2AB7               	goto	l4294
 10765  02F3  2ADE               	goto	l4302
 10766  02F4  2ADE               	goto	l4302
 10767  02F5                     l447:	
 10768                           
 10769                           ;doprnt.c: 1525: }
 10770                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 10771  02F5  1DBA               	btfss	printf@flag,3
 10772  02F6  2840               	goto	l4312
 10773  02F7  083D               	movf	printf@width+1,w
 10774  02F8  3A80               	xorlw	128
 10775  02F9  00AE               	movwf	??_printf
 10776  02FA  3080               	movlw	128
 10777  02FB  022E               	subwf	??_printf,w
 10778  02FC  1D03               	skipz
 10779  02FD  2B00               	goto	u6065
 10780  02FE  3001               	movlw	1
 10781  02FF  023C               	subwf	printf@width,w
 10782  0300                     u6065:	
 10783  0300  1C03               	skipc
 10784  0301  2840               	goto	l4312
 10785  0302                     l4308:	
 10786                           ;doprnt.c: 1529: do
 10787                           
 10788                           
 10789                           ;doprnt.c: 1530: (putch(' ') );
 10790  0302  3020               	movlw	32
 10791  0303  3196  26B1  3180   	fcall	_putch
 10792                           
 10793                           ;doprnt.c: 1531: while(--width);
 10794  0306  30FF               	movlw	255
 10795  0307  0020               	movlb	0	; select bank0
 10796  0308  07BC               	addwf	printf@width,f
 10797  0309  30FF               	movlw	255
 10798  030A  3DBD               	addwfc	printf@width+1,f
 10799  030B  083C               	movf	printf@width,w
 10800  030C  043D               	iorwf	printf@width+1,w
 10801  030D  1903               	btfsc	3,2
 10802  030E  2840               	goto	l4312
 10803  030F  2B02               	goto	l4308
 10804  0310                     l452:	
 10805                           ;doprnt.c: 1540: return 0;
 10806                           ;	Return value of _printf is never used
 10807                           
 10808                           ;doprnt.c: 1533: }
 10809                           ;doprnt.c: 1535: alldone:
 10810                           
 10811  0310  0008               	return
 10812  0311                     __end_of_printf:	
 10813                           
 10814                           	psect	text38
 10815  16B1                     __ptext38:	
 10816 ;; *************** function _putch *****************
 10817 ;; Defined at:
 10818 ;;		line 160 in file "mcc_generated_files/eusart.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  txData          1    wreg     unsigned char 
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;  txData          1    4[COMMON] unsigned char 
 10823 ;; Return value:  Size  Location     Type
 10824 ;;                  1    wreg      void 
 10825 ;; Registers used:
 10826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;Total ram usage:        1 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:    3
 10839 ;; This function calls:
 10840 ;;		_EUSART_Write
 10841 ;; This function is called by:
 10842 ;;		_printf
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           
 10847                           ;psect for function _putch
 10848  16B1                     _putch:	
 10849                           
 10850                           ;incstack = 0
 10851                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10852                           ;putch@txData stored from wreg
 10853  16B1  00F4               	movwf	putch@txData
 10854                           
 10855                           ;eusart.c: 162: EUSART_Write(txData);
 10856  16B2  0874               	movf	putch@txData,w
 10857  16B3  3188  204E         	fcall	_EUSART_Write
 10858  16B5  0008               	return
 10859  16B6                     __end_of_putch:	
 10860                           
 10861                           	psect	text39
 10862  084E                     __ptext39:	
 10863 ;; *************** function _EUSART_Write *****************
 10864 ;; Defined at:
 10865 ;;		line 132 in file "mcc_generated_files/eusart.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;  txData          1    wreg     unsigned char 
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;  txData          1    3[COMMON] unsigned char 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      void 
 10872 ;; Registers used:
 10873 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        2 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    2
 10886 ;; This function calls:
 10887 ;;		Nothing
 10888 ;; This function is called by:
 10889 ;;		_putch
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function _EUSART_Write
 10895  084E                     _EUSART_Write:	
 10896                           
 10897                           ;incstack = 0
 10898                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 10899                           ;EUSART_Write@txData stored from wreg
 10900  084E  00F3               	movwf	EUSART_Write@txData
 10901  084F                     l2616:	
 10902                           ;eusart.c: 135: {
 10903                           
 10904                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
 10905                           
 10906  084F  0021               	movlb	1	; select bank1
 10907  0850  0862               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 10908  0851  1903               	btfsc	3,2
 10909  0852  284F               	goto	l2616
 10910                           
 10911                           ;eusart.c: 136: }
 10912                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
 10913  0853  1A11               	btfsc	17,4	;volatile
 10914  0854  2859               	goto	l167
 10915                           
 10916                           ;eusart.c: 139: {
 10917                           ;eusart.c: 140: TX1REG = txData;
 10918  0855  0873               	movf	EUSART_Write@txData,w
 10919  0856  0023               	movlb	3	; select bank3
 10920  0857  009A               	movwf	26	;volatile
 10921                           
 10922                           ;eusart.c: 141: }
 10923  0858  286C               	goto	l2630
 10924  0859                     l167:	
 10925                           
 10926                           ;eusart.c: 142: else
 10927                           ;eusart.c: 143: {
 10928                           ;eusart.c: 144: PIE1bits.TXIE = 0;
 10929  0859  1211               	bcf	17,4	;volatile
 10930                           
 10931                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
 10932  085A  0873               	movf	EUSART_Write@txData,w
 10933  085B  00F2               	movwf	??_EUSART_Write
 10934  085C  0864               	movf	_eusartTxHead^(0+128),w
 10935  085D  3EC8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10936  085E  0086               	movwf	6
 10937  085F  0187               	clrf	7
 10938  0860  0872               	movf	??_EUSART_Write,w
 10939  0861  0081               	movwf	1
 10940  0862  3001               	movlw	1
 10941  0863  00F2               	movwf	??_EUSART_Write
 10942  0864  0872               	movf	??_EUSART_Write,w
 10943  0865  07E4               	addwf	_eusartTxHead^(0+128),f
 10944                           
 10945                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 10946  0866  3010               	movlw	16
 10947  0867  0264               	subwf	_eusartTxHead^(0+128),w
 10948  0868  1803               	btfsc	3,0
 10949                           
 10950                           ;eusart.c: 147: {
 10951                           ;eusart.c: 148: eusartTxHead = 0;
 10952  0869  01E4               	clrf	_eusartTxHead^(0+128)
 10953                           
 10954                           ;eusart.c: 149: }
 10955                           ;eusart.c: 150: eusartTxBufferRemaining--;
 10956  086A  3001               	movlw	1
 10957  086B  02E2               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 10958  086C                     l2630:	
 10959                           
 10960                           ;eusart.c: 151: }
 10961                           ;eusart.c: 152: PIE1bits.TXIE = 1;
 10962  086C  0021               	movlb	1	; select bank1
 10963  086D  1611               	bsf	17,4	;volatile
 10964  086E  0008               	return
 10965  086F                     __end_of_EUSART_Write:	
 10966                           
 10967                           	psect	text40
 10968  16EE                     __ptext40:	
 10969 ;; *************** function _isdigit *****************
 10970 ;; Defined at:
 10971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;  c               1    wreg     unsigned char 
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;  c               1    3[COMMON] unsigned char 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;		None               void
 10978 ;; Registers used:
 10979 ;;		wreg, status,2, status,0
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;Total ram usage:        2 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    2
 10992 ;; This function calls:
 10993 ;;		Nothing
 10994 ;; This function is called by:
 10995 ;;		_printf
 10996 ;;		_strtol
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function _isdigit
 11002  16EE                     _isdigit:	
 11003                           
 11004                           ;incstack = 0
 11005                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11006                           ;isdigit@c stored from wreg
 11007  16EE  00F3               	movwf	isdigit@c
 11008  16EF  01F2               	clrf	_isdigit$907
 11009  16F0  303A               	movlw	58
 11010  16F1  0273               	subwf	isdigit@c,w
 11011  16F2  1803               	skipnc
 11012  16F3  2EFA               	goto	l2474
 11013  16F4  3030               	movlw	48
 11014  16F5  0273               	subwf	isdigit@c,w
 11015  16F6  1C03               	skipc
 11016  16F7  2EFA               	goto	l2474
 11017  16F8  01F2               	clrf	_isdigit$907
 11018  16F9  0AF2               	incf	_isdigit$907,f
 11019  16FA                     l2474:	
 11020  16FA  0C72               	rrf	_isdigit$907,w
 11021  16FB  0008               	return
 11022  16FC                     __end_of_isdigit:	
 11023                           
 11024                           	psect	text41
 11025  17C9                     __ptext41:	
 11026 ;; *************** function ___wmul *****************
 11027 ;; Defined at:
 11028 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;  multiplier      2    2[COMMON] unsigned int 
 11031 ;;  multiplicand    2    4[COMMON] unsigned int 
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;  product         2    6[COMMON] unsigned int 
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  2    2[COMMON] unsigned int 
 11036 ;; Registers used:
 11037 ;;		wreg, status,2, status,0
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;Total ram usage:        6 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    2
 11050 ;; This function calls:
 11051 ;;		Nothing
 11052 ;; This function is called by:
 11053 ;;		_printf
 11054 ;;		_eval_poly
 11055 ;; This function uses a non-reentrant model
 11056 ;;
 11057                           
 11058                           
 11059                           ;psect for function ___wmul
 11060  17C9                     ___wmul:	
 11061                           
 11062                           ;incstack = 0
 11063                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11064  17C9  01F6               	clrf	___wmul@product
 11065  17CA  01F7               	clrf	___wmul@product+1
 11066  17CB                     l2736:	
 11067  17CB  1C72               	btfss	___wmul@multiplier,0
 11068  17CC  2FD1               	goto	l534
 11069  17CD  0874               	movf	___wmul@multiplicand,w
 11070  17CE  07F6               	addwf	___wmul@product,f
 11071  17CF  0875               	movf	___wmul@multiplicand+1,w
 11072  17D0  3DF7               	addwfc	___wmul@product+1,f
 11073  17D1                     l534:	
 11074  17D1  3001               	movlw	1
 11075  17D2                     u3015:	
 11076  17D2  35F4               	lslf	___wmul@multiplicand,f
 11077  17D3  0DF5               	rlf	___wmul@multiplicand+1,f
 11078  17D4  0B89               	decfsz	9,f
 11079  17D5  2FD2               	goto	u3015
 11080  17D6  3001               	movlw	1
 11081  17D7                     u3025:	
 11082  17D7  36F3               	lsrf	___wmul@multiplier+1,f
 11083  17D8  0CF2               	rrf	___wmul@multiplier,f
 11084  17D9  0B89               	decfsz	9,f
 11085  17DA  2FD7               	goto	u3025
 11086  17DB  0872               	movf	___wmul@multiplier,w
 11087  17DC  0473               	iorwf	___wmul@multiplier+1,w
 11088  17DD  1D03               	btfss	3,2
 11089  17DE  2FCB               	goto	l2736
 11090  17DF  0877               	movf	___wmul@product+1,w
 11091  17E0  00F3               	movwf	?___wmul+1
 11092  17E1  0876               	movf	___wmul@product,w
 11093  17E2  00F2               	movwf	?___wmul
 11094  17E3  0008               	return
 11095  17E4                     __end_of___wmul:	
 11096                           
 11097                           	psect	text42
 11098  08ED                     __ptext42:	
 11099 ;; *************** function ___lwmod *****************
 11100 ;; Defined at:
 11101 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;  divisor         2    0[BANK0 ] unsigned int 
 11104 ;;  dividend        2    2[BANK0 ] unsigned int 
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;  counter         1    5[BANK0 ] unsigned char 
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  2    0[BANK0 ] unsigned int 
 11109 ;; Registers used:
 11110 ;;		wreg, status,2, status,0
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;Total ram usage:        6 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    2
 11123 ;; This function calls:
 11124 ;;		Nothing
 11125 ;; This function is called by:
 11126 ;;		_printf
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function ___lwmod
 11132  08ED                     ___lwmod:	
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11136  08ED  0020               	movlb	0	; select bank0
 11137  08EE  0820               	movf	___lwmod@divisor,w
 11138  08EF  0421               	iorwf	___lwmod@divisor+1,w
 11139  08F0  1903               	btfsc	3,2
 11140  08F1  2915               	goto	l4064
 11141  08F2  01A5               	clrf	___lwmod@counter
 11142  08F3  0AA5               	incf	___lwmod@counter,f
 11143  08F4                     l4054:	
 11144  08F4  1BA1               	btfsc	___lwmod@divisor+1,7
 11145  08F5  2900               	goto	l4056
 11146  08F6  3001               	movlw	1
 11147  08F7                     u5585:	
 11148  08F7  35A0               	lslf	___lwmod@divisor,f
 11149  08F8  0DA1               	rlf	___lwmod@divisor+1,f
 11150  08F9  0B89               	decfsz	9,f
 11151  08FA  28F7               	goto	u5585
 11152  08FB  3001               	movlw	1
 11153  08FC  00A4               	movwf	??___lwmod
 11154  08FD  0824               	movf	??___lwmod,w
 11155  08FE  07A5               	addwf	___lwmod@counter,f
 11156  08FF  28F4               	goto	l4054
 11157  0900                     l4056:	
 11158  0900  0821               	movf	___lwmod@divisor+1,w
 11159  0901  0223               	subwf	___lwmod@dividend+1,w
 11160  0902  1D03               	skipz
 11161  0903  2906               	goto	u5605
 11162  0904  0820               	movf	___lwmod@divisor,w
 11163  0905  0222               	subwf	___lwmod@dividend,w
 11164  0906                     u5605:	
 11165  0906  1C03               	skipc
 11166  0907  290C               	goto	l4060
 11167  0908  0820               	movf	___lwmod@divisor,w
 11168  0909  02A2               	subwf	___lwmod@dividend,f
 11169  090A  0821               	movf	___lwmod@divisor+1,w
 11170  090B  3BA3               	subwfb	___lwmod@dividend+1,f
 11171  090C                     l4060:	
 11172  090C  3001               	movlw	1
 11173  090D                     u5615:	
 11174  090D  36A1               	lsrf	___lwmod@divisor+1,f
 11175  090E  0CA0               	rrf	___lwmod@divisor,f
 11176  090F  0B89               	decfsz	9,f
 11177  0910  290D               	goto	u5615
 11178  0911  3001               	movlw	1
 11179  0912  02A5               	subwf	___lwmod@counter,f
 11180  0913  1D03               	btfss	3,2
 11181  0914  2900               	goto	l4056
 11182  0915                     l4064:	
 11183  0915  0823               	movf	___lwmod@dividend+1,w
 11184  0916  00A1               	movwf	?___lwmod+1
 11185  0917  0822               	movf	___lwmod@dividend,w
 11186  0918  00A0               	movwf	?___lwmod
 11187  0919  0008               	return
 11188  091A                     __end_of___lwmod:	
 11189                           
 11190                           	psect	text43
 11191  0A0D                     __ptext43:	
 11192 ;; *************** function ___lwdiv *****************
 11193 ;; Defined at:
 11194 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;  divisor         2    2[COMMON] unsigned int 
 11197 ;;  dividend        2    4[COMMON] unsigned int 
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;  quotient        2    7[COMMON] unsigned int 
 11200 ;;  counter         1    9[COMMON] unsigned char 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  2    2[COMMON] unsigned int 
 11203 ;; Registers used:
 11204 ;;		wreg, status,2, status,0
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:        8 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    2
 11217 ;; This function calls:
 11218 ;;		Nothing
 11219 ;; This function is called by:
 11220 ;;		_printf
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function ___lwdiv
 11226  0A0D                     ___lwdiv:	
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11230  0A0D  01F7               	clrf	___lwdiv@quotient
 11231  0A0E  01F8               	clrf	___lwdiv@quotient+1
 11232  0A0F  0872               	movf	___lwdiv@divisor,w
 11233  0A10  0473               	iorwf	___lwdiv@divisor+1,w
 11234  0A11  1903               	btfsc	3,2
 11235  0A12  2A3C               	goto	l2982
 11236  0A13  01F9               	clrf	___lwdiv@counter
 11237  0A14  0AF9               	incf	___lwdiv@counter,f
 11238  0A15                     l2970:	
 11239  0A15  1BF3               	btfsc	___lwdiv@divisor+1,7
 11240  0A16  2A21               	goto	l2972
 11241  0A17  3001               	movlw	1
 11242  0A18                     u3585:	
 11243  0A18  35F2               	lslf	___lwdiv@divisor,f
 11244  0A19  0DF3               	rlf	___lwdiv@divisor+1,f
 11245  0A1A  0B89               	decfsz	9,f
 11246  0A1B  2A18               	goto	u3585
 11247  0A1C  3001               	movlw	1
 11248  0A1D  00F6               	movwf	??___lwdiv
 11249  0A1E  0876               	movf	??___lwdiv,w
 11250  0A1F  07F9               	addwf	___lwdiv@counter,f
 11251  0A20  2A15               	goto	l2970
 11252  0A21                     l2972:	
 11253  0A21  3001               	movlw	1
 11254  0A22                     u3605:	
 11255  0A22  35F7               	lslf	___lwdiv@quotient,f
 11256  0A23  0DF8               	rlf	___lwdiv@quotient+1,f
 11257  0A24  0B89               	decfsz	9,f
 11258  0A25  2A22               	goto	u3605
 11259  0A26  0873               	movf	___lwdiv@divisor+1,w
 11260  0A27  0275               	subwf	___lwdiv@dividend+1,w
 11261  0A28  1D03               	skipz
 11262  0A29  2A2C               	goto	u3615
 11263  0A2A  0872               	movf	___lwdiv@divisor,w
 11264  0A2B  0274               	subwf	___lwdiv@dividend,w
 11265  0A2C                     u3615:	
 11266  0A2C  1C03               	skipc
 11267  0A2D  2A33               	goto	l2978
 11268  0A2E  0872               	movf	___lwdiv@divisor,w
 11269  0A2F  02F4               	subwf	___lwdiv@dividend,f
 11270  0A30  0873               	movf	___lwdiv@divisor+1,w
 11271  0A31  3BF5               	subwfb	___lwdiv@dividend+1,f
 11272  0A32  1477               	bsf	___lwdiv@quotient,0
 11273  0A33                     l2978:	
 11274  0A33  3001               	movlw	1
 11275  0A34                     u3625:	
 11276  0A34  36F3               	lsrf	___lwdiv@divisor+1,f
 11277  0A35  0CF2               	rrf	___lwdiv@divisor,f
 11278  0A36  0B89               	decfsz	9,f
 11279  0A37  2A34               	goto	u3625
 11280  0A38  3001               	movlw	1
 11281  0A39  02F9               	subwf	___lwdiv@counter,f
 11282  0A3A  1D03               	btfss	3,2
 11283  0A3B  2A21               	goto	l2972
 11284  0A3C                     l2982:	
 11285  0A3C  0878               	movf	___lwdiv@quotient+1,w
 11286  0A3D  00F3               	movwf	?___lwdiv+1
 11287  0A3E  0877               	movf	___lwdiv@quotient,w
 11288  0A3F  00F2               	movwf	?___lwdiv
 11289  0A40  0008               	return
 11290  0A41                     __end_of___lwdiv:	
 11291                           
 11292                           	psect	text44
 11293  1737                     __ptext44:	
 11294 ;; *************** function ___bmul *****************
 11295 ;; Defined at:
 11296 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  multiplier      1    wreg     unsigned char 
 11299 ;;  multiplicand    1    2[COMMON] unsigned char 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  multiplier      1    5[COMMON] unsigned char 
 11302 ;;  product         1    4[COMMON] unsigned char 
 11303 ;; Return value:  Size  Location     Type
 11304 ;;                  1    wreg      unsigned char 
 11305 ;; Registers used:
 11306 ;;		wreg, status,2, status,0
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11312 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;Total ram usage:        4 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    2
 11319 ;; This function calls:
 11320 ;;		Nothing
 11321 ;; This function is called by:
 11322 ;;		_printf
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           
 11327                           ;psect for function ___bmul
 11328  1737                     ___bmul:	
 11329                           
 11330                           ;incstack = 0
 11331                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11332                           ;___bmul@multiplier stored from wreg
 11333  1737  00F5               	movwf	___bmul@multiplier
 11334  1738  01F4               	clrf	___bmul@product
 11335  1739                     l2750:	
 11336  1739  1C75               	btfss	___bmul@multiplier,0
 11337  173A  2F3F               	goto	l2754
 11338  173B  0872               	movf	___bmul@multiplicand,w
 11339  173C  00F3               	movwf	??___bmul
 11340  173D  0873               	movf	??___bmul,w
 11341  173E  07F4               	addwf	___bmul@product,f
 11342  173F                     l2754:	
 11343  173F  1003               	clrc
 11344  1740  0DF2               	rlf	___bmul@multiplicand,f
 11345  1741  1003               	clrc
 11346  1742  0CF5               	rrf	___bmul@multiplier,f
 11347  1743  0875               	movf	___bmul@multiplier,w
 11348  1744  1D03               	btfss	3,2
 11349  1745  2F39               	goto	l2750
 11350  1746  0874               	movf	___bmul@product,w
 11351  1747  0008               	return
 11352  1748                     __end_of___bmul:	
 11353                           
 11354                           	psect	text45
 11355  0801                     __ptext45:	
 11356 ;; *************** function ___lwtoft *****************
 11357 ;; Defined at:
 11358 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;  c               2    0[BANK0 ] unsigned int 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  3    0[BANK0 ] float 
 11365 ;; Registers used:
 11366 ;;		wreg, status,2, status,0, pclath, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        4 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    3
 11379 ;; This function calls:
 11380 ;;		___ftpack
 11381 ;; This function is called by:
 11382 ;;		_CC_CheckRegister
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           
 11387                           ;psect for function ___lwtoft
 11388  0801                     ___lwtoft:	
 11389                           
 11390                           ;incstack = 0
 11391                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11392  0801  0020               	movlb	0	; select bank0
 11393  0802  0820               	movf	___lwtoft@c,w
 11394  0803  00F2               	movwf	___ftpack@arg
 11395  0804  0821               	movf	___lwtoft@c+1,w
 11396  0805  00F3               	movwf	___ftpack@arg+1
 11397  0806  01F4               	clrf	___ftpack@arg+2
 11398  0807  308E               	movlw	142
 11399  0808  00A3               	movwf	??___lwtoft
 11400  0809  0823               	movf	??___lwtoft,w
 11401  080A  00F5               	movwf	___ftpack@exp
 11402  080B  01F6               	clrf	___ftpack@sign
 11403  080C  318C  2428         	fcall	___ftpack
 11404  080E  0872               	movf	?___ftpack,w
 11405  080F  0020               	movlb	0	; select bank0
 11406  0810  00A0               	movwf	?___lwtoft
 11407  0811  0873               	movf	?___ftpack+1,w
 11408  0812  00A1               	movwf	?___lwtoft+1
 11409  0813  0874               	movf	?___ftpack+2,w
 11410  0814  00A2               	movwf	?___lwtoft+2
 11411  0815  0008               	return
 11412  0816                     __end_of___lwtoft:	
 11413                           
 11414                           	psect	text46
 11415  07DA                     __ptext46:	
 11416 ;; *************** function ___awtoft *****************
 11417 ;; Defined at:
 11418 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;  c               2    0[BANK0 ] int 
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;  sign            1    5[BANK0 ] unsigned char 
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  3    0[BANK0 ] float 
 11425 ;; Registers used:
 11426 ;;		wreg, status,2, status,0, pclath, cstack
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;Total ram usage:        6 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    3
 11439 ;; This function calls:
 11440 ;;		___ftpack
 11441 ;; This function is called by:
 11442 ;;		_CC_CheckRegister
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           
 11447                           ;psect for function ___awtoft
 11448  07DA                     ___awtoft:	
 11449                           
 11450                           ;incstack = 0
 11451                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11452  07DA  0020               	movlb	0	; select bank0
 11453  07DB  01A5               	clrf	___awtoft@sign
 11454  07DC  1FA1               	btfss	___awtoft@c+1,7
 11455  07DD  2FE5               	goto	l4484
 11456  07DE  09A0               	comf	___awtoft@c,f
 11457  07DF  09A1               	comf	___awtoft@c+1,f
 11458  07E0  0AA0               	incf	___awtoft@c,f
 11459  07E1  1903               	skipnz
 11460  07E2  0AA1               	incf	___awtoft@c+1,f
 11461  07E3  01A5               	clrf	___awtoft@sign
 11462  07E4  0AA5               	incf	___awtoft@sign,f
 11463  07E5                     l4484:	
 11464  07E5  0820               	movf	___awtoft@c,w
 11465  07E6  00F2               	movwf	___ftpack@arg
 11466  07E7  0821               	movf	___awtoft@c+1,w
 11467  07E8  00F3               	movwf	___ftpack@arg+1
 11468  07E9  01F4               	clrf	___ftpack@arg+2
 11469  07EA  308E               	movlw	142
 11470  07EB  00A3               	movwf	??___awtoft
 11471  07EC  0823               	movf	??___awtoft,w
 11472  07ED  00F5               	movwf	___ftpack@exp
 11473  07EE  0825               	movf	___awtoft@sign,w
 11474  07EF  00A4               	movwf	??___awtoft+1
 11475  07F0  0824               	movf	??___awtoft+1,w
 11476  07F1  00F6               	movwf	___ftpack@sign
 11477  07F2  318C  2428         	fcall	___ftpack
 11478  07F4  0872               	movf	?___ftpack,w
 11479  07F5  0020               	movlb	0	; select bank0
 11480  07F6  00A0               	movwf	?___awtoft
 11481  07F7  0873               	movf	?___ftpack+1,w
 11482  07F8  00A1               	movwf	?___awtoft+1
 11483  07F9  0874               	movf	?___ftpack+2,w
 11484  07FA  00A2               	movwf	?___awtoft+2
 11485  07FB  0008               	return
 11486  07FC                     __end_of___awtoft:	
 11487                           
 11488                           	psect	text47
 11489  0C28                     __ptext47:	
 11490 ;; *************** function ___ftpack *****************
 11491 ;; Defined at:
 11492 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 11493 ;; Parameters:    Size  Location     Type
 11494 ;;  arg             3    2[COMMON] unsigned um
 11495 ;;  exp             1    5[COMMON] unsigned char 
 11496 ;;  sign            1    6[COMMON] unsigned char 
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  3    2[COMMON] float 
 11501 ;; Registers used:
 11502 ;;		wreg, status,2, status,0
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11508 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;Total ram usage:        8 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    2
 11515 ;; This function calls:
 11516 ;;		Nothing
 11517 ;; This function is called by:
 11518 ;;		___altoft
 11519 ;;		___awtoft
 11520 ;;		___ftadd
 11521 ;;		___ftdiv
 11522 ;;		___ftmul
 11523 ;;		___lwtoft
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           
 11528                           ;psect for function ___ftpack
 11529  0C28                     ___ftpack:	
 11530                           
 11531                           ;incstack = 0
 11532                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11533  0C28  0875               	movf	___ftpack@exp,w
 11534  0C29  1903               	btfsc	3,2
 11535  0C2A  2C30               	goto	l3752
 11536  0C2B  0874               	movf	___ftpack@arg+2,w
 11537  0C2C  0473               	iorwf	___ftpack@arg+1,w
 11538  0C2D  0472               	iorwf	___ftpack@arg,w
 11539  0C2E  1D03               	skipz
 11540  0C2F  2C41               	goto	l3758
 11541  0C30                     l3752:	
 11542  0C30  3000               	movlw	0
 11543  0C31  00F2               	movwf	?___ftpack
 11544  0C32  3000               	movlw	0
 11545  0C33  00F3               	movwf	?___ftpack+1
 11546  0C34  3000               	movlw	0
 11547  0C35  00F4               	movwf	?___ftpack+2
 11548  0C36  0008               	return
 11549  0C37                     l3756:	
 11550  0C37  3001               	movlw	1
 11551  0C38  00F7               	movwf	??___ftpack
 11552  0C39  0877               	movf	??___ftpack,w
 11553  0C3A  07F5               	addwf	___ftpack@exp,f
 11554  0C3B  3001               	movlw	1
 11555  0C3C                     u4875:	
 11556  0C3C  36F4               	lsrf	___ftpack@arg+2,f
 11557  0C3D  0CF3               	rrf	___ftpack@arg+1,f
 11558  0C3E  0CF2               	rrf	___ftpack@arg,f
 11559  0C3F  0B89               	decfsz	9,f
 11560  0C40  2C3C               	goto	u4875
 11561  0C41                     l3758:	
 11562  0C41  30FE               	movlw	254
 11563  0C42  0574               	andwf	___ftpack@arg+2,w
 11564  0C43  1903               	btfsc	3,2
 11565  0C44  2C5A               	goto	l695
 11566  0C45  2C37               	goto	l3756
 11567  0C46                     l3760:	
 11568  0C46  3001               	movlw	1
 11569  0C47  00F7               	movwf	??___ftpack
 11570  0C48  0877               	movf	??___ftpack,w
 11571  0C49  07F5               	addwf	___ftpack@exp,f
 11572  0C4A  3001               	movlw	1
 11573  0C4B  07F2               	addwf	___ftpack@arg,f
 11574  0C4C  3000               	movlw	0
 11575  0C4D  1803               	skipnc
 11576  0C4E  3001               	movlw	1
 11577  0C4F  07F3               	addwf	___ftpack@arg+1,f
 11578  0C50  3000               	movlw	0
 11579  0C51  1803               	skipnc
 11580  0C52  3001               	movlw	1
 11581  0C53  07F4               	addwf	___ftpack@arg+2,f
 11582  0C54  3001               	movlw	1
 11583  0C55                     u4895:	
 11584  0C55  36F4               	lsrf	___ftpack@arg+2,f
 11585  0C56  0CF3               	rrf	___ftpack@arg+1,f
 11586  0C57  0CF2               	rrf	___ftpack@arg,f
 11587  0C58  0B89               	decfsz	9,f
 11588  0C59  2C55               	goto	u4895
 11589  0C5A                     l695:	
 11590  0C5A  30FF               	movlw	255
 11591  0C5B  0574               	andwf	___ftpack@arg+2,w
 11592  0C5C  1903               	btfsc	3,2
 11593  0C5D  2C67               	goto	l3768
 11594  0C5E  2C46               	goto	l3760
 11595  0C5F                     l3766:	
 11596  0C5F  3001               	movlw	1
 11597  0C60  02F5               	subwf	___ftpack@exp,f
 11598  0C61  3001               	movlw	1
 11599  0C62                     u4915:	
 11600  0C62  35F2               	lslf	___ftpack@arg,f
 11601  0C63  0DF3               	rlf	___ftpack@arg+1,f
 11602  0C64  0DF4               	rlf	___ftpack@arg+2,f
 11603  0C65  0B89               	decfsz	9,f
 11604  0C66  2C62               	goto	u4915
 11605  0C67                     l3768:	
 11606  0C67  1BF3               	btfsc	___ftpack@arg+1,7
 11607  0C68  2C6D               	goto	l702
 11608  0C69  3002               	movlw	2
 11609  0C6A  0275               	subwf	___ftpack@exp,w
 11610  0C6B  1803               	skipnc
 11611  0C6C  2C5F               	goto	l3766
 11612  0C6D                     l702:	
 11613  0C6D  1875               	btfsc	___ftpack@exp,0
 11614  0C6E  2C75               	goto	l703
 11615  0C6F  30FF               	movlw	255
 11616  0C70  05F2               	andwf	___ftpack@arg,f
 11617  0C71  307F               	movlw	127
 11618  0C72  05F3               	andwf	___ftpack@arg+1,f
 11619  0C73  30FF               	movlw	255
 11620  0C74  05F4               	andwf	___ftpack@arg+2,f
 11621  0C75                     l703:	
 11622  0C75  1003               	clrc
 11623  0C76  0CF5               	rrf	___ftpack@exp,f
 11624  0C77  0875               	movf	___ftpack@exp,w
 11625  0C78  00F7               	movwf	??___ftpack
 11626  0C79  01F8               	clrf	??___ftpack+1
 11627  0C7A  01F9               	clrf	??___ftpack+2
 11628  0C7B  3010               	movlw	16
 11629  0C7C                     u4955:	
 11630  0C7C  35F7               	lslf	??___ftpack,f
 11631  0C7D  0DF8               	rlf	??___ftpack+1,f
 11632  0C7E  0DF9               	rlf	??___ftpack+2,f
 11633  0C7F  0B89               	decfsz	9,f
 11634  0C80  2C7C               	goto	u4955
 11635  0C81  0877               	movf	??___ftpack,w
 11636  0C82  04F2               	iorwf	___ftpack@arg,f
 11637  0C83  0878               	movf	??___ftpack+1,w
 11638  0C84  04F3               	iorwf	___ftpack@arg+1,f
 11639  0C85  0879               	movf	??___ftpack+2,w
 11640  0C86  04F4               	iorwf	___ftpack@arg+2,f
 11641  0C87  0876               	movf	___ftpack@sign,w
 11642  0C88  1903               	btfsc	3,2
 11643  0C89  0008               	return
 11644  0C8A  17F4               	bsf	___ftpack@arg+2,7
 11645  0C8B  0008               	return
 11646  0C8C                     __end_of___ftpack:	
 11647                           
 11648                           	psect	text48
 11649  170A                     __ptext48:	
 11650 ;; *************** function _MCP4922_Write *****************
 11651 ;; Defined at:
 11652 ;;		line 3 in file "mcp4922.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  val             2   24[BANK1 ] unsigned int 
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;		None
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      void 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0, pclath, cstack
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11666 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;Total ram usage:        2 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    3
 11673 ;; This function calls:
 11674 ;;		_SPI1_Exchange8bit
 11675 ;; This function is called by:
 11676 ;;		_CC_CheckRegister
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function _MCP4922_Write
 11682  170A                     _MCP4922_Write:	
 11683                           
 11684                           ;incstack = 0
 11685                           ; Regs used in _MCP4922_Write: [wreg+status,2+status,0+pclath+cstack]
 11686                           ;mcp4922.c: 4: do { LATCbits.LATC2 = 0; } while(0);
 11687  170A  0022               	movlb	2	; select bank2
 11688  170B  110E               	bcf	14,2	;volatile
 11689                           
 11690                           ;mcp4922.c: 5: SPI1_Exchange8bit(0x30 | ((val&0xff00) >>8 ));
 11691  170C  0021               	movlb	1	; select bank1
 11692  170D  0839               	movf	(MCP4922_Write@val+1)^(0+128),w
 11693  170E  3830               	iorlw	48
 11694  170F  3196  26CC  3197   	fcall	_SPI1_Exchange8bit
 11695                           
 11696                           ;mcp4922.c: 6: SPI1_Exchange8bit(val&0x00ff);
 11697  1712  0021               	movlb	1	; select bank1
 11698  1713  0838               	movf	MCP4922_Write@val^(0+128),w
 11699  1714  3196  26CC         	fcall	_SPI1_Exchange8bit
 11700                           
 11701                           ;mcp4922.c: 7: do { LATCbits.LATC2 = 1; } while(0);
 11702  1716  0022               	movlb	2	; select bank2
 11703  1717  150E               	bsf	14,2	;volatile
 11704  1718  0008               	return
 11705  1719                     __end_of_MCP4922_Write:	
 11706                           
 11707                           	psect	text49
 11708  16CC                     __ptext49:	
 11709 ;; *************** function _SPI1_Exchange8bit *****************
 11710 ;; Defined at:
 11711 ;;		line 77 in file "mcc_generated_files/spi1.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  data            1    wreg     unsigned char 
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  data            1    2[COMMON] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  1    wreg      unsigned char 
 11718 ;; Registers used:
 11719 ;;		wreg
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;Total ram usage:        1 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    2
 11732 ;; This function calls:
 11733 ;;		Nothing
 11734 ;; This function is called by:
 11735 ;;		_MCP4922_Write
 11736 ;;		_SPI1_Exchange8bitBuffer
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           
 11741                           ;psect for function _SPI1_Exchange8bit
 11742  16CC                     _SPI1_Exchange8bit:	
 11743                           
 11744                           ;incstack = 0
 11745                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 11746                           ;SPI1_Exchange8bit@data stored from wreg
 11747  16CC  00F2               	movwf	SPI1_Exchange8bit@data
 11748                           
 11749                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 11750  16CD  0024               	movlb	4	; select bank4
 11751  16CE  1395               	bcf	21,7	;volatile
 11752                           
 11753                           ;spi1.c: 82: SSP1BUF = data;
 11754  16CF  0872               	movf	SPI1_Exchange8bit@data,w
 11755  16D0  0091               	movwf	17	;volatile
 11756  16D1                     l302:	
 11757                           ;spi1.c: 85: {
 11758                           
 11759                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 11760                           
 11761  16D1  1C14               	btfss	20,0	;volatile
 11762  16D2  2ED1               	goto	l302
 11763                           
 11764                           ;spi1.c: 86: }
 11765                           ;spi1.c: 88: return (SSP1BUF);
 11766  16D3  0811               	movf	17,w	;volatile
 11767  16D4  0008               	return
 11768  16D5                     __end_of_SPI1_Exchange8bit:	
 11769                           
 11770                           	psect	text50
 11771  16E0                     __ptext50:	
 11772 ;; *************** function _CMD_SetData *****************
 11773 ;; Defined at:
 11774 ;;		line 62 in file "command.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  addr            1    wreg     unsigned char 
 11777 ;;  data            1    2[COMMON] unsigned char 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;  addr            1    4[COMMON] unsigned char 
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  2    2[COMMON] int 
 11782 ;; Registers used:
 11783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        3 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    2
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_CC_CheckRegister
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           
 11804                           ;psect for function _CMD_SetData
 11805  16E0                     _CMD_SetData:	
 11806                           
 11807                           ;incstack = 0
 11808                           ; Regs used in _CMD_SetData: [wreg+fsr1l+fsr1h+status,2+status,0]
 11809                           ;CMD_SetData@addr stored from wreg
 11810  16E0  00F4               	movwf	CMD_SetData@addr
 11811                           
 11812                           ;command.c: 63: if( addr < 3 ){
 11813  16E1  3003               	movlw	3
 11814  16E2  0274               	subwf	CMD_SetData@addr,w
 11815  16E3  1803               	skipnc
 11816  16E4  0008               	return
 11817                           
 11818                           ;command.c: 64: CMD_Reg[addr] = data;
 11819  16E5  0872               	movf	CMD_SetData@data,w
 11820  16E6  00F3               	movwf	??_CMD_SetData
 11821  16E7  0874               	movf	CMD_SetData@addr,w
 11822  16E8  3ED8               	addlw	(low (_CMD_Reg| 0))& (0+255)
 11823  16E9  0086               	movwf	6
 11824  16EA  0187               	clrf	7
 11825  16EB  0873               	movf	??_CMD_SetData,w
 11826  16EC  0081               	movwf	1
 11827                           
 11828                           ;command.c: 65: return 0;
 11829                           ;	Return value of _CMD_SetData is never used
 11830  16ED  0008               	return
 11831  16EE                     __end_of_CMD_SetData:	
 11832                           ;command.c: 66: }
 11833                           ;command.c: 67: return -1;
 11834                           ;	Return value of _CMD_SetData is never used
 11835                           
 11836                           
 11837                           	psect	text51
 11838  177F                     __ptext51:	
 11839 ;; *************** function _CMD_GetData *****************
 11840 ;; Defined at:
 11841 ;;		line 70 in file "command.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;  addr            1    wreg     unsigned char 
 11844 ;;  data            1    2[COMMON] PTR unsigned char 
 11845 ;;		 -> CC_CheckRegister@buf(1), CC_Reg(7), 
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;  addr            1    5[COMMON] unsigned char 
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  2    2[COMMON] int 
 11850 ;; Registers used:
 11851 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11852 ;; Tracked objects:
 11853 ;;		On entry : 0/0
 11854 ;;		On exit  : 0/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11857 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;Total ram usage:        4 bytes
 11862 ;; Hardware stack levels used:    1
 11863 ;; Hardware stack levels required when called:    2
 11864 ;; This function calls:
 11865 ;;		Nothing
 11866 ;; This function is called by:
 11867 ;;		_CC_CheckRegister
 11868 ;; This function uses a non-reentrant model
 11869 ;;
 11870                           
 11871                           
 11872                           ;psect for function _CMD_GetData
 11873  177F                     _CMD_GetData:	
 11874                           
 11875                           ;incstack = 0
 11876                           ; Regs used in _CMD_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
 11877                           ;CMD_GetData@addr stored from wreg
 11878  177F  00F5               	movwf	CMD_GetData@addr
 11879                           
 11880                           ;command.c: 71: if( addr < 3 ){
 11881  1780  3003               	movlw	3
 11882  1781  0275               	subwf	CMD_GetData@addr,w
 11883  1782  1803               	skipnc
 11884  1783  2F92               	goto	l3446
 11885                           
 11886                           ;command.c: 72: (*data) = CMD_Reg[addr];
 11887  1784  0875               	movf	CMD_GetData@addr,w
 11888  1785  3ED8               	addlw	(low (_CMD_Reg| 0))& (0+255)
 11889  1786  0086               	movwf	6
 11890  1787  0187               	clrf	7
 11891  1788  0801               	movf	1,w
 11892  1789  00F4               	movwf	??_CMD_GetData
 11893  178A  0872               	movf	CMD_GetData@data,w
 11894  178B  0086               	movwf	6
 11895  178C  0187               	clrf	7
 11896  178D  0874               	movf	??_CMD_GetData,w
 11897  178E  0081               	movwf	1
 11898                           
 11899                           ;command.c: 73: return 0;
 11900  178F  01F2               	clrf	?_CMD_GetData
 11901  1790  01F3               	clrf	?_CMD_GetData+1
 11902  1791  0008               	return
 11903  1792                     l3446:	
 11904                           
 11905                           ;command.c: 74: }
 11906                           ;command.c: 75: return -1;
 11907  1792  30FF               	movlw	255
 11908  1793  00F2               	movwf	?_CMD_GetData
 11909  1794  30FF               	movlw	255
 11910  1795  00F3               	movwf	?_CMD_GetData+1
 11911  1796  0008               	return
 11912  1797                     __end_of_CMD_GetData:	
 11913                           
 11914                           	psect	intentry
 11915  0004                     __pintentry:	
 11916 ;; *************** function _INTERRUPT_InterruptManager *****************
 11917 ;; Defined at:
 11918 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;		None
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;		None
 11923 ;; Return value:  Size  Location     Type
 11924 ;;                  1    wreg      void 
 11925 ;; Registers used:
 11926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11927 ;; Tracked objects:
 11928 ;;		On entry : 0/0
 11929 ;;		On exit  : 0/0
 11930 ;;		Unchanged: 0/0
 11931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;Total ram usage:        1 bytes
 11937 ;; Hardware stack levels used:    1
 11938 ;; Hardware stack levels required when called:    1
 11939 ;; This function calls:
 11940 ;;		_EUSART_Receive_ISR
 11941 ;;		_EUSART_Transmit_ISR
 11942 ;; This function is called by:
 11943 ;;		Interrupt level 1
 11944 ;; This function uses a non-reentrant model
 11945 ;;
 11946                           
 11947  0004                     _INTERRUPT_InterruptManager:	
 11948                           
 11949                           ;incstack = 0
 11950  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11951                           
 11952                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11953  0005  3180               	pagesel	$
 11954  0006  0020               	movlb	0	; select bank0
 11955  0007  087F               	movf	127,w
 11956  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
 11957                           
 11958                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 11959  0009  1F0B               	btfss	11,6	;volatile
 11960  000A  2815               	goto	i1l280
 11961  000B  0021               	movlb	1	; select bank1
 11962  000C  1E91               	btfss	17,5	;volatile
 11963  000D  2815               	goto	i1l280
 11964  000E  0020               	movlb	0	; select bank0
 11965  000F  1E91               	btfss	17,5	;volatile
 11966  0010  2815               	goto	i1l280
 11967                           
 11968                           ;interrupt_manager.c: 55: {
 11969                           ;interrupt_manager.c: 56: EUSART_Receive_ISR();
 11970  0011  3197  27E4  3180   	fcall	_EUSART_Receive_ISR
 11971                           
 11972                           ;interrupt_manager.c: 57: }
 11973  0014  281F               	goto	i1l284
 11974  0015                     i1l280:	
 11975                           
 11976                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
 11977  0015  1F0B               	btfss	11,6	;volatile
 11978  0016  281F               	goto	i1l284
 11979  0017  0021               	movlb	1	; select bank1
 11980  0018  1E11               	btfss	17,4	;volatile
 11981  0019  281F               	goto	i1l284
 11982  001A  0020               	movlb	0	; select bank0
 11983  001B  1E11               	btfss	17,4	;volatile
 11984  001C  281F               	goto	i1l284
 11985                           
 11986                           ;interrupt_manager.c: 59: {
 11987                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
 11988  001D  3188  2016         	fcall	_EUSART_Transmit_ISR
 11989  001F                     i1l284:	
 11990                           ;interrupt_manager.c: 62: else
 11991                           ;interrupt_manager.c: 63: {
 11992                           
 11993                           ;interrupt_manager.c: 61: }
 11994                           
 11995  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
 11996  0020  0020               	movlb	0	; select bank0
 11997  0021  00FF               	movwf	127
 11998  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11999  0023  0009               	retfie
 12000  0024                     __end_of_INTERRUPT_InterruptManager:	
 12001                           
 12002                           	psect	text53
 12003  0816                     __ptext53:	
 12004 ;; *************** function _EUSART_Transmit_ISR *****************
 12005 ;; Defined at:
 12006 ;;		line 165 in file "mcc_generated_files/eusart.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;		None
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;		None
 12011 ;; Return value:  Size  Location     Type
 12012 ;;                  1    wreg      void 
 12013 ;; Registers used:
 12014 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;Total ram usage:        1 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_INTERRUPT_InterruptManager
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           
 12034                           ;psect for function _EUSART_Transmit_ISR
 12035  0816                     _EUSART_Transmit_ISR:	
 12036                           
 12037                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 12038                           
 12039                           ;incstack = 0
 12040                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12041  0816  3010               	movlw	16
 12042  0817  0021               	movlb	1	; select bank1
 12043  0818  0262               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12044  0819  1803               	skipnc
 12045  081A  2830               	goto	i1l179
 12046                           
 12047                           ;eusart.c: 170: {
 12048                           ;eusart.c: 171: TX1REG = eusartTxBuffer[eusartTxTail++];
 12049  081B  0863               	movf	_eusartTxTail^(0+128),w
 12050  081C  3EC8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 12051  081D  0086               	movwf	6
 12052  081E  0187               	clrf	7
 12053  081F  0801               	movf	1,w
 12054  0820  0023               	movlb	3	; select bank3
 12055  0821  009A               	movwf	26	;volatile
 12056  0822  3001               	movlw	1
 12057  0823  00F0               	movwf	??_EUSART_Transmit_ISR
 12058  0824  0870               	movf	??_EUSART_Transmit_ISR,w
 12059  0825  0021               	movlb	1	; select bank1
 12060  0826  07E3               	addwf	_eusartTxTail^(0+128),f
 12061                           
 12062                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 12063  0827  3010               	movlw	16
 12064  0828  0263               	subwf	_eusartTxTail^(0+128),w
 12065  0829  1803               	btfsc	3,0
 12066                           
 12067                           ;eusart.c: 173: {
 12068                           ;eusart.c: 174: eusartTxTail = 0;
 12069  082A  01E3               	clrf	_eusartTxTail^(0+128)
 12070                           
 12071                           ;eusart.c: 175: }
 12072                           ;eusart.c: 176: eusartTxBufferRemaining++;
 12073  082B  3001               	movlw	1
 12074  082C  00F0               	movwf	??_EUSART_Transmit_ISR
 12075  082D  0870               	movf	??_EUSART_Transmit_ISR,w
 12076  082E  07E2               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12077                           
 12078                           ;eusart.c: 177: }
 12079  082F  0008               	return
 12080  0830                     i1l179:	
 12081                           
 12082                           ;eusart.c: 178: else
 12083                           ;eusart.c: 179: {
 12084                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 12085  0830  1211               	bcf	17,4	;volatile
 12086  0831  0008               	return
 12087  0832                     __end_of_EUSART_Transmit_ISR:	
 12088                           
 12089                           	psect	text54
 12090  17E4                     __ptext54:	
 12091 ;; *************** function _EUSART_Receive_ISR *****************
 12092 ;; Defined at:
 12093 ;;		line 184 in file "mcc_generated_files/eusart.c"
 12094 ;; Parameters:    Size  Location     Type
 12095 ;;		None
 12096 ;; Auto vars:     Size  Location     Type
 12097 ;;		None
 12098 ;; Return value:  Size  Location     Type
 12099 ;;                  1    wreg      void 
 12100 ;; Registers used:
 12101 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12102 ;; Tracked objects:
 12103 ;;		On entry : 0/0
 12104 ;;		On exit  : 0/0
 12105 ;;		Unchanged: 0/0
 12106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;Total ram usage:        1 bytes
 12112 ;; Hardware stack levels used:    1
 12113 ;; This function calls:
 12114 ;;		Nothing
 12115 ;; This function is called by:
 12116 ;;		_INTERRUPT_InterruptManager
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _EUSART_Receive_ISR
 12122  17E4                     _EUSART_Receive_ISR:	
 12123                           
 12124                           ;eusart.c: 187: if(1 == RC1STAbits.OERR)
 12125                           
 12126                           ;incstack = 0
 12127                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12128  17E4  0023               	movlb	3	; select bank3
 12129  17E5  1C9D               	btfss	29,1	;volatile
 12130  17E6  2FE9               	goto	i1l3658
 12131                           
 12132                           ;eusart.c: 188: {
 12133                           ;eusart.c: 191: RC1STAbits.CREN = 0;
 12134  17E7  121D               	bcf	29,4	;volatile
 12135                           
 12136                           ;eusart.c: 192: RC1STAbits.CREN = 1;
 12137  17E8  161D               	bsf	29,4	;volatile
 12138  17E9                     i1l3658:	
 12139                           
 12140                           ;eusart.c: 193: }
 12141                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RC1REG;
 12142  17E9  0819               	movf	25,w	;volatile
 12143  17EA  00F0               	movwf	??_EUSART_Receive_ISR
 12144  17EB  0021               	movlb	1	; select bank1
 12145  17EC  0861               	movf	_eusartRxHead^(0+128),w
 12146  17ED  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12147  17EE  0086               	movwf	6
 12148  17EF  3001               	movlw	1	; select bank2/3
 12149  17F0  0087               	movwf	7
 12150  17F1  0870               	movf	??_EUSART_Receive_ISR,w
 12151  17F2  0081               	movwf	1
 12152  17F3  3001               	movlw	1
 12153  17F4  00F0               	movwf	??_EUSART_Receive_ISR
 12154  17F5  0870               	movf	??_EUSART_Receive_ISR,w
 12155  17F6  07E1               	addwf	_eusartRxHead^(0+128),f
 12156                           
 12157                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12158  17F7  3010               	movlw	16
 12159  17F8  0261               	subwf	_eusartRxHead^(0+128),w
 12160  17F9  1803               	btfsc	3,0
 12161                           
 12162                           ;eusart.c: 198: {
 12163                           ;eusart.c: 199: eusartRxHead = 0;
 12164  17FA  01E1               	clrf	_eusartRxHead^(0+128)
 12165                           
 12166                           ;eusart.c: 200: }
 12167                           ;eusart.c: 201: eusartRxCount++;
 12168  17FB  3001               	movlw	1
 12169  17FC  00F0               	movwf	??_EUSART_Receive_ISR
 12170  17FD  0870               	movf	??_EUSART_Receive_ISR,w
 12171  17FE  07FB               	addwf	_eusartRxCount,f	;volatile
 12172  17FF  0008               	return
 12173  1800                     __end_of_EUSART_Receive_ISR:	
 12174  007E                     btemp	set	126	;btemp
 12175  007E                     int$flags	set	126
 12176  007E                     wtemp0	set	126


Data Sizes:
    Strings     83
    Constant    45
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      78
    BANK1            80     40      76
    BANK2            80      0      48
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    strtol@endptr	PTR PTR unsigned char  size(1) Largest target is 1
		 -> ParseLong@end(BANK0[1]), 

    strtol@s	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_5(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_19(CODE[3]), STR_17(CODE[3]), STR_16(CODE[4]), 
		 -> STR_14(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[4]), STR_4(CODE[3]), STR_3(CODE[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_18(CODE[28]), STR_15(CODE[5]), STR_13(CODE[5]), STR_9(CODE[5]), 
		 -> STR_6(CODE[5]), STR_2(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ParseUByte@ret	PTR unsigned char  size(1) Largest target is 1
		 -> CMD_Execute@val(BANK0[1]), CMD_Execute@addr(BANK0[1]), 

    ParseUByte@str	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    ParseLong@end	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    ParseLong@str	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    ParseLong@ret	PTR long  size(1) Largest target is 2
		 -> ParseUByte@val(BANK0[2]), ParseUInt@val(COMMON[2]), ParseByte@val(COMMON[2]), ParseInt@val(COMMON[2]), 

    Split@out	PTR PTR unsigned char  size(1) Largest target is 3
		 -> CMD_Execute@buf(BANK0[3]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    Split@delimiter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    Split@str	PTR const unsigned char  size(1) Largest target is 32
		 -> CMD_Buf(BANK2[32]), 

    Split@tok	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    CMD_GetData@data	PTR unsigned char  size(1) Largest target is 7
		 -> CC_CheckRegister@buf(BANK1[1]), CC_Reg(BANK1[7]), 

    CMD_Execute@buf	PTR unsigned char [3] size(1) Largest target is 32
		 -> NULL(NULL[0]), CMD_Buf(BANK2[32]), 

    CMD_Execute@cmd	PTR const unsigned char  size(1) Largest target is 32
		 -> CMD_Buf(BANK2[32]), 


Critical Paths under _main in COMMON

    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _Split->_strtok
    _strspn->_strchr
    _strcspn->_strchr
    _strtol->___lmul
    _isalpha->_isupper
    ___altoft->___ftpack
    ___ftmul->___ftpack
    ___ftadd->___ftpack
    ___ftdiv->___ftpack
    ___ftdiv->___ftpack
    _printf->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _CMD_Receive->_CMD_Execute
    _CMD_Execute->_ParseUByte
    _CMD_Execute->_printf
    _Split->_strtok
    _strtok->_strcspn
    _strtok->_strspn
    _ParseUByte->_ParseLong
    _ParseLong->_strtol
    _strtol->___lmul
    _CC_CheckRegister->_sin
    _sin->_floor
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->_floor
    ___ftadd->___ftmul
    ___ftdiv->___awtoft
    _printf->___lwmod
    _MCP4922_Write->_sin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_CC_CheckRegister
    _CC_CheckRegister->_MCP4922_Write
    _sin->___ftsub
    ___ftsub->_floor
    _MCP4922_Write->_sin

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   73614
                                             37 BANK1      3     3      0
                   _CC_CheckRegister
                        _CMD_Receive
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CMD_Receive                                          1     1      0   10712
                                             41 BANK0      1     1      0
                        _CMD_Execute
                        _EUSART_Read
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _CMD_Execute                                          9     9      0   10621
                                             32 BANK0      9     9      0
                         _ParseUByte
                              _Split
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               5     3      2     279
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) _Split                                                9     6      3    2126
                                             12 BANK0      9     6      3
                             _strtok
 ---------------------------------------------------------------------------------
 (4) _strtok                                               6     4      2    1679
                                              9 COMMON     1     1      0
                                              7 BANK0      5     3      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (5) _strspn                                               7     5      2     587
                                              0 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strcspn                                              7     5      2     587
                                              0 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (6) _strchr                                               7     3      4     344
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) _ParseUByte                                           7     4      3    2948
                                             25 BANK0      7     4      3
                          _ParseLong
 ---------------------------------------------------------------------------------
 (4) _ParseLong                                            6     3      3    2351
                                             19 BANK0      6     3      3
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              15    11      4    1442
                                              4 BANK0     15    11      4
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              2     2      0      67
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              2     2      0     158
                                              4 COMMON     2     2      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     220
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CC_CheckRegister                                    11    11      0   62876
                                             26 BANK1     11    11      0
                        _CMD_GetData
                        _CMD_SetData
                      _MCP4922_Write
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             _printf
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   39224
                                             77 BANK0      1     1      0
                                             11 BANK1     13    10      3
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                9     6      3    9948
                                             73 BANK0      4     1      3
                                              0 BANK1      5     5      0
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     452
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     525
                                             51 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1082
                                              2 COMMON     6     0      6
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2865
                                             65 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7   10115
                                             51 BANK0     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4150
                                             22 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4983
                                              5 BANK1      6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4579
                                             38 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     288
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3312
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printf                                              30    22      8    4743
                                              6 BANK0     26    18      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     670
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     386
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     173
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2769
                                              0 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2794
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _MCP4922_Write                                        2     0      2     194
                                             24 BANK1      2     0      2
                  _SPI1_Exchange8bit
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                                _sin (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CMD_SetData                                          3     2      1     130
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _CMD_GetData                                          4     2      2     258
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC_CheckRegister
     _CMD_GetData
     _CMD_SetData
     _MCP4922_Write
       _SPI1_Exchange8bit
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _sin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         _eval_poly (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___wmul (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _printf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _sin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___wmul (ARG)
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _frexp
   _CMD_Receive
     _CMD_Execute
       _ParseUByte
         _ParseLong
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
       _Split
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _printf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _EUSART_Write
       _strcmp
     _EUSART_Read
     _toupper
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     28      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 27 17:42:41 2017

                  _SPI1_Exchange8bit 16CC                         ___altoft@exp 0067  
                     ___bmul@product 0074                   ?_SPI1_Exchange8bit 0070  
                        __CFG_CP$OFF 0000                        ___altoft@sign 0068  
                                 l72 0523                  ___wmul@multiplicand 0074  
                       ___ftadd@exp1 0052                         ___ftadd@exp2 0051  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 0050  
                                l302 16D1                                  l261 16DD  
                                l167 0859                                  l424 01DA  
                                l419 01B8                                  l452 0310  
                                l702 0C6D                                  l534 17D1  
                                l374 0062                                  l703 0C75  
                                l447 02F5                                  l391 0188  
                                l393 00E1                                  l726 0FA9  
                                l906 0411                                  l941 0621  
                                l695 0C5A                                  l786 0CF9  
                                _GIE 005F                         __CFG_CPD$OFF 0000  
                ??_SPI1_Exchange8bit 0072                                  _sin 0311  
                                wreg 0009                         ?_EUSART_Read 0070  
                       ___ftdiv@cntr 0030                         ___ftdiv@sign 0035  
                               l1049 1797                                 l4010 0CA5  
                               l2500 1769                                 l4030 0CE3  
                               l2502 176A                                 l4110 096F  
                               l4200 0157                                 l2512 1753  
                               l2600 06F5                                 l4202 015B  
                               l4130 0070                                 l4122 005C  
                               l4042 0D0A                                 l2610 0714  
                               l4106 0969                                 l4060 090C  
                               l4036 0CF0                                 l4028 0CD5  
                               l2452 1708                                 l2516 1758  
                               l2604 0701                                 l3412 0833  
                               l4054 08F4                                 l2630 086C  
                               l4302 02DE                                 l4222 01AC  
                               l4206 0167                                 l4134 007D  
                               l4142 00AB                                 l4038 0CFC  
                               l2462 1726                                 l2550 064B  
                               l3262 08BB                                 l4056 0900  
                               l4064 0915                                 l2616 084F  
                               l4304 02E2                                 l4128 0067  
                               l4312 0040                                 l4320 0DC4  
                               l2480 09E4                                 l2536 0636  
                               l3256 089A                                 l2474 16FA  
                               l4250 01FC                                 l4218 01A1  
                               l4170 00F8                                 l4154 00BA  
                               l4074 0A4D                                 l2554 0657  
                               l3258 08A2                                 l4410 0749  
                               l4308 0302                                 l4260 021E  
                               l4252 0205                                 l4172 0106  
                               l4156 00DE                                 l4340 0E1B  
                               l2484 09EF                                 l2564 0670  
                               l2548 0647                                 l3446 1792  
                               l2750 1739                                 l4190 0131  
                               l4182 0128                                 l4166 00F6  
                               l4158 00E3                                 l4326 0DDA  
                               l2590 06B4                                 l2582 0699  
                               l2574 0689                                 l4430 07A2  
                               l4414 0758                                 l4510 0B2B  
                               l2736 17CB                                 l4280 0270  
                               l4272 024E                                 l4256 0212  
                               l4192 013D                                 l4184 012A  
                               l4360 0922                                 l2568 0678  
                               l3800 09A4                                 l4096 08E8  
                               l4424 078A                                 l2754 173F  
                               l4274 0251                                 l4266 0230  
                               l4178 011B                                 l4450 0337  
                               l4530 051D                                 l2586 06AA  
                               l2578 0691                                 l4292 028E  
                               l4284 0275                                 l4188 012D  
                               l4196 014A                                 l4348 0E34  
                               l3900 0F7F                                 l4532 0525  
                               l4294 02B7                                 l4278 026D  
                               l3910 0F9B                                 l3902 0F84  
                               l4374 0D3E                                 l4462 03D8  
                               l3830 0BC5                                 l3822 0B9E  
                               l3814 0B85                                 l4438 07CA  
                               l3760 0C46                                 l3752 0C30  
                               l4288 0282                                 l3920 0FCD  
                               l3912 0FA5                                 l3904 0F88  
                               l4536 0548                                 l4528 051B  
                               l3832 0BC6                                 l3808 0B80  
                               l2970 0A15                                 l3930 0FE8  
                               l4378 0D46                                 l4554 0618  
                               l4538 0552                                 l3756 0C37  
                               l4484 07E5                                 l2972 0A21  
                               l3916 0FBB                                 l3860 0A9B  
                               l4388 0DA0                                 l3844 0895  
                               l4580 1778                                 l3766 0C5F  
                               l3758 0C41                                 l2982 0A3C  
                               l3870 0F32                                 l4398 0C21  
                               l3942 0AE1                                 l3782 09AF  
                               l3768 0C67                                 l3880 0F48  
                               l3960 0E6D                                 l3784 09B8  
                               l2978 0A33                                 l3874 0F39  
                               l3858 0A8B                                 l3938 0ACA  
                               l3794 097E                                 l3892 0F62  
                               l3796 0987                                 l3788 09D5  
                               l3990 0EDA                                 l3982 0EC6  
                               l3966 0E83                                 l3898 0F75  
                               l3994 0EE2                                 l3978 0EBE  
                               ?_sin 00AB                                 STR_1 107E  
                               STR_2 1066                                 STR_3 106F  
                               STR_4 107B                                 STR_5 1077  
                               STR_6 1066                                 STR_7 106F  
                               STR_8 107B                                 STR_9 1066  
                               _LATA 010C                                 u3015 17D2  
                               _LATC 010E                                 u3025 17D7  
                               u2505 09F0                                 u2515 09F7  
                               u3605 0A22                                 u3615 0A2C  
                               u5215 0F76                                 u2735 06BB  
                               u4520 0B74                                 u3625 0A34  
                               u6115 0DEC                                 u5075 0A90  
                               u6125 0DFC                                 u5245 0F89  
                               u5405 0EC7                                 u6135 0E1C  
                               u5415 0ECD                                 u3585 0A18  
                               u6065 0300                                 u6145 0E2B  
                               u5185 0F63                                 u6330 03D2  
                               u6155 0E35                                 u5275 0F9C  
                               u5515 0CD6                                 u6340 03D3  
                               u5605 0906                                 u5445 0EE3  
                               u5615 090D                                 u5455 0EE9  
                               u5375 0E8F                                 u5385 0E9F  
                               u5545 0CF1                                 u6505 0612  
                               u4915 0C62                                 u5485 0CAC  
                               u5585 08F7                                 u5665 0964  
                               u4955 0C7C                                 u4875 0C3C  
                               u5915 01F5                                 u5765 0114  
                               u4895 0C55                                 u5775 0121  
                               u5885 01D3                                 u5985 0241  
                               u5995 0260                                 _PLLR 48E0  
                               _WPUA 020C                                 _WPUC 020E  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _main 176C                         ___ftpack@arg 0072  
                       ___ftpack@exp 0075                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 sin@f 00AB  
                               sin@y 00AE                        __CFG_BORV$LOW 0000  
                               start 0024            __end_of_SPI1_Exchange8bit 16D5  
                CC_CheckRegister@buf 00C4                        __CFG_CSWEN$ON 0000  
                  ___bmul@multiplier 0075                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         ___fttol@exp1 0060  
                       ___fttol@lval 005C                                ??_sin 006D  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 000B  
      __end_of_OSCILLATOR_Initialize 16E0                                ?_main 0070  
                    __end_of___ftadd 1000                                STR_10 106B  
                              STR_11 107B                                STR_12 1073  
                              STR_20 105A                                STR_13 1061  
                              STR_21 1049                                STR_14 107B  
                              STR_15 1066                                STR_16 106F  
                              STR_17 107B                        __CFG_WDTE$OFF 0000  
                              STR_18 102D                                STR_19 107B  
                    __end_of___ftdiv 0E56                      __end_of___ftneg 16C4  
                    __end_of___ftmul 0F0A                      __end_of___ftsub 0948  
                    __end_of___fttol 0D13                       __CFG_DEBUG$OFF 0000  
                    __end_of___lwdiv 0A41                                i1l280 0015  
                    __end_of___lwmod 091A                                i1l179 0830  
                              i1l284 001F                                _OSCEN 091D  
                              _TRISA 008C                                _TRISC 008E  
                 __end_ofsin@coeff_a 1021                   __end_ofsin@coeff_b 102D  
                              _Angle 00DD                  ___lmul@multiplicand 0076  
                              _Split 08C1                        ___awtoft@sign 0025  
                    __end_of_dpowers 100A                       _WDT_Initialize 07FC  
                              _floor 0D13                                _frexp 0A41  
                              _errno 00DB                      __end_of_isalpha 175A  
                    __end_of_isdigit 16FC                        ___ftpack@sign 0076  
                              _putch 16B1                      __end_of_isspace 176C  
                    __end_of_isupper 170A                                sin@x2 00B4  
                              status 0003                                wtemp0 007E  
                    __end_of_strcspn 09AA                      __end_of_toupper 1728  
           __size_of_SPI1_Initialize 0008                       __CFG_MCLRE$OFF 0000  
                    __initialization 0026                         __end_of_main 177F  
                     ??_EUSART_Write 0072          ?_INTERRUPT_InterruptManager 0070  
               __size_of_CMD_GetData 0018                               ??_main 007A  
                      ___fttol@sign1 005B                 __size_of_CMD_Execute 00BD  
                         _ParseUByte 0948                 __size_of_CMD_Receive 0041  
               __size_of_CMD_SetData 000E               __end_of_WDT_Initialize 0800  
                             ?_Split 002C                               ?_floor 0069  
              __end_of_MCP4922_Write 1719                               ?_frexp 0072  
                   __end_of___altoft 0AB3                     __end_of___awtoft 07FC  
                             _ANSELA 018C                               ?_putch 0070  
                             _ANSELC 018E                     __end_of___ftpack 0C8C  
                  ?_CC_CheckRegister 0070                               _CC_Reg 00E5  
                             _RC1REG 0199                               _RC1STA 019D  
                             _ODCONA 028C                               _ODCONC 028E  
                             i1l3658 17E9                     __end_of___lwtoft 0816  
                             _OSCFRQ 091F                               _TX1REG 019A  
                             _WDTCON 0097                               _TX1STA 019E  
                 ??_CC_CheckRegister 00BA                SPI1_Exchange8bit@data 0072  
         __size_of_SPI1_Exchange8bit 0009                       __CFG_PWRTE$OFF 0000  
                 __size_of_ParseLong 0029                               ___bmul 1737  
                             ___ftge 0AB3                               ___lmul 09DB  
                             ___wmul 17C9                            ??___ftadd 004C  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 002C  
                          ??___ftneg 0075                            ??___ftmul 003C  
                          ??___ftsub 007A                            ??___fttol 0057  
                          ??___lwdiv 0076                            ??___lwmod 0024  
                _EUSART_Transmit_ISR 0816                               _printf 003B  
                             _strchr 1797                               _strcmp 0898  
                             _strtok 0B76                               _strtol 061F  
                             _strspn 09AA                               floor@i 00A0  
                             floor@x 0069                ___ftmul@f3_as_product 0041  
                          ??_isalpha 0074                            ??_isdigit 0072  
                             sin@sgn 00B7                            ??_isspace 0072  
                    ?_WDT_Initialize 0070                            ??_isupper 0072  
                          ??_strcspn 0022                            ??_toupper 0072  
               ?_EUSART_Transmit_ISR 0070                 __size_of_EUSART_Read 001C  
                  _SYSTEM_Initialize 1728              __end_of__initialization 0037  
                         ___altoft@c 0061                           ___ftadd@f1 0046  
                         ___ftadd@f2 0049                           ___ftge@ff1 0072  
                         ___ftge@ff2 0075                   ?_SYSTEM_Initialize 0070  
                       eval_poly@res 005A                           ___ftdiv@f1 0029  
                         ___ftdiv@f2 0026                           ___ftdiv@f3 0031  
                         ___ftneg@f1 0072                           ___awtoft@c 0020  
                ___bmul@multiplicand 0072                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 00A8  
                         ___ftsub@f2 00A5                           ___fttol@f1 0053  
                     __pcstackCOMMON 0070                        __end_of_Split 08ED  
                ??_SYSTEM_Initialize 0073                        __end_of_floor 0DAD  
                      __end_of_frexp 0A76                    ??_SPI1_Initialize 0072  
                      __end_of_putch 16B6                           ___lwtoft@c 0020  
                        ?_ParseUByte 0039                    __end_of_ParseLong 0898  
                            ??_Split 002F                              ??_floor 006C  
                            ??_frexp 0076            __end_of_SYSTEM_Initialize 1737  
              ??_EUSART_Transmit_ISR 0070                              ??_putch 0074  
                         __pbssBANK1 00C8                           __pbssBANK2 0120  
                 __size_of_eval_poly 0060                 __end_of_EUSART_Write 086F  
        __size_of_EUSART_Receive_ISR 001C                       _SSP1DATPPSbits 0E21  
                         __pmaintext 176C                              ?___bmul 0072  
                            ?___ftge 0072                              ?___lmul 0072  
                            ?___wmul 0072                      __CFG_PPS1WAY$ON 0000  
                         __pintentry 0004                            ?___altoft 0061  
                     ___lmul@product 0020                            ?___awtoft 0020  
                          ?___ftpack 0072                       _SSP1CLKPPSbits 0E20  
                            ?_printf 0026                  __CFG_RSTOSC$HFINT32 0000  
                            ?_strchr 0072                              ?_strcmp 0072  
                            _CMD_Buf 0130                            ?___lwtoft 0020  
                            ?_strtok 0027                              ?_strtol 0024  
                            ?_strspn 0020                              _CMD_Reg 00D8  
                            _CMD_Ptr 007A                        _eusartRxCount 007B  
                            _SP1BRGH 019C                              _SP1BRGL 019B  
                            _OSCCON1 0919                              _OSCCON3 091B  
                            _OSCTUNE 091E                              _SSP1ADD 0212  
                            _PPSLOCK 0E0F                              _SSP1BUF 0211  
                __size_of_ParseUByte 0031                      __size_of___bmul 0011  
                    __size_of___ftge 003D                      __size_of___lmul 0032  
                            ___ftadd 0F0A                              ___ftdiv 0DAD  
                            ___ftneg 16BC                      __size_of___wmul 001B  
                            ___ftmul 0E56                              ___ftsub 091A  
                            ___fttol 0C8C                              ___lwdiv 0A0D  
                            ___lwmod 08ED                           ??___altoft 0065  
                         ??___awtoft 0023                           ??___ftpack 0077  
                  __end_of_eval_poly 0C28                         ParseLong@end 0038  
                       ParseLong@ret 0033                         ParseLong@str 0037  
                            __ptext1 1728                              __ptext2 07FC  
                            __ptext3 16C4                              __ptext4 0B31  
                            __ptext5 16D5                              __ptext6 17B0  
                            __ptext7 0AF0                              __ptext8 0832  
                            __ptext9 071D                      __size_of_printf 02D6  
                         ??___lwtoft 0023                      __size_of_strchr 0019  
                    __size_of_strcmp 0029                    __end_of_hexpowers 1012  
                    __size_of_strtok 0052                      __size_of_strtol 00FE  
                    __size_of_strspn 0031                              _dpowers 1000  
              _OSCILLATOR_Initialize 16D5                              _isalpha 1748  
                            _isdigit 16EE                         __size_of_sin 01BC  
           ??_PIN_MANAGER_Initialize 0072                              _isspace 175A  
                            _isupper 16FC           __size_of_SYSTEM_Initialize 000F  
                            clrloop0 16B7                              _strcspn 0979  
                            _toupper 1719                 end_of_initialization 0037  
                     CMD_Execute@cmd 0042                       CMD_Execute@buf 0043  
                     CMD_Execute@cnt 0047                       CMD_Execute@val 0046  
                   MCP4922_Write@val 00B8                    _EUSART_Initialize 17B0  
                 ?_EUSART_Initialize 0070                              printf@c 003F  
                            printf@f 0026                        ??_CMD_GetData 0074  
          __size_of_CC_CheckRegister 0152                         __pstringtext 1000  
                      ??_CMD_Execute 0040                              strcmp@r 0075  
                      ??_CMD_Receive 0049                        ??_CMD_SetData 0073  
                ??_EUSART_Initialize 0072                     ??_WDT_Initialize 0072  
                            strtol@a 002D                              strtol@c 0032  
                            strspn@i 0024                              strtol@s 0031  
              __size_of_EUSART_Write 0021                         strtol@endptr 0024  
                   __CFG_FEXTOSC$OFF 0000                            _RXPPSbits 0E24  
          __end_of_EUSART_Initialize 17C9                          ___ftdiv@exp 0034  
                    _SPI1_Initialize 16C4                          printf@width 003C  
                        ___ftmul@exp 0040                _CC_CheckRegister$1301 00BE  
              _CC_CheckRegister$1302 00C1                       __end_of___bmul 1748  
                     __end_of___ftge 0AF0                       __end_of___lmul 0A0D  
             __size_of_MCP4922_Write 000F                       __end_of___wmul 17E4  
                       _EUSART_Write 084E               ?_OSCILLATOR_Initialize 0070  
                __end_of_CMD_GetData 1797                           floor@expon 00A3  
                       ??_ParseUByte 003C                       __end_of_printf 0311  
                     __end_of_strchr 17B0                       __end_of_strcmp 08C1  
                     __end_of_strtok 0BC8                       __end_of_strtol 071D  
                     __end_of_strspn 09DB                  start_initialization 0026  
                         eval_poly@d 0056                  __end_of_CMD_Execute 07DA  
                         eval_poly@n 0058                           eval_poly@x 0053  
                __end_of_CMD_Receive 0B31      __size_of_PIN_MANAGER_Initialize 0045  
                __end_of_CMD_SetData 16EE                          __end_of_sin 04CD  
                      ??_EUSART_Read 0072                          putch@txData 0074  
                          _ParseLong 086F                           frexp@value 0072  
                    CMD_GetData@addr 0075                      CMD_GetData@data 0072  
                   __CFG_LPBOREN$OFF 0000                       ParseUByte@base 003A  
                 __end_of_ParseUByte 0979                             ??___bmul 0073  
                           ??___ftge 0020                             ??___lmul 007A  
                           ??___wmul 0076                             ??_printf 002E  
                           ??_strchr 0076                             ??_strcmp 0074  
                           ??_strtok 0029                             ??_strtol 0028  
                           ??_strspn 0022                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0064  
        __end_of_EUSART_Transmit_ISR 0832                          __pbssCOMMON 007A  
                          ___latbits 0002                    __size_of___lwtoft 0015  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                       _isalpha$1067 0074              __end_of_SPI1_Initialize 16CC  
                      _MCP4922_Write 170A                           ?_ParseLong 0033  
         __end_of_EUSART_Receive_ISR 1800           __size_of_EUSART_Initialize 0019  
                         sin@coeff_a 1012                           sin@coeff_b 1021  
                __end_of_EUSART_Read 084E                     ___lwdiv@dividend 0074  
             _PIN_MANAGER_Initialize 0B31                 EUSART_Read@readValue 0073  
                        _CMD_GetData 177F                             ?___ftadd 0046  
                   _CC_CheckRegister 04CD                             ?___ftdiv 0026  
                           ?___ftneg 0072                             ?___ftmul 0036  
                           ?___ftsub 00A5                             ?___fttol 0053  
                           ?___lwdiv 0072                             ?___lwmod 0020  
                       _eusartRxHead 00E1                         _eusartTxHead 00E4  
                       _eusartRxTail 00E0                         _eusartTxTail 00E3  
                        _CMD_Execute 071D         ??_INTERRUPT_InterruptManager 0071  
                        _CMD_Receive 0AF0                          _CMD_SetData 16E0  
            _eusartTxBufferRemaining 00E2                             _BAUD1CON 019F  
                           ?_isalpha 0070                             ?_isdigit 0070  
                          _eval_poly 0BC8                             ?_isspace 0070  
                           ?_isupper 0070                       __size_of_Split 002C  
                          _hexpowers 100A                     ___lwdiv@quotient 0077  
                     ?_MCP4922_Write 00B8                       __size_of_floor 009A  
                     __size_of_frexp 0035                             ?_strcspn 0020  
                           ?_toupper 0070                       __size_of_putch 0005  
                     _eusartRxBuffer 0120                       _eusartTxBuffer 00C8  
                     ___wmul@product 0076                             _LATCbits 010E  
                          clear_ram0 16B6                             _PIE1bits 0091  
__size_of_INTERRUPT_InterruptManager 0020                             _PIR1bits 0011  
                           _SSP1CON1 0215                             _SSP1STAT 0214  
                  ___wmul@multiplier 0072                           printf@flag 003A  
                          main@angle 00C5                           printf@prec 003E  
                         ?_eval_poly 0053                         _isspace$1070 0072  
                        _EUSART_Read 0832                     ?_SPI1_Initialize 0070  
                  ___lmul@multiplier 0072                          ??_ParseLong 0036  
                          frexp@eptr 0075                        ParseUByte@val 003E  
                      ParseUByte@ret 0039                        ParseUByte@str 003D  
            ??_OSCILLATOR_Initialize 0072                             Split@cnt 0032  
                   __size_of___ftadd 00F6                             Split@tok 0034  
                           Split@out 002E                             Split@str 0031  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0008  
                           ___altoft 0A76                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                   __size_of___lwdiv 0034                     __size_of___lwmod 002D  
                           ___awtoft 07DA                             ___ftpack 0C28  
                        _isdigit$907 0072                             ___lwtoft 0801  
                       _isupper$1073 0072                     __size_of_isalpha 0012  
                   __size_of_isdigit 000E                      ??_MCP4922_Write 007A  
                      ParseLong@base 0034                      ___lwdiv@divisor 0072  
                   __size_of_isspace 0012                      ___lwdiv@counter 0079  
                           __ptext10 0898                             __ptext11 08C1  
                           __ptext20 175A                             __ptext12 0B76  
                           __ptext21 1748                             __ptext13 09AA  
                           __ptext30 0A76                             __ptext22 16FC  
                           __ptext14 0979                             __ptext31 0BC8  
                           __ptext23 09DB                             __ptext15 1797  
                           __ptext40 16EE                             __ptext32 0E56  
                           __ptext24 04CD                             __ptext16 0948  
                           __ptext41 17C9                             __ptext33 091A  
                           __ptext25 0311                             __ptext17 086F  
                           __ptext50 16E0                             __ptext42 08ED  
                           __ptext34 0F0A                             __ptext26 0D13  
                           __ptext18 061F                             __ptext51 177F  
                           __ptext43 0A0D                             __ptext35 16BC  
                           __ptext27 0A41                             __ptext19 1719  
                           __ptext44 1737                             __ptext36 0DAD  
                           __ptext28 0C8C                             __ptext53 0816  
                           __ptext45 0801                             __ptext37 003B  
                           __ptext29 0AB3                             __ptext54 17E4  
                           __ptext46 07DA                             __ptext38 16B1  
                           __ptext47 0C28                             __ptext39 084E  
                           __ptext48 170A                             __ptext49 16CC  
                   __size_of_isupper 000E                             _sin$1303 00B1  
                       _SSP1CON1bits 0215                     __size_of_strcspn 0031  
                   __size_of_toupper 000F                        __size_of_main 0013  
                         _RC0PPSbits 0EA0                           _RC1PPSbits 0EA1  
                         _RC1STAbits 019D                           _RC4PPSbits 0EA4  
                           int$flags 007E                           strtol@base 0025  
                         strtol@sign 002C   __end_of_INTERRUPT_InterruptManager 0024  
         _INTERRUPT_InterruptManager 0004                            printf@idx 0032  
                          printf@len 0036                            printf@val 0038  
                       _SSP1STATbits 0214                       Split@delimiter 002C  
        PIN_MANAGER_Initialize@state 0072                           _INTCONbits 000B  
                        ??_eval_poly 007A                      CMD_Execute@addr 0048  
                           isalpha@c 0075                             isdigit@c 0073  
           __end_of_CC_CheckRegister 061F              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                            strchr@chr 0074  
                   ___lwmod@dividend 0022                            strchr@ptr 0072  
                           isspace@c 0073              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                            strcspn@s1 0026  
                          strcspn@s2 0020                          _PPSLOCKbits 0E0F  
                           isupper@c 0073                         ?_CMD_GetData 0072  
                           printf@ap 0035                             printf@cp 0033  
                 _EUSART_Receive_ISR 17E4                         ?_CMD_Execute 0070  
                       ?_CMD_Receive 0070                         ?_CMD_SetData 0072  
                ?_EUSART_Receive_ISR 0070                             strcmp@s1 0076  
                           strcmp@s2 0072                      ___lwmod@divisor 0020  
                    ___lwmod@counter 0025                             strcspn@i 0024  
                           toupper@c 0073                             strtok@s1 0079  
                           strtok@s2 0027                             strspn@s1 0026  
                           strspn@s2 0020                             strtok@sp 00DF  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 001C  
     __end_of_PIN_MANAGER_Initialize 0B76                 ??_EUSART_Receive_ISR 0070  
                    CMD_SetData@addr 0074                      CMD_SetData@data 0072  
